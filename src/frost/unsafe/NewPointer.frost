package frost.unsafe

====================================================================================================
Represents a system-level pointer to a block of memory. Pointers are inherently unsafe, bringing
all of the standard dangers of C pointers with them into Frost. They are primarily used internally
by Frost in the implementation of various data structures, and should generally be avoided in favor
of these high-level data structures.

The normal rules for typecasting do not apply to Pointers. A Pointer of any type may be cast into a
Pointer of any other type. Since non-value types are represented internally as pointers, a Pointer
to a non-value type (such as `Pointer<Object>`) is actually a pointer to a pointer to an `Object`.
This means it is safe to cast e.g. `Pointer<Object>` to `Pointer<String>`, or vice versa, despite
the fact that `String` and `Object` are different sizes (so long as the underlying objects being
pointed to are in fact `String`s, of course).
====================================================================================================
@final
class NewPointer<T> : Value {
    -*
        This is a special class which requires extra support from the compiler. Most notably, there
        is a unique annotation '@pointerSize' used here. @pointerSize means "we need to know the
        size of the pointer's datatype within this method"; normally there would not be a way to
        determine this. @pointerSize causes the method to take an extra, hidden parameter named
        'pointerSize' which contains the pointer's size.
    *-

    @private
    def value:builtin_int

    @private
    init(value:builtin_int) {
        self.value := value
    }

    ================================================================================================
    Creates a pointer with a specific integer value.
    ================================================================================================
    init(value:Int) {
        self.value := value.value
    }

    ================================================================================================
    Allocates a zero-filled block of memory big enough to hold `count` instances of its type and
    returns a pointer to it. For instance, `Pointer<Int64>.alloc(8)` is equivalent to the C code
    `calloc(sizeof(int64_t), 8)`.
    ================================================================================================
    @class
    @pointerSize
    method alloc(count:Int):NewPointer<T> {
        return NewPointer<T>(Frost.alloc(count.value * pointerSize))
    }

    ================================================================================================
    Returns the item pointed to by this pointer. Equivalent to `pointer[0]`.
    ================================================================================================
    function get():T {
        unreachable, "NewPointer.get() should have been compiled as an intrinsic"
    }

    ================================================================================================
    Replaces the item pointed to by this pointer with a new value. Equivalent to
    `pointer[0] := value`. For reference counted values, this handles unreffing the previous value
    and reffing the new value automatically.
    ================================================================================================
    method set(value:T) {
        unreachable, "NewPointer.set() should have been compiled as an intrinsic"
    }

    ================================================================================================
    Returns the n'th item pointed to by this pointer. Equivalent to `pointer.offset(count).get()`.
    ================================================================================================
    @pointerSize
    function [](index:Int):T {
        unreachable, "NewPointer[] should have been compiled as an intrinsic"
    }

    ================================================================================================
    Replaces the n'th item pointed to by this pointer. Equivalent to
    `pointer.offset(count).set(value)`. For reference counted values, this handles unreffing the
    previous value and reffing the new value automatically.
    ================================================================================================
    @pointerSize
    method []:=(index:Int, value:T) {
        unreachable, "NewPointer[]:= should have been compiled as an intrinsic"
    }

    ================================================================================================
    Changes the size of the block of memory pointed to by this pointer, equivalent to the C
    `realloc` function. Just as with `realloc`, the original pointer is invalid after this call and
    the returned pointer (which may or not be the same) must be used instead.
    ================================================================================================
    @pointerSize
    method realloc(oldCount:Int, newCount:Int):NewPointer<T> {
        return NewPointer<T>(Frost.realloc(value, oldCount.value * pointerSize,
                newCount.value * pointerSize))
    }

    ================================================================================================
    Moves this pointer forward (or backward if `count` is negative) `count` steps. Each step is the
    size of a single element of type `T`, rounded up to its alignment, so e.g. offsetting an `Int32`
    pointer by 4 steps will generally move it by 16 total bytes. This call is not bounds-checked,
    and moving the pointer outside of its associated block of memory can lead to undefined behavior.
    ================================================================================================
    @pointerSize
    function +(count:Int):NewPointer<T> {
        def m1:builtin_int := count.value
        def m2:builtin_int := pointerSize
        return NewPointer<T>(value + m1 * m2)
    }

    ================================================================================================
    Frees the block of memory that this pointer points to. This is exactly equivalent to the C
    `free` function, and in particular **does not do any reference counting or cleanup of values in
    the pointed-to memory**. If, for instance, you wish to destroy a `Pointer<Pointer<Char8>>`, you
    must first `destroy` all of the inner `Pointer<Char8>`s or you will leak memory. If the values
    pointed to by the pointer are reference counted objects, you must call `Frost.unref()` (or
    use [clear]) to unref them.
    ================================================================================================
    method destroy() {
        Frost.destroy(value)
    }

    property asInt:Int
    function get_asInt():Int {
        return value
    }

    ================================================================================================
    If the pointer points to a reference counted object type, unrefs the indicated slot and sets it
    to `null`. Otherwise, does nothing. This is used to permit safe handling of references from
    within generic types which do not know whether or not they are dealing with a reference-counted
    type.
    ================================================================================================
    method clear(index:Int) {
        unreachable, "NewPointer.clear() should have been compiled as an intrinsic"
    }

    ================================================================================================
    Asks Frost to treat the memory pointed to by the Pointer as if it were an instance of the type
    in question, returning the value pointed to by the pointer. This is *not the same* as
    typecasting a pointer and dereferencing it. With normal pointer typecasts, such as
    `Pointer<Object>->Pointer<String>`, the Pointer points to a block of memory containing a pointer
    to an object. The actual object lives elsewhere on the heap, and it is safe to simply treat the
    pointer as a different (compatible) type. But this method tells Frost that the pointer points
    *directly* to an object of that type, not to a pointer which points to an object of that type.
    This is, effectively, the difference between performing `Pointer<Object>->Pointer<String>`
    (directly supported) and `Pointer<UInt8>->String` (this is what `convertTo` does).

    The correct usage of this method is something along the lines of:

        def memory := Pointer<UInt8>.alloc(<enough memory to hold the object's fields>)
        <fill in memory with the object's fields>
        def finalPointer := memory.convertTo<Type>()

    Since there are no publicly-exposed facilities for figuring out the size and layout of a class,
    this method is for internal use only.
    ================================================================================================
    @private
    function convertTo<T>():T {
        unreachable, "NewPointer.clear() should have been compiled as an intrinsic"
    }
}
