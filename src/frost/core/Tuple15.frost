package frost.core
===@hidden===
class Tuple15<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> {
    def f0:T0
    def f1:T1
    def f2:T2
    def f3:T3
    def f4:T4
    def f5:T5
    def f6:T6
    def f7:T7
    def f8:T8
    def f9:T9
    def f10:T10
    def f11:T11
    def f12:T12
    def f13:T13
    def f14:T14

    init(f0:T0, f1:T1, f2:T2, f3:T3, f4:T4, f5:T5, f6:T6, f7:T7, f8:T8, f9:T9, f10:T10, f11:T11, f12:T12, f13:T13, f14:T14) {
       self.f0 := f0
       self.f1 := f1
       self.f2 := f2
       self.f3 := f3
       self.f4 := f4
       self.f5 := f5
       self.f6 := f6
       self.f7 := f7
       self.f8 := f8
       self.f9 := f9
       self.f10 := f10
       self.f11 := f11
       self.f12 := f12
       self.f13 := f13
       self.f14 := f14
    }

    @pre(i >= 0 & i < 15)
    function []<T>(i:Int):T {
        match i {
            when 0 { return f0->T }
            when 1 { return f1->T }
            when 2 { return f2->T }
            when 3 { return f3->T }
            when 4 { return f4->T }
            when 5 { return f5->T }
            when 6 { return f6->T }
            when 7 { return f7->T }
            when 8 { return f8->T }
            when 9 { return f9->T }
            when 10 { return f10->T }
            when 11 { return f11->T }
            when 12 { return f12->T }
            when 13 { return f13->T }
            when 14 { return f14->T }
        }
        unreachable
    }

    @override
    function get_toString():String {
        function nonnull(o:Object?):Object {
            if o !== null { return o } else { return '<null>' }
        }
        return "(\{nonnull(f0)}, \{nonnull(f1)}, \{nonnull(f2)}, \{nonnull(f3)}, \{nonnull(f4)}, \{nonnull(f5)}, \{nonnull(f6)}, \{nonnull(f7)}, \{nonnull(f8)}, \{nonnull(f9)}, \{nonnull(f10)}, \{nonnull(f11)}, \{nonnull(f12)}, \{nonnull(f13)}, \{nonnull(f14)})"
    }
}
