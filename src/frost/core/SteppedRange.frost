package frost.core

====================================================================================================
Similar to [Range], but with a `step` value that indicates the number of steps to take during each
iteration. For instance, the code:

    -- testcase SteppedRangeIntro1(Simple)
    for i in SteppedRange<Int, Int>(0, 100, 10, true) {
        Console.printLine(i)
    }

will count by 10 and print the numbers 0, 10, 20, ..., 90, 100. The exclusive range (`..`) and
inclusive range (`...`) operators provide a shorthand syntax for creating `Range` and `SteppedRange`
objects; the loop above could be more succinctly (and readably) written:

    -- testcase SteppedRangeIntro2(Simple)
    for i in 0 ... 100 by 10 {
        Console.printLine(i)
    }
====================================================================================================
@specialize
class SteppedRange<EndPoint:Value?, Step:Value> : Value {
    ================================================================================================
    The range's starting point.
    ================================================================================================
    def start:EndPoint

    ================================================================================================
    The range's ending point.
    ================================================================================================
    def end:EndPoint

    ================================================================================================
    The range's step count.
    ================================================================================================
    def step:Step

    ================================================================================================
    `true` if the range includes its endpoint.
    ================================================================================================
    def inclusive:Bit

    ================================================================================================
    Creates a new `SteppedRange`.
    ================================================================================================    
    init(start:EndPoint, end:EndPoint, step:Step, inclusive:Bit) {
        self.start := start
        self.end := end
        self.step := step
        self.inclusive := inclusive
    }

    @override
    function get_toString():String {
        def result := MutableString()
        if start !== null {
            result.append(start!)
        }
        if inclusive {
            result.append("...")
        }
        else {
            result.append("..")
        }
        if end !== null {
            result.append(end!)
        }
        result.append(" by ")
        result.append(step)
        return result.finish()
    }
}