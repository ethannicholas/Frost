package frost.core

uses frost.unsafe.NewPointer

====================================================================================================
Represents a single 2-byte word of a UTF-16 encoded string.

A single-codepoint string literal whose single codepoint fits into a `Char16` (that is, Unicode
codepoints 0 to 65535) may be used wherever a `Char16` is expected. That is, it is legal to write:

    def c:Char16 := "A"
====================================================================================================
@final
class Char16 : Value, HashKey<Char16>, Comparable<Char16> {
    @private
    def value:builtin_uint16

    init(value:UInt16) {
        self.value := value.value
    }

    @override
    function =(other:Char16):Bit {
        return value = other.value
    }

    @override
    function !=(other:Char16):Bit {
        return value != other.value
    }

    @override
    function <(other:Char16):Bit {
        return value < other.value
    }

    @override
    function >(other:Char16):Bit {
        return value > other.value
    }

    @override
    function <=(other:Char16):Bit {
        return value <= other.value
    }

    @override
    function >=(other:Char16):Bit {
        return value >= other.value
    }

    ================================================================================================
    Returns a string consisting of `count` copies of this character.
    ================================================================================================
    function *(count:Int):String {
        def result := MutableString()
        for i in 0 .. count {
            result.append(self)
        }
        return result.finish()
    }

    ================================================================================================
    Returns a string consisting of `count` copies of the given character.
    ================================================================================================
    @class
    function *(count:Int, char:Char16):String {
        return char * count
    }

    @override
    function get_hash():Int {
        return asInt
    }

    property asChar8:Char8
    function get_asChar8():Char8 {
        return Char8(asUInt8)
    }

    property asChar32:Char32
    function get_asChar32():Char32 {
        return Char32(asInt32)
    }

    property asInt8:Int8
    function get_asInt8():Int8 {
        return Int8(value->builtin_int8)
    }

    property asInt16:Int16
    function get_asInt16():Int16 {
        return Int16(value->builtin_int16)
    }

    property asInt32:Int32
    function get_asInt32():Int32 {
        return Int32(value->builtin_int32)
    }

    property asInt64:Int64
    function get_asInt64():Int64 {
        return Int64(value->builtin_int64)
    }

    property asInt:Int
    function get_asInt():Int {
        return Int(value->builtin_int)
    }

    property asUInt8:UInt8
    function get_asUInt8():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    property asUInt16:UInt16
    function get_asUInt16():UInt16 {
        return UInt16(value)
    }

    property asUInt32:UInt32
    function get_asUInt32():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    property asUInt64:UInt64
    function get_asUInt64():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    property asUInt:UInt
    function get_asUInt():UInt {
        return UInt(value->builtin_uint)
    }

    ================================================================================================
    Returns a string containing this character. Note that separately encoding high and low surrogate
    pairs may not produce the intended result; they should generally be decoded into a single
    `Char32` before being reencoded into a `String`.
    ================================================================================================
    @override
    function get_asString():String {
        if value < 0x80 {
            def data := NewPointer<Char8>.alloc(1)
            data[0] := Char8(asUInt8)
            return String(data, 1)
        }
        if value < 0x800 {
            def data := NewPointer<Char8>.alloc(2)
            data[0] := Char8(UInt8((value >> 6 || 0b11000000)->builtin_uint8))
            data[1] := Char8(UInt8((value && 0b111111 || 0b10000000)->builtin_uint8))
            return String(data, 2)
        }
        def data := NewPointer<Char8>.alloc(3)
        data[0] := Char8(UInt8((value >> 12 || 0b11100000)->builtin_uint8))
        data[1] := Char8(UInt8((value >> 6 && 0b111111 || 0b10000000)->builtin_uint8))
        data[2] := Char8(UInt8((value && 0b111111 || 0b10000000)->builtin_uint8))
        return String(data, 3)
    }
}