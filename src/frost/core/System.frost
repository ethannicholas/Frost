package frost.core

====================================================================================================
Provides utility methods that interface with the operating environment.
====================================================================================================
@final
class System {
    ================================================================================================
    Represents a program launched by [System.exec].
    ================================================================================================
    @final
    class Process : Immutable {
        @private
        def pid:Int

        @private
        def stdin:Int

        @private
        def stdout:Int

        @private
        def stderr:Int

        ============================================================================================
        Returns an `OutputStream` which sends its output to the process' standard input stream.
        ============================================================================================
        @external
        method standardInput():OutputStream

        ============================================================================================
        Returns an `InputStream` which reads from the process' standard output stream.
        ============================================================================================
        @external
        method standardOutput():InputStream

        ============================================================================================
        Returns an `InputStream` which reads from the process' standard error stream.
        ============================================================================================
        @external
        method standardError():InputStream

        ============================================================================================
        Returns the process' exit code, or null if the process has not yet exited. The precise
        meaning of the exit code is defined by the program and operating environment, but typically
        an exit code of `0` indicates success and a non-zero exit code indicates an error.
        ============================================================================================
        @external
        method exitCode():Int?

        ============================================================================================
        Waits for the process to finish and returns its exit code.
        ============================================================================================
        @external
        method waitFor():Int

        @private
        @external
        method _cleanup()
        
        @override
        method cleanup() {
            _cleanup()
        }
    }

    @private
    init() {
    }

    ================================================================================================
    Returns the current working directory.
    ================================================================================================
    @class
    @external
    method workingDirectory():File

    ================================================================================================
    Returns a path to a directory suitable for storing temporary files.
    ================================================================================================
    @class
    @external
    method temporaryDirectory():File

    ================================================================================================
    Causes the program to immediately stop running, returning the indicated exit code to the
    operating system. Generally an exit value of 0 is taken to mean a normal exit and a non-zero
    value is taken to mean an error occurred, but the interpretation of the exit codeis
    system-dependent. Cleanup methods are **not** run when an exit is forced in this fashion; among
    other things, this means that open files will not be properly flushed and closed, which may
    cause output to be incomplete.
    ================================================================================================
    @class
    @external
    method exit(status:Int)

    ================================================================================================
    Causes the program to perform an illegal operation which forces an abnormal exit.
    ================================================================================================
    @class
    @external
    method crash()

    ================================================================================================
    Executes an external program with the given command line arguments. If `path` is just a filename
    (meaning it does not contain any path separator characters), the system PATH environment
    variable will be searched to find it.

    Returns the resulting process, or an error if it could not be created. Successfully creating the
    process does not imply that the child program can actually be executed. If the child program
    cannot not be started, the resulting process will exit immediately with a nonzero exit code, but
    no error will otherwise be reported.
    ================================================================================================
    @class
    @external
    method exec(path:String, args:ListView<String>):Maybe<Process>
}