package frost.core

====================================================================================================
Provides utility methods that interface with the operating environment.
====================================================================================================
class System {
    ================================================================================================
    Represents a program launched by [System.exec].
    ================================================================================================
    class Process : Immutable {
        @private
        def pid:Int

        @private
        def stdin:Int

        @private
        def stdout:Int

        @private
        def stderr:Int

        ============================================================================================
        Returns an `OutputStream` which sends its output to the process' standard input stream.
        ============================================================================================
        @external(frostProcessStandardInput)
        method standardInput():OutputStream

        ============================================================================================
        Returns an `InputStream` which reads from the process' standard output stream.
        ============================================================================================
        @external(frostProcessStandardOutput)
        method standardOutput():InputStream

        ============================================================================================
        Returns an `InputStream` which reads from the process' standard error stream.
        ============================================================================================
        @external(frostProcessStandardError)
        method standardError():InputStream

        ============================================================================================
        Returns the process' exit code, or null if the process has not yet exited. The precise
        meaning of the exit code is defined by the program and operating environment, but typically
        an exit code of `0` indicates success and a non-zero exit code indicates an error.
        ============================================================================================
        @external(frostProcessExitCode)
        method exitCode():Int?

        ============================================================================================
        Waits for the process to finish and returns its exit code.
        ============================================================================================
        @external(frostProcessWaitFor)
        method waitFor():Int

        @private
        @external(frostProcessCleanup)
        method _cleanup()
        
        @override
        method cleanup() {
            _cleanup()
        }
    }

    @private
    init() {
    }

    ================================================================================================
    Returns the current working directory. As relative file paths are evaluated relative to this
    directory, changing the current working directory will break path evaluation and Frost therfore
    does not provide a means to do so.
    ================================================================================================
    @class
    @external(frostSystemWorkingDirectory)
    method workingDirectory():File

    ================================================================================================
    Returns a path to a directory suitable for storing temporary files. The operating environment
    may or may not automatically delete files written to this directory at some point after the
    program terminates. A well-behaved program will delete any temporary files it writes.
    ================================================================================================
    @class
    @external(frostSystemTemporaryDirectory)
    method temporaryDirectory():File

    ================================================================================================
    Causes the program to immediately stop running, returning the indicated exit code to the
    operating system. Generally an exit value of 0 is taken to mean a normal exit and a non-zero
    value is taken to mean an error occurred, but the interpretation of the exit codeis
    system-dependent. Cleanup methods are **not** run when an exit is forced in this fashion; among
    other things, this means that open files will not be properly flushed and closed, which may
    cause output to be incomplete.
    ================================================================================================
    @class
    @noReturn
    @external(frostSystemExit)
    method exit(status:Int)

    ================================================================================================
    Causes the program to perform an illegal operation which forces an abnormal exit.
    ================================================================================================
    @class
    @noReturn
    @external(frostSystemCrash)
    method crash()

    ================================================================================================
    Executes an external program with the given command line arguments. If `path` is just a filename
    (meaning it does not contain any path separator characters), the system PATH environment
    variable will be searched to find it.

    Returns the resulting process, or an error if it could not be created. Successfully creating the
    process does not necessarily mean that the child program can actually be executed. If a
    `Process` is returned, but the child program cannot not be successfully started, the resulting
    process will exit immediately with a nonzero exit code, but no error will otherwise be reported.
    ================================================================================================
    @class
    @external(frostSystemExec)
    method exec(path:String, args:ListView<String>):Maybe<Process>
}