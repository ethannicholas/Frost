package frost.core

uses frost.unsafe.Pointer

====================================================================================================
Represents any Unicode codepoint in the entire range from 0 to 1,114,112.

A single-codepoint string literal may be used wherever a `Char32` is expected. That is, it is legal
to write:

    def c:Char32 := "A"

Note that a string which visually appears to be a single character may in fact consist of more than
one Unicode codepoint, and thus not be accepted as a `Char32` literal.
====================================================================================================
@final
class Char32 : Value, Key<Char32>, Comparable<Char32> {
    @private
    def value:builtin_int32

    init(value:Int32) {
        self.value := value.value
    }

    @override
    function =(other:Char32):Bit {
        return value = other.value
    }

    @override
    function !=(other:Char32):Bit {
        return value != other.value
    }

    @override
    function <(other:Char32):Bit {
        return value < other.value
    }

    @override
    function >(other:Char32):Bit {
        return value > other.value
    }

    @override
    function <=(other:Char32):Bit {
        return value <= other.value
    }

    @override
    function >=(other:Char32):Bit {
        return value >= other.value
    }

    function isWhitespace():Bit {
        -- FIXME respect all Unicode whitespace
        return self = " " | self = "\t" | self = "\r" | self = "\n"
    }

    ================================================================================================
    Returns a string consisting of `count` copies of this character.
    ================================================================================================
    function *(count:Int):String {
        def result := MutableString()
        for i in 0 .. count {
            result.append(self)
        }
        return result.finish()
    }

    ================================================================================================
    Returns a string consisting of `count` copies of the given character.
    ================================================================================================
    @class
    function *(count:Int, char:Char32):String {
        return char * count
    }

    @override
    function get_hash():Int {
        return convert()
    }

    function convert():Char8 {
        return Char8(convert())
    }

    function convert():Char16 {
        return Char16(convert())
    }

    function convert():Int8 {
        return Int8(value->builtin_int8)
    }

    function convert():Int16 {
        return Int16(value->builtin_int16)
    }

    function convert():Int32 {
        return Int32(value)
    }

    function convert():Int64 {
        return Int64(value->builtin_int64)
    }

    function convert():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    function convert():UInt16 {
        return UInt16(value->builtin_uint16)
    }

    function convert():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    function convert():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    ================================================================================================
    Returns a single-character `String` containing this `Char32`.
    ================================================================================================
    @override
    function get_asString():String {
        if value < 0x80 {
            def data := Pointer<Char8>.alloc(1)
            data[0] := Char8(UInt8(value->builtin_uint8))
            return String(data, 1)
        }
        if value < 0x800 {
            def data := Pointer<Char8>.alloc(2)
            data[0] := Char8(UInt8((value >> 6 || 0b11000000)->builtin_uint8))
            data[1] := Char8(UInt8((value && 0b111111 || 0b10000000)->builtin_uint8))
            return String(data, 2)
        }
        if value < 0x10000 {
            def data := Pointer<Char8>.alloc(3)
            data[0] := Char8(UInt8((value >> 12 || 0b11100000)->builtin_uint8))
            data[1] := Char8(UInt8((value >> 6 && 0b111111 || 0b10000000)->builtin_uint8))
            data[2] := Char8(UInt8((value && 0b111111 || 0b10000000)->builtin_uint8))
            return String(data, 3)
        }
        def data := Pointer<Char8>.alloc(4)
        data[0] := Char8(UInt8((value >> 18 || 0b11110000)->builtin_uint8))
        data[1] := Char8(UInt8((value >> 12 && 0b111111 || 0b10000000)->builtin_uint8))
        data[2] := Char8(UInt8((value >> 6 && 0b111111 || 0b10000000)->builtin_uint8))
        data[3] := Char8(UInt8((value && 0b111111 || 0b10000000)->builtin_uint8))
        return String(data, 4)
    }
}