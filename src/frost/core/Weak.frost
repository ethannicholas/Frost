package frost.core

====================================================================================================
Holds a weak reference to an object. A weak reference allows access to an object, but does not
participate in reference counting. Objects are destroyed when there are no remaining normal
("strong") references to them, even if one or more `Weak` references remain in memory.
====================================================================================================
@final
class Weak<T> {
    @private
    @class
    function checkValid(o:Object?):Bit {
        return o !== null & o->Weak<Object>.valid
    }

    property valid:Bit

    -- This is special cased within the compiler
    @private
    def value:T?

    @private
    var _valid := true

    init(value:T?) {
        self.value := value
        if value !== null {
            value.$flags ||= Frost.WEAK_REFERENCE_FLAG
            Frost.addWeakReference(self)
        }
    }

    ================================================================================================
    Returns the object referenced by this `Weak`. It is a safety violation to refer to an object
    after it has been destroyed (by having no remaining strong references to it); this will be
    detected using default compiler settings, but result in undefined behavior when safety checks
    are disabled.
    ================================================================================================
    method get():T {
        assert valid, "dereferencing weak pointer after its referent was destroyed"
        return value!
    }

    function get_valid():Bit {
        return _valid
    }

    @override
    function get_asString():String {
        return "Weak(\{value})"
    }
}