package frost.core

uses frost.unsafe.Pointer

====================================================================================================
Contains utility methods used in the internal implementation of certain language features.
====================================================================================================
@package
@final
class Frost {
    -- Object.flags bit which indicates that the object has had weak references to it created
    constant WEAK_REFERENCE_FLAG:UInt8 := 1

    @private
    init() {
    }

    @private
    @class
    function success(o:Object):Maybe<Object>? {
        return Maybe<Object>.SUCCESS(o)
    }

    @private
    @class
    function error(msg:String):Maybe<Object>? {
        return Maybe<Object>.ERROR(Error(msg))
    }

    @class
    @external
    method ref(o:Object?)

    @class
    @external
    method unref(o:Object?)

    @class
    @external
    method alloc(size:builtin_int):builtin_int

    @class
    @external
    method destroy(ptr:builtin_int)

    @class
    @external
    method realloc(ptr:builtin_int, oldSize:builtin_int, newSize:builtin_int):builtin_int

    @class
    @external
    method addWeakReference<T>(w:Weak<T>)

    @class
    method _addWeakReference(w:Weak<Object>, map:HashMap<Int, Array<Weak<Object>>>) {
        var address := addressOf(w.get())
        var list := map[address]
        if list == null {
            list := Array<Weak<Object>>()
            map[address] := list
        }
        list.add(w)
    }

    @class
    method weakReferentDestroyed(address:Int, map:HashMap<Int, Array<Weak<Object>>>) {
        def list := map[address]
        assert list !== null
        for w in list {
            w._valid := false
            w.value := null
        }
        map.remove(address)
    }

    @class
    function createWeakReferenceMap():HashMap<Int, Array<Object>> {
        return HashMap<Int, Array<Object>>()
    }

    @class
    @external
    function toReal64(s:String):Real64

    @class
    @external
    function floatToIntBits(r:Real64):Int64

    @class
    @external
    function addressOf(o:Object):Int

    @class
    method assertionFailure(file:String, line:Int) {
        try {
            Console.errorStream().printLine("assertion failure (\{file}:\{line})")
        }
        fail(error) {
        }
        System.crash()
    }

    @class
    method assertionFailure(file:String, line:Int, msg:String) {
        try {
            Console.errorStream().printLine("assertion failure (\{file}:\{line}): \{msg}")
        }
        fail(error) {
        }
        System.crash()
    }

    @class
    function digit(c:Char32):UInt64? {
        if c >= "0" & c <= "9" {
            return c.asUInt64 - "0"->Char8.asUInt64
        }
        if c >= "A" & c <= "Z" {
            return c.asUInt64 - "A"->Char8.asUInt64 + 10
        }
        if c >= "a" & c <= "z" {
            return c.asUInt64 - "a"->Char8.asUInt64 + 10
        }
        return null
    }

    ================================================================================================
    Used to implement the various number classes' radix parse methods.
    ================================================================================================
    @class
    function parse(str:String, rawRadix:Int):UInt64? {
        if str = "" {
            return null
        }
        var result:UInt64 := 0
        def radix := rawRadix.asUInt64
        var index := str.start
        while index != str.end {
            def value := digit(str[index])
            if value == null | value >= radix {
                return null
            }
            result := result * radix + value
            index := str.next(index)
        }
        return result
    }

    @external
    @class
    function sqrt(v:builtin_float32):builtin_float32

    @external
    @class
    function sqrt(v:builtin_float64):builtin_float64

    @class 
    @external 
    method currentTime():builtin_int64

    ================================================================================================
    Used to implement alignment specifiers during string interpolation. The alignment specifier must
    be of the form `[<fill>]<direction><width>`, where the optional `<fill>` is a single character
    to fill the string width, `<direction>` is `"<"` (left), `"^"` (center), or `">"` (right), and
    width is a positive integer specifying the minimum length of the resulting string.

    @param str the string to align
    @param specifier an alignment specifier such as `"0>6"`
    ================================================================================================
    @class
    function align(str:String, specifier:String):String {
        assert specifier.length >= 2, "invalid alignment string '\{specifier}'"
        var index := specifier.next(specifier.start)
        match specifier[index] {
            when "<", "^", ">" {
                -- do nothing
            }
            otherwise {
                index := specifier.start
            }
        }
        def width := specifier[specifier.next(index)..].asInt
        assert width !== null, "invalid alignment string '\{specifier}'"
        def fill:Char32
        if index = specifier.start {
            fill := " "
        }
        else {
            fill := specifier[specifier.start]
        }
        match specifier[index] {
            when "<"  { return str.leftAlign(width, fill) }
            when "^"  { return str.centerAlign(width, fill) }
            when ">"  { return str.rightAlign(width, fill) }
            otherwise { unreachable }
        }
    }

    ================================================================================================
    Used to implement the various number classes' format methods.

    @param sign true if the number is negative
    @param rawValue the number's absolute value
    @param mask a bit mask representing the actual size of the number
    @param fmt the format string
    ================================================================================================
    @class
    function format(sign:Bit, rawValue:UInt64, mask:UInt64, fmt:String):String {
        var index := fmt.start
        var base:UInt64 := 10
        var digits := "0123456789abcdef".utf8
        if index < fmt.end {
            match fmt[index] {
                when "b", "B" {
                    base := 2
                }
                when "o", "O" {
                    base := 8
                }
                when "d", "D" {
                    base := 10
                }
                when "x" {
                    base := 16
                }
                when "X" {
                    base := 16
                    digits := "0123456789ABCDEF".utf8
                }
                otherwise {
                    unreachable, "invalid format string"
                }
            }
        }
        var value:UInt64 -- FIXME make rawValue a var parameter
        if sign & base != 10 {
            value := (-rawValue.asInt64).asUInt64 && mask
        }
        else {
            value := rawValue
        }
        constant max := 64
        def chars := Pointer<Char8>.alloc(max)
        var charIndex := max - 1
        do {
            chars[charIndex] := digits[(value % base).asInt]
            value //= base
            charIndex -= 1
        }
        while value > 0
        if sign & base = 10 {
            chars[charIndex] := "-"
            charIndex -= 1
        }
        charIndex += 1
        def size := max - charIndex
        for i in 0 .. size {
            chars[i] := chars[i + charIndex]
        }
        return String(chars, size)
    }

    @class
    function hash<T:HashKey<T>>(o:T?):Int {
        if o !== null {
            return o.hash
        }
        return 0
    }

    @class
    function string(o:Object?):String {
        if o !== null {
            return o.asString
        }
        return "<null>"
    }

    @class
    function equal<T:Equatable<T>>(a:T?, b:T?):Bit {
        if a == null {
            return b == null
        }
        if b == null {
            return false
        }
        return a = b
    }

    @class
    @external
    method debugPrint(i:builtin_int64)

    @class
    @external
    method debugPrint(o:Object)

    @class
    @external
    method disableRefErrorReporting()
}