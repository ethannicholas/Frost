package frost.core
@package
class EquatableTuple2<T0:Equatable<T0>, T1:Equatable<T1>> : Equatable<EquatableTuple2<T0, T1>> {
    def f0:T0
    def f1:T1

    init(f0:T0, f1:T1) {
       self.f0 := f0
       self.f1 := f1
    }

    @pre(i >= 0 & i < 2)
    function []<T>(i:Int):T {
        match i {
            when 0 { return f0->T }
            when 1 { return f1->T }
        }
        unreachable
    }

    @override
    function =(other:EquatableTuple2<T0, T1>):Bit {
        if f0 != other.f0 { return false }
        if f1 != other.f1 { return false }
        return true
    }
    @override
    function get_toString():String {
        return "(\{f0}, \{f1})"
    }
}
