------------------------------------------------------------------
-- This file was autogenerated by 'writeNumbers', do not modify --
------------------------------------------------------------------

package frost.core

uses frost.unsafe.Pointer

===
A 32-bit unsigned integer.
===
@final
class UInt : Value, HashKey<UInt>, Comparable<UInt>, Formattable, ListView<Bit> {
    ===
    The smallest value this type can hold (0).
    ===
    constant MIN:UInt := 0

    ===
    The largest value this type can hold ((-,1).,asU,Int).
    ===
    constant MAX:UInt := (-1).asUInt

    @private
    def value:builtin_uint

    @private
    @implicit
    init(value:builtin_uint) {
        self.value := value
    }

    @implicit
    @priority(-5)
    init(value:UInt8) {
        self.value := value.value->builtin_uint
    }

    @implicit
    @priority(-4)
    init(value:UInt16) {
        self.value := value.value->builtin_uint
    }

    ===Adds another number to this number.===
    @priority(13)
    function +(other:Int32):Int64 {
        return value->builtin_int64 + other.value->builtin_int64
    }

    ===Adds another number to this number.===
    @priority(17)
    function +(other:Int):Int64 {
        return value->builtin_int64 + other.value->builtin_int64
    }

    ===Adds another number to this number.===
    @priority(12)
    function +(other:UInt32):UInt32 {
        return value->builtin_uint32 + other.value
    }

    ===Adds another number to this number.===
    @priority(14)
    function +(other:UInt64):UInt64 {
        return value->builtin_uint64 + other.value
    }

    ===Adds another number to this number.===
    @priority(20)
    function +(other:UInt):UInt {
        return value + other.value
    }

    ===Adds another number to this number without checking for overflow.===
    @priority(13)
    function +&(other:Int32):Int64 {
        return value->builtin_int64 +& other.value->builtin_int64
    }

    ===Adds another number to this number without checking for overflow.===
    @priority(17)
    function +&(other:Int):Int64 {
        return value->builtin_int64 +& other.value->builtin_int64
    }

    ===Adds another number to this number without checking for overflow.===
    @priority(12)
    function +&(other:UInt32):UInt32 {
        return value->builtin_uint32 +& other.value
    }

    ===Adds another number to this number without checking for overflow.===
    @priority(14)
    function +&(other:UInt64):UInt64 {
        return value->builtin_uint64 +& other.value
    }

    ===Adds another number to this number without checking for overflow.===
    @priority(20)
    function +&(other:UInt):UInt {
        return value +& other.value
    }

    ===Subtracts another number from this number.===
    @priority(13)
    function -(other:Int32):Int64 {
        return value->builtin_int64 - other.value->builtin_int64
    }

    ===Subtracts another number from this number.===
    @priority(17)
    function -(other:Int):Int64 {
        return value->builtin_int64 - other.value->builtin_int64
    }

    ===Subtracts another number from this number.===
    @priority(12)
    function -(other:UInt32):UInt32 {
        return value->builtin_uint32 - other.value
    }

    ===Subtracts another number from this number.===
    @priority(14)
    function -(other:UInt64):UInt64 {
        return value->builtin_uint64 - other.value
    }

    ===Subtracts another number from this number.===
    @priority(20)
    function -(other:UInt):UInt {
        return value - other.value
    }

    ===Subtracts another number from this number without checking for overflow.===
    @priority(13)
    function -&(other:Int32):Int64 {
        return value->builtin_int64 -& other.value->builtin_int64
    }

    ===Subtracts another number from this number without checking for overflow.===
    @priority(17)
    function -&(other:Int):Int64 {
        return value->builtin_int64 -& other.value->builtin_int64
    }

    ===Subtracts another number from this number without checking for overflow.===
    @priority(12)
    function -&(other:UInt32):UInt32 {
        return value->builtin_uint32 -& other.value
    }

    ===Subtracts another number from this number without checking for overflow.===
    @priority(14)
    function -&(other:UInt64):UInt64 {
        return value->builtin_uint64 -& other.value
    }

    ===Subtracts another number from this number without checking for overflow.===
    @priority(20)
    function -&(other:UInt):UInt {
        return value -& other.value
    }

    ===Returns the negation (additive inverse) of this number===
    function -():UInt {
        return UInt(-value)
    }

    ===Multiplies this number by another number.===
    @priority(13)
    function *(other:Int32):Int64 {
        return value->builtin_int64 * other.value->builtin_int64
    }

    ===Multiplies this number by another number.===
    @priority(17)
    function *(other:Int):Int64 {
        return value->builtin_int64 * other.value->builtin_int64
    }

    ===Multiplies this number by another number.===
    @priority(12)
    function *(other:UInt32):UInt32 {
        return value->builtin_uint32 * other.value
    }

    ===Multiplies this number by another number.===
    @priority(14)
    function *(other:UInt64):UInt64 {
        return value->builtin_uint64 * other.value
    }

    ===Multiplies this number by another number.===
    @priority(20)
    function *(other:UInt):UInt {
        return value * other.value
    }

    ===Multiplies this number by another number without checking for overflow.===
    @priority(13)
    function *&(other:Int32):Int64 {
        return value->builtin_int64 *& other.value->builtin_int64
    }

    ===Multiplies this number by another number without checking for overflow.===
    @priority(17)
    function *&(other:Int):Int64 {
        return value->builtin_int64 *& other.value->builtin_int64
    }

    ===Multiplies this number by another number without checking for overflow.===
    @priority(12)
    function *&(other:UInt32):UInt32 {
        return value->builtin_uint32 *& other.value
    }

    ===Multiplies this number by another number without checking for overflow.===
    @priority(14)
    function *&(other:UInt64):UInt64 {
        return value->builtin_uint64 *& other.value
    }

    ===Multiplies this number by another number without checking for overflow.===
    @priority(20)
    function *&(other:UInt):UInt {
        return value *& other.value
    }

    ===Divides this number by another number, returning the whole number portion.===
    @priority(13)
    function //(other:Int32):Int64 {
        return value->builtin_int64 // other.value->builtin_int64
    }

    ===Divides this number by another number, returning the whole number portion.===
    @priority(17)
    function //(other:Int):Int64 {
        return value->builtin_int64 // other.value->builtin_int64
    }

    ===Divides this number by another number, returning the whole number portion.===
    @priority(12)
    function //(other:UInt32):UInt32 {
        return value->builtin_uint32 // other.value
    }

    ===Divides this number by another number, returning the whole number portion.===
    @priority(14)
    function //(other:UInt64):UInt64 {
        return value->builtin_uint64 // other.value
    }

    ===Divides this number by another number, returning the whole number portion.===
    @priority(20)
    function //(other:UInt):UInt {
        return value // other.value
    }

    ===Divides this number by another number, returning the whole number portion, without checking for overflow.===
    @priority(13)
    function //&(other:Int32):Int64 {
        return value->builtin_int64 //& other.value->builtin_int64
    }

    ===Divides this number by another number, returning the whole number portion, without checking for overflow.===
    @priority(17)
    function //&(other:Int):Int64 {
        return value->builtin_int64 //& other.value->builtin_int64
    }

    ===Divides this number by another number, returning the whole number portion, without checking for overflow.===
    @priority(12)
    function //&(other:UInt32):UInt32 {
        return value->builtin_uint32 //& other.value
    }

    ===Divides this number by another number, returning the whole number portion, without checking for overflow.===
    @priority(14)
    function //&(other:UInt64):UInt64 {
        return value->builtin_uint64 //& other.value
    }

    ===Divides this number by another number, returning the whole number portion, without checking for overflow.===
    @priority(20)
    function //&(other:UInt):UInt {
        return value //& other.value
    }

    ===Returns the remainder of dividing this number by another number.===
    @priority(13)
    function %(other:Int32):Int64 {
        return value->builtin_int64 % other.value->builtin_int64
    }

    ===Returns the remainder of dividing this number by another number.===
    @priority(17)
    function %(other:Int):Int64 {
        return value->builtin_int64 % other.value->builtin_int64
    }

    ===Returns the remainder of dividing this number by another number.===
    @priority(12)
    function %(other:UInt32):UInt32 {
        return value->builtin_uint32 % other.value
    }

    ===Returns the remainder of dividing this number by another number.===
    @priority(14)
    function %(other:UInt64):UInt64 {
        return value->builtin_uint64 % other.value
    }

    ===Returns the remainder of dividing this number by another number.===
    @priority(20)
    function %(other:UInt):UInt {
        return value % other.value
    }

    ===Divides this number by another number.===
    @priority(9)
    function /(other:Int8):Real32 {
        return value->builtin_float32 / other.value->builtin_float32
    }

    ===Divides this number by another number.===
    @priority(11)
    function /(other:Int16):Real32 {
        return value->builtin_float32 / other.value->builtin_float32
    }

    ===Divides this number by another number.===
    @priority(13)
    function /(other:Int32):Real32 {
        return value->builtin_float32 / other.value->builtin_float32
    }

    ===Divides this number by another number.===
    @priority(15)
    function /(other:Int64):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(8)
    function /(other:UInt8):Real32 {
        return value->builtin_float32 / other.value->builtin_float32
    }

    ===Divides this number by another number.===
    @priority(10)
    function /(other:UInt16):Real32 {
        return value->builtin_float32 / other.value->builtin_float32
    }

    ===Divides this number by another number.===
    @priority(12)
    function /(other:UInt32):Real32 {
        return value->builtin_float32 / other.value->builtin_float32
    }

    ===Divides this number by another number.===
    @priority(14)
    function /(other:UInt64):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(18)
    function /(other:Real32):Real32 {
        return value->builtin_float32 / other.value
    }

    ===Divides this number by another number.===
    @priority(19)
    function /(other:Real64):Real64 {
        return value->builtin_float64 / other.value
    }

    ===Returns the bitwise NOT of this number.===
    function !!():UInt {
        return UInt(!!value)
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(13)
    function &&(other:Int32):Int32 {
        return value->builtin_int32 && other.value
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(15)
    function &&(other:Int64):Int64 {
        return value->builtin_int64 && other.value
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(17)
    function &&(other:Int):Int {
        return value->builtin_int && other.value
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(12)
    function &&(other:UInt32):UInt32 {
        return value->builtin_uint32 && other.value
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(14)
    function &&(other:UInt64):UInt64 {
        return value->builtin_uint64 && other.value
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(20)
    function &&(other:UInt):UInt {
        return value && other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(13)
    function ||(other:Int32):Int32 {
        return value->builtin_int32 || other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(15)
    function ||(other:Int64):Int64 {
        return value->builtin_int64 || other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(17)
    function ||(other:Int):Int {
        return value->builtin_int || other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(12)
    function ||(other:UInt32):UInt32 {
        return value->builtin_uint32 || other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(14)
    function ||(other:UInt64):UInt64 {
        return value->builtin_uint64 || other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(20)
    function ||(other:UInt):UInt {
        return value || other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(13)
    function ~~(other:Int32):Int32 {
        return value->builtin_int32 ~~ other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(15)
    function ~~(other:Int64):Int64 {
        return value->builtin_int64 ~~ other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(17)
    function ~~(other:Int):Int {
        return value->builtin_int ~~ other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(12)
    function ~~(other:UInt32):UInt32 {
        return value->builtin_uint32 ~~ other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(14)
    function ~~(other:UInt64):UInt64 {
        return value->builtin_uint64 ~~ other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(20)
    function ~~(other:UInt):UInt {
        return value ~~ other.value
    }

    ===Returns this number shifted left by the specified number of bits.===
    @priority(20)
    function <<(other:UInt):UInt {
        return value << other.value
    }

    ===Returns this number shifted left by the specified number of bits, without checking for overflow.===
    @priority(20)
    function <<&(other:UInt):UInt {
        return value <<& other.value
    }

    ===Returns this number logical shifted right by the specified number of bits.===
    @priority(20)
    function >>(other:UInt):UInt {
        return value >> other.value
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(9)
    function =(other:Int8):Bit {
        return value->builtin_int64 = other.value->builtin_int64
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(11)
    function =(other:Int16):Bit {
        return value->builtin_int64 = other.value->builtin_int64
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(13)
    function =(other:Int32):Bit {
        return value->builtin_int64 = other.value->builtin_int64
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(17)
    function =(other:Int):Bit {
        return value->builtin_int64 = other.value->builtin_int64
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(8)
    function =(other:UInt8):Bit {
        return value = other.value->builtin_uint
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(10)
    function =(other:UInt16):Bit {
        return value = other.value->builtin_uint
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(12)
    function =(other:UInt32):Bit {
        return value->builtin_uint32 = other.value
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(14)
    function =(other:UInt64):Bit {
        return value->builtin_uint64 = other.value
    }

    ===Returns `true` if this number is equal to the given number.===
    @override
    @priority(20)
    function =(other:UInt):Bit {
        return value = other.value
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(9)
    function !=(other:Int8):Bit {
        return value->builtin_int64 != other.value->builtin_int64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(11)
    function !=(other:Int16):Bit {
        return value->builtin_int64 != other.value->builtin_int64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(13)
    function !=(other:Int32):Bit {
        return value->builtin_int64 != other.value->builtin_int64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(17)
    function !=(other:Int):Bit {
        return value->builtin_int64 != other.value->builtin_int64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(8)
    function !=(other:UInt8):Bit {
        return value != other.value->builtin_uint
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(10)
    function !=(other:UInt16):Bit {
        return value != other.value->builtin_uint
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(12)
    function !=(other:UInt32):Bit {
        return value->builtin_uint32 != other.value
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(14)
    function !=(other:UInt64):Bit {
        return value->builtin_uint64 != other.value
    }

    ===Returns `true` if this number is not equal to the given number.===
    @override
    @priority(20)
    function !=(other:UInt):Bit {
        return value != other.value
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(9)
    function <(other:Int8):Bit {
        return value->builtin_int64 < other.value->builtin_int64
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(11)
    function <(other:Int16):Bit {
        return value->builtin_int64 < other.value->builtin_int64
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(13)
    function <(other:Int32):Bit {
        return value->builtin_int64 < other.value->builtin_int64
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(17)
    function <(other:Int):Bit {
        return value->builtin_int64 < other.value->builtin_int64
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(8)
    function <(other:UInt8):Bit {
        return value < other.value->builtin_uint
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(10)
    function <(other:UInt16):Bit {
        return value < other.value->builtin_uint
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(12)
    function <(other:UInt32):Bit {
        return value->builtin_uint32 < other.value
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(14)
    function <(other:UInt64):Bit {
        return value->builtin_uint64 < other.value
    }

    ===Returns `true` if this number is less than the given number.===
    @override
    @priority(20)
    function <(other:UInt):Bit {
        return value < other.value
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(9)
    function >(other:Int8):Bit {
        return value->builtin_int64 > other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(11)
    function >(other:Int16):Bit {
        return value->builtin_int64 > other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(13)
    function >(other:Int32):Bit {
        return value->builtin_int64 > other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(17)
    function >(other:Int):Bit {
        return value->builtin_int64 > other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(8)
    function >(other:UInt8):Bit {
        return value > other.value->builtin_uint
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(10)
    function >(other:UInt16):Bit {
        return value > other.value->builtin_uint
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(12)
    function >(other:UInt32):Bit {
        return value->builtin_uint32 > other.value
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(14)
    function >(other:UInt64):Bit {
        return value->builtin_uint64 > other.value
    }

    ===Returns `true` if this number is greater than the given number.===
    @override
    @priority(20)
    function >(other:UInt):Bit {
        return value > other.value
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(9)
    function >=(other:Int8):Bit {
        return value->builtin_int64 >= other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(11)
    function >=(other:Int16):Bit {
        return value->builtin_int64 >= other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(13)
    function >=(other:Int32):Bit {
        return value->builtin_int64 >= other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(17)
    function >=(other:Int):Bit {
        return value->builtin_int64 >= other.value->builtin_int64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(8)
    function >=(other:UInt8):Bit {
        return value >= other.value->builtin_uint
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(10)
    function >=(other:UInt16):Bit {
        return value >= other.value->builtin_uint
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(12)
    function >=(other:UInt32):Bit {
        return value->builtin_uint32 >= other.value
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(14)
    function >=(other:UInt64):Bit {
        return value->builtin_uint64 >= other.value
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @override
    @priority(20)
    function >=(other:UInt):Bit {
        return value >= other.value
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(9)
    function <=(other:Int8):Bit {
        return value->builtin_int64 <= other.value->builtin_int64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(11)
    function <=(other:Int16):Bit {
        return value->builtin_int64 <= other.value->builtin_int64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(13)
    function <=(other:Int32):Bit {
        return value->builtin_int64 <= other.value->builtin_int64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(17)
    function <=(other:Int):Bit {
        return value->builtin_int64 <= other.value->builtin_int64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(8)
    function <=(other:UInt8):Bit {
        return value <= other.value->builtin_uint
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(10)
    function <=(other:UInt16):Bit {
        return value <= other.value->builtin_uint
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(12)
    function <=(other:UInt32):Bit {
        return value->builtin_uint32 <= other.value
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(14)
    function <=(other:UInt64):Bit {
        return value->builtin_uint64 <= other.value
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @override
    @priority(20)
    function <=(other:UInt):Bit {
        return value <= other.value
    }

    ===Returns the square root of this number.===
    property sqrt:Real64
    function get_sqrt():Real64 {
        return toReal64.sqrt
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(9)
    function min(other:Int8):Int64 {
        if value->builtin_int64 < other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(11)
    function min(other:Int16):Int64 {
        if value->builtin_int64 < other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(13)
    function min(other:Int32):Int64 {
        if value->builtin_int64 < other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }


    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(17)
    function min(other:Int):Int64 {
        if value->builtin_int64 < other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(8)
    function min(other:UInt8):UInt {
        if value < other.value->builtin_uint {
            return value
        }
        return other.value->builtin_uint
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(10)
    function min(other:UInt16):UInt {
        if value < other.value->builtin_uint {
            return value
        }
        return other.value->builtin_uint
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(12)
    function min(other:UInt32):UInt32 {
        if value->builtin_uint32 < other.value {
            return value->builtin_uint32
        }
        return other.value
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(14)
    function min(other:UInt64):UInt64 {
        if value->builtin_uint64 < other.value {
            return value->builtin_uint64
        }
        return other.value
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(20)
    function min(other:UInt):UInt {
        if value < other.value {
            return value
        }
        return other.value
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(9)
    function max(other:Int8):Int64 {
        if value->builtin_int64 > other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(11)
    function max(other:Int16):Int64 {
        if value->builtin_int64 > other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(13)
    function max(other:Int32):Int64 {
        if value->builtin_int64 > other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }


    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(17)
    function max(other:Int):Int64 {
        if value->builtin_int64 > other.value->builtin_int64 {
            return value->builtin_int64
        }
        return other.value->builtin_int64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(8)
    function max(other:UInt8):UInt {
        if value > other.value->builtin_uint {
            return value
        }
        return other.value->builtin_uint
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(10)
    function max(other:UInt16):UInt {
        if value > other.value->builtin_uint {
            return value
        }
        return other.value->builtin_uint
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(12)
    function max(other:UInt32):UInt32 {
        if value->builtin_uint32 > other.value {
            return value->builtin_uint32
        }
        return other.value
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(14)
    function max(other:UInt64):UInt64 {
        if value->builtin_uint64 > other.value {
            return value->builtin_uint64
        }
        return other.value
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(20)
    function max(other:UInt):UInt {
        if value > other.value {
            return value
        }
        return other.value
    }
    ===Returns a list of all integers in the given range. The list is 'lazy', meaning that it does not actually allocate memory to hold the entire list.===
    @class
    function [](range:Range<UInt>):ListView<UInt> {
        return org.frostlang.frost.UIntList(SteppedRange<UInt, UInt>(range.min, range.max, 1, range.inclusive))
    }
    ===Returns a list of all integers in the given stepped range. The list is 'lazy', meaning that it does not actually allocate memory to hold the entire list.===
    @class
    function [](range:SteppedRange<UInt, UInt>):ListView<UInt> {
        return org.frostlang.frost.UIntList(range)
    }

    ===Returns a single bit from this number, where index 0 is the least significant bit.===
    @override
    function [](index:Int):Bit {
        return self && (1 << index) != 0
    }

    ===Returns the number of bits in this integer, which is always 32.===
    @override
    function get_count():Int {
        return 32
    }

    ===Returns the number of `1` bits in this number's binary representation.===
    property bitCount:UInt
    @external
    function get_bitCount():UInt

    @override
    function get_iterator():Iterator<Bit> {
        return org.frostlang.frost.IntBitIterator(self.toUInt64, 1 << 31)
    }

    @override
    function get_hash():Int {
        return Int(value->builtin_int)
    }

    ===Parses a string as a number in the specified radix. Returns `null` if the parse fails.===
    @class
    @pre(radix >= 2 & radix <= 36)
    function parse(str:String, radix:Int):UInt? {
        def result := Frost.parse(str, radix)
        if result == null {
            return null
        }
        return result.asUInt
    }

    ===Returns this number reinterpreted to a 32 bit signed number.
If this number is not in the range of a 32 bit signed number, a safety violation occurs.
===
    property asInt:Int
    function get_asInt():Int {
    assert value <= Int.MAX.toUInt.value, "UInt(\{self}) cannot be safely converted to Int"
        return Int(value->builtin_int)
    }

    ===Returns this number reinterpreted to a 32 bit signed number.
This function never fails, even if the number is not in the range of a 32 bit signed number.
===
    property toInt:Int
    function get_toInt():Int {
        return Int(value->builtin_int)
    }

    ===Returns this number truncated to an 8 bit signed number.
If this number is not in the range of an 8 bit signed number, a safety violation occurs.
===
    property asInt8:Int8
    function get_asInt8():Int8 {
    assert value <= Int8.MAX.toUInt.value, "UInt(\{self}) cannot be safely converted to Int8"
        return Int8(value->builtin_int8)
    }

    ===Returns this number truncated to an 8 bit signed number.
This function never fails, even if the number is not in the range of an 8 bit signed number.
===
    property toInt8:Int8
    function get_toInt8():Int8 {
        return Int8(value->builtin_int8)
    }

    ===Returns this number truncated to a 16 bit signed number.
If this number is not in the range of a 16 bit signed number, a safety violation occurs.
===
    property asInt16:Int16
    function get_asInt16():Int16 {
    assert value <= Int16.MAX.toUInt.value, "UInt(\{self}) cannot be safely converted to Int16"
        return Int16(value->builtin_int16)
    }

    ===Returns this number truncated to a 16 bit signed number.
This function never fails, even if the number is not in the range of a 16 bit signed number.
===
    property toInt16:Int16
    function get_toInt16():Int16 {
        return Int16(value->builtin_int16)
    }

    ===Returns this number reinterpreted to a 32 bit signed number.
If this number is not in the range of a 32 bit signed number, a safety violation occurs.
===
    property asInt32:Int32
    function get_asInt32():Int32 {
    assert value <= Int32.MAX.toUInt.value, "UInt(\{self}) cannot be safely converted to Int32"
        return Int32(value->builtin_int32)
    }

    ===Returns this number reinterpreted to a 32 bit signed number.
This function never fails, even if the number is not in the range of a 32 bit signed number.
===
    property toInt32:Int32
    function get_toInt32():Int32 {
        return Int32(value->builtin_int32)
    }

    ===Returns this number zero extended to a 64 bit signed number.
===
    property asInt64:Int64
    function get_asInt64():Int64 {
        return Int64(value->builtin_int64)
    }

    ===Returns this number zero extended to a 64 bit signed number.
===
    property toInt64:Int64
    function get_toInt64():Int64 {
        return Int64(value->builtin_int64)
    }

    ===Returns this number truncated to an 8 bit unsigned number.
If this number is not in the range of an 8 bit unsigned number, a safety violation occurs.
===
    property asUInt8:UInt8
    function get_asUInt8():UInt8 {
    assert value <= UInt8.MAX.toUInt.value, "UInt(\{self}) cannot be safely converted to UInt8"
        return UInt8(value->builtin_uint8)
    }

    ===Returns this number truncated to an 8 bit unsigned number.
This function never fails, even if the number is not in the range of an 8 bit unsigned number.
===
    property toUInt8:UInt8
    function get_toUInt8():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    ===Returns this number truncated to a 16 bit unsigned number.
If this number is not in the range of a 16 bit unsigned number, a safety violation occurs.
===
    property asUInt16:UInt16
    function get_asUInt16():UInt16 {
    assert value <= UInt16.MAX.toUInt.value, "UInt(\{self}) cannot be safely converted to UInt16"
        return UInt16(value->builtin_uint16)
    }

    ===Returns this number truncated to a 16 bit unsigned number.
This function never fails, even if the number is not in the range of a 16 bit unsigned number.
===
    property toUInt16:UInt16
    function get_toUInt16():UInt16 {
        return UInt16(value->builtin_uint16)
    }

    ===Returns this number reinterpreted to a 32 bit unsigned number.
If this number is not in the range of a 32 bit unsigned number, a safety violation occurs.
===
    property asUInt32:UInt32
    function get_asUInt32():UInt32 {
    assert value <= UInt32.MAX.toUInt.value, "UInt(\{self}) cannot be safely converted to UInt32"
        return UInt32(value->builtin_uint32)
    }

    ===Returns this number reinterpreted to a 32 bit unsigned number.
This function never fails, even if the number is not in the range of a 32 bit unsigned number.
===
    property toUInt32:UInt32
    function get_toUInt32():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    ===Returns this number zero extended to a 64 bit unsigned number.
===
    property asUInt64:UInt64
    function get_asUInt64():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    ===Returns this number zero extended to a 64 bit unsigned number.
===
    property toUInt64:UInt64
    function get_toUInt64():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    ===Returns this number reinterpreted to a 32 bit floating point number.
If this number cannot be exactly represented as a 32 bit floating point number, a safety violation occurs.
===
    property asReal32:Real32
    @post(@return.toUInt = self)
    function get_asReal32():Real32 {
        return Real32(value->builtin_float32)
    }

    ===Returns this number reinterpreted to a 32 bit floating point number.
===
    property toReal32:Real32
    function get_toReal32():Real32 {
        return Real32(value->builtin_float32)
    }

    ===Returns this number zero extended to a 64 bit floating point number.
===
    property asReal64:Real64
    function get_asReal64():Real64 {
        return Real64(value->builtin_float64)
    }

    ===Returns this number zero extended to a 64 bit floating point number.
===
    property toReal64:Real64
    function get_toReal64():Real64 {
        return Real64(value->builtin_float64)
    }

    ===Returns this number converted to a decimal string.===
    @override
    function get_toString():String {
        constant max := 20
        def chars := Pointer<Char8>.alloc(max)
        var index := max - 1
        var value := self
        if value >= 0 {
            do {
                chars[index] := Char8((value % 10 + 48).asUInt8)
                value := (value // 10)
                index -= 1
            }
            while value > 0
            index += 1
        }
        else {
            do {
                chars[index] := Char8((48 - value % 10).asUInt8)
                value := (value // 10)
                index -= 1
            }
            while value < 0
            chars[index] := "-"
        }
        def size := max - index
        for i in 0 .. size {
            chars[i] := chars[i + index]
        }
        return String(chars, size)
    }

    === Returns a formatted representation of this number. Supported format strings are `""`, `"d"`, or `"D"` for decimal, `"b"` or `"B"` for binary, `"o"` or `"O"` for octal, `"x"` for lowercase hexadecimal, and `"X"` for uppercase hexadecimal. ===
    @override
    function format(fmt:String):String {
        return Frost.format(false, self.toUInt64, 0xFFFFFFFF, fmt)
    }
}
