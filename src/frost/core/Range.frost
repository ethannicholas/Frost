package frost.core

====================================================================================================
Represents a range between two values. `Range` contains a `min`, `max`, and flag to determine
inclusive vs. exclusive ranges; the `inclusive` flag is understood to refer to the `max` endpoint
only, with `min` always being included in the `Range`.

The exclusive range (`..`) and inclusive range (`...`) operators in Frost provide a shorthand syntax
for creating `Range` and [SteppedRange] objects.
====================================================================================================
@final
@specialize
class Range<T:Value?> : Value {
    ================================================================================================
    The range's starting point.
    ================================================================================================
    def min:T

    ================================================================================================
    The range's ending point.
    ================================================================================================
    def max:T

    ================================================================================================
    `true` if the range includes its maximum value.
    ================================================================================================
    def inclusive:Bit

    init(min:T, max:T, inclusive:Bit) {
        self.min := min
        self.max := max
        self.inclusive := inclusive
    }

    @override
    function get_asString():String {
        def result := MutableString()
        if min !== null {
            result.append(min)
        }
        if inclusive {
            result.append("...")
        }
        else {
            result.append("..")
        }
        if max !== null {
            result.append(max)
        }
        return result.finish()
    }
}