package frost.core
@package
class KeyTuple12<T0:HashKey<T0>, T1:HashKey<T1>, T2:HashKey<T2>, T3:HashKey<T3>, T4:HashKey<T4>, T5:HashKey<T5>, T6:HashKey<T6>, T7:HashKey<T7>, T8:HashKey<T8>, T9:HashKey<T9>, T10:HashKey<T10>, T11:HashKey<T11>> : HashKey<KeyTuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>> {
    def f0:T0
    def f1:T1
    def f2:T2
    def f3:T3
    def f4:T4
    def f5:T5
    def f6:T6
    def f7:T7
    def f8:T8
    def f9:T9
    def f10:T10
    def f11:T11

    init(f0:T0, f1:T1, f2:T2, f3:T3, f4:T4, f5:T5, f6:T6, f7:T7, f8:T8, f9:T9, f10:T10, f11:T11) {
       self.f0 := f0
       self.f1 := f1
       self.f2 := f2
       self.f3 := f3
       self.f4 := f4
       self.f5 := f5
       self.f6 := f6
       self.f7 := f7
       self.f8 := f8
       self.f9 := f9
       self.f10 := f10
       self.f11 := f11
    }

    @pre(i >= 0 & i < 12)
    function []<T>(i:Int):T {
        match i {
            when 0 { return f0->T }
            when 1 { return f1->T }
            when 2 { return f2->T }
            when 3 { return f3->T }
            when 4 { return f4->T }
            when 5 { return f5->T }
            when 6 { return f6->T }
            when 7 { return f7->T }
            when 8 { return f8->T }
            when 9 { return f9->T }
            when 10 { return f10->T }
            when 11 { return f11->T }
        }
        unreachable
    }

    @override
    function =(other:KeyTuple12<T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>):Bit {
        if f0 != other.f0 { return false }
        if f1 != other.f1 { return false }
        if f2 != other.f2 { return false }
        if f3 != other.f3 { return false }
        if f4 != other.f4 { return false }
        if f5 != other.f5 { return false }
        if f6 != other.f6 { return false }
        if f7 != other.f7 { return false }
        if f8 != other.f8 { return false }
        if f9 != other.f9 { return false }
        if f10 != other.f10 { return false }
        if f11 != other.f11 { return false }
        return true
    }
    @override
    function get_hash():Int {
        var result := 0
        result ~~= f0.hash *& 1
        result ~~= f1.hash *& 73
        result ~~= f2.hash *& 179
        result ~~= f3.hash *& 283
        result ~~= f4.hash *& 419
        result ~~= f5.hash *& 547
        result ~~= f6.hash *& 661
        result ~~= f7.hash *& 811
        result ~~= f8.hash *& 947
        result ~~= f9.hash *& 1087
        result ~~= f10.hash *& 1229
        result ~~= f11.hash *& 1381
        return result
    }
    @override
    function get_toString():String {
        return "(\{f0}, \{f1}, \{f2}, \{f3}, \{f4}, \{f5}, \{f6}, \{f7}, \{f8}, \{f9}, \{f10}, \{f11})"
    }
}
