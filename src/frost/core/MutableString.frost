package frost.core

uses frost.unsafe.Pointer

---------------
-- IMPORTANT --
------------------------------------------------------------------------------
-- String and MutableString are assumed to have a compatible memory layout! --
-- See MutableString.finish().                                              --
------------------------------------------------------------------------------

@final
class MutableString {
    ================================================================================================
    Represents the position of a Unicode codepoint within a `MutableString`.
    ================================================================================================
    class Index : Value, HashKey<Index>, Comparable<Index> {
        def byteOffset:Int

        @private
        init(byteOffset:Int) {
            self.byteOffset := byteOffset
        }

        @override
        function =(other:Index):Bit {
            return byteOffset = other.byteOffset
        }

        @override
        function >(other:Index):Bit {
            return byteOffset > other.byteOffset
        }

        @override
        function get_hash():Int {
            return byteOffset
        }
    }

    @private
    class UTF8List : List<Char8> {
        def str:MutableString

        init(str:MutableString) {
            self.str := str
        }

        @override
        function [](index:Int):Char8 {
            return str.data[index]
        }

        @override
        method []:=(index:Int, value:Char8) {
            str.data[index] := value
        }

        @override
        method add(c:Char8) {
            str.append(c)
        }

        @override
        method insert(index:Int, c:Char8) {
            -- FIXME performance
            str[index .. index] := c.toString
        }

        @override
        method removeIndex(index:Int):Char8 {
            -- FIXME performance
            def result := str.data[index]
            str[index ... index] := ""
            return result
        }

        @override
        function get_count():Int {
            return str._length
        }

        @override
        function get_iterator():Iterator<Char8> {
            return UTF8Iterator(str)
        }

        @override
        method clear() {
            str.clear()
        }
    }

    @private
    class UTF8Iterator : Iterator<Char8> {
        var index := 0

        def str:MutableString

        init(str:MutableString) {
            self.str := str
        }

        @override
        function get_done():Bit {
            return index >= str._length
        }

        @override
        method next():Char8 {
            index += 1
            return str.data[index - 1]
        }
    }


    property length:Int

    property byteLength:Int

    property start:Index

    property end:Index

    @private
    constant DEFAULT_SIZE := 32

    @private
    var data:Pointer<Char8>

    @private
    var _length:Int

    @private
    var maxLength:Int

    -- for binary compatibility with String
    @private
    var dummy:String?

    init() {
        init(DEFAULT_SIZE)
    }

    init(s:String) {
        _length := s._length
        maxLength := _length + DEFAULT_SIZE
        data := Pointer<Char8>.alloc(maxLength)
        for i in 0 .. s._length {
            data[i] := s.data[i]
        }
    }

    init(capacity:Int) {
        _length := 0
        maxLength := capacity
        data := Pointer<Char8>.alloc(maxLength)
    }

    @override
    @private
    method cleanup() {
        data.destroy()
    }

    -- FIXME @self
    method append(c:Char8) {
        ensureCapacity(_length + 1)
        data[_length] := c
        _length += 1
    }

    -- FIXME @self
    method append(c:Char32) {
        def value := c.value
        if value < 0x80 {
            ensureCapacity(_length + 1)
            data[_length] := c.toChar8
            _length += 1
        }
        else if value < 0x800 {
            ensureCapacity(_length + 2)
            data[_length + 0] := Char8((value >> 6 || 0b11000000).asUInt8)
            data[_length + 1] := Char8((value && 0b111111 || 0b10000000).asUInt8)
            _length += 2
        }
        else if value < 0x10000 {
            ensureCapacity(_length + 3)
            data[_length + 0] := Char8((value >> 12 || 0b11100000).asUInt8)
            data[_length + 1] := Char8((value >> 6 && 0b111111 || 0b10000000).asUInt8)
            data[_length + 2] := Char8((value && 0b111111 || 0b10000000).asUInt8)
            _length += 3
        }
        else {
            ensureCapacity(_length + 4)
            data[_length + 0] := Char8((value >> 18 || 0b11110000).asUInt8)
            data[_length + 1] := Char8((value >> 12 && 0b111111 || 0b10000000).asUInt8)
            data[_length + 2] := Char8((value >> 6 && 0b111111 || 0b10000000).asUInt8)
            data[_length + 3] := Char8((value && 0b111111 || 0b10000000).asUInt8)
            _length += 4
        }
    }

    -- FIXME @self
    method append(s:String) {
        ensureCapacity(_length + s._length)
        for i in 0 .. s._length {
            data[_length + i] := s.data[i]
        }
        _length += s._length
    }

    -- FIXME @self
    method append(chars:Pointer<Char8>, count:Int) {
        ensureCapacity(_length + count)
        for i in 0 .. count {
            data[_length + i] := chars[i]
        }
        _length += count
    }

    -- FIXME @self
    method append(o:Object) {
        append(o.toString)
    }

    ================================================================================================
    Returns the number of Unicode codepoints in the string. Note that because the string is
    internally stored in the variable-length UTF-8 encoding, determining the number of Unicode
    codepoints in the string can be a relatively expensive operation for long strings (linear with
    respect to the size of the string).
    ================================================================================================
    function get_length():Int {
        var result := 0
        var index := start
        while index != end {
            index := next(index)
            result += 1
        }
        return result
    }

    ================================================================================================
    Returns the number of bytes of storage taken up by this string's internal UTF-8 encoding.
    ================================================================================================
    function get_byteLength():Int {
        return _length
    }

    ================================================================================================
    Returns the index of the first character in the string.
    ================================================================================================
    function get_start():Index {
        return Index(0)
    }

    ================================================================================================
    Returns the index just past the end of the string.
    ================================================================================================
    function get_end():Index {
        return Index(_length)
    }

    ================================================================================================
    Returns the index of the Unicode codepoint after the given index. It is an error to call
    `next()` when already at the end of the string. Note that because a logical character can
    consist of multiple Unicode codepoints (such as LATIN SMALL LETTER A followed by COMBINING ACUTE
    ACCENT), this may return an index in the middle of such a compound character.
    ================================================================================================
    function next(i:Index):Index {
        assert i.byteOffset < _length
        def c := data[i.byteOffset].asInt && 0xFF
        if c >= 0b11110000 {
            return Index(i.byteOffset + 4)
        }
        if c >= 0b11100000 {
            return Index(i.byteOffset + 3)
        }
        if c >= 0b11000000 {
            return Index(i.byteOffset + 2)
        }
        return Index(i.byteOffset + 1)
    }

    ================================================================================================
    Returns the index of the Unicode codepoint before the given index. It is an error to call
    `previous()` when already at the beginning of the string. Note that because a logical character
    can consist of multiple Unicode codepoints (such as LATIN SMALL LETTER A followed by COMBINING
    ACUTE ACCENT), this may return an index in the middle of such a compound character.
    ================================================================================================
    function previous(i:Index):Index {
        assert i.byteOffset > 0
        var newValue := i.byteOffset - 1
        while data[newValue].asInt && 0xFF >= 0b10000000 &
                data[newValue].asInt && 0xFF < 0b11000000 {
            newValue -= 1
        }
        return Index(newValue)
    }

    ================================================================================================
    Returns the index offset by `offset` Unicode codepoints. It is an error to index before the
    beginning or after the end of the string.  Note that because a logical character can consist of
    multiple Unicode codepoints (such as LATIN SMALL LETTER A followed by COMBINING ACUTE ACCENT),
    this may return an index in the middle of such a compound character.
    ================================================================================================
    function offset(index:Index, offset:Int):Index {
        var result := index
        if offset > 0 {
            for i in 0 .. offset {
                result := next(result)
            }
        }
        else {
            for i in 0 .. offset by -1 {
                result := previous(result)
            }
        }
        return result
    }

    ================================================================================================
    Returns the index of the first occurrence of the string `s` within this string, or `null` if not
    found.

    @param s the string to search for
    @returns the index of the match, or `null` if not found
    ================================================================================================
    function indexOf(s:String):Index? {
        return indexOf(s, start)
    }

    ================================================================================================
    Returns the index of the first occurrence of the string `s` within this string, starting from
    the specified `index`, or `null` if not found.

    @param s the string to search for
    @param start the index to begin searching from
    @returns the index of the match, or `null` if not found
    ================================================================================================
    function indexOf(s:String, start:Index):Index? {
        if _length < s._length {
            return null
        }
        outer: for i in start.byteOffset ... _length - s._length {
            for j in 0 .. s._length {
                if data[i + j] != s.data[j] {
                    continue outer
                }
            }
            return Index(i)
        }
        return null
    }

    ================================================================================================
    Returns `true` if this string contains at least one occurrence of the given character.
    ================================================================================================
    function contains(c:Char8):Bit {
        for i in 0 .. _length {
            if data[i] = c {
                return true
            }
        }
        return false
    }

    ================================================================================================
    Returns `true` if this string contains at least one occurrence of the given substring.
    ================================================================================================
    function contains(s:String):Bit {
        return indexOf(s) !== null
    }

    function startsWith(other:String):Bit {
        if _length < other._length {
            return false
        }
        for i in 0 .. other._length {
            if data[i] != other.data[i] {
                return false
            }
        }
        return true
    }

    function endsWith(other:String):Bit {
        if _length < other._length {
            return false
        }
        for i in 0 .. other._length {
            if data[_length - other._length + i] != other.data[i] {
                return false
            }
        }
        return true
    }

    ================================================================================================
    Returns the index of the last occurrence of the string `s` within this string, or `null` if not
    found.

    @param s the string to search for
    @returns the index of the match, or `null` if not found
    ================================================================================================
    function lastIndexOf(s:String):Index? {
        return lastIndexOf(s, end)
    }

    ================================================================================================
    Returns the index of the last occurrence of the string `s` within this string, starting the
    search backwards from the specified `index`, or `null` if not found.

    @param s the string to search for
    @param start the index to begin searching from
    @returns the index of the match, or `null` if not found
    ================================================================================================
    function lastIndexOf(s:String, start:Index):Index? {
        if _length < s._length {
            return null
        }
        def startPos := start.byteOffset.min(_length - s._length)
        outer: for i in startPos ... 0 by -1 {
            for j in 0 .. s._length {
                if data[i + j] != s.data[j] {
                    continue outer
                }
            }
            return Index(i)
        }
        return null
    }

    ================================================================================================
    Returns `true` if this string matches the given regular expression. The regular expression must
    match the entire string.
    
    @param regex the regular expression to compare against
    @returns `true` if the string matches
    ================================================================================================
    function matches(regex:RegularExpression):Bit {
        return regex.matcher(toString).matches()
    }

    ================================================================================================
    Returns `true` if this string contains a match for the given regular expression. The regular
    expression may match zero or more characters of the string, starting at any point.
    
    @param needle the regular expression to search for
    @returns `true` if the string contains a match
    ================================================================================================
    function contains(needle:RegularExpression):Bit {
        return needle.matcher(toString).find()
    }

    -- FIXME @self
    method trim() {
        var i := start
        while i != end & self[i].isWhitespace {
            i := next(i)
        }
        self[start .. i] := ""
        if _length = 0 {
            return
        }
        i := previous(end)
        while i != start & self[i].isWhitespace {
            i := previous(i)
        }
        self[next(i)..] := ""
    }

    -- FIXME @self
    method replace(search:RegularExpression, replacement:String) {
        replace(search, replacement, true)
    }

    -- FIXME @self
    method replace(search:RegularExpression, replacement:String, allowGroupReferences:Bit) {
        def matcher := search.matcher(toString)
        clear()
        while matcher.find() {
            matcher.appendReplacement(self, replacement, allowGroupReferences)
        }
        matcher.appendTail(self)
    }

    ================================================================================================
    Searches the string for a regular expression, replacing occurrences of the regular expression
    with new text determined by a function. For instance, given:

        -- testcase MutableStringReplace(PrintLine)
        "This is a test!".replace(/\w+/, word => word.length)

    The regular expression `/\w+/` matches sequences of one or more word characters; in other words,
    it matches all words occurring in the string. The replacement function `word => word.length`
    replaces each matched sequence with the number of characters in the sequence, resulting in the
    text:

        4 2 1 4!

    @param search the regular expression to match the string with
    @param replacement a function generating the replacement text
    ================================================================================================
    -- FIXME @self
    method replace(search:RegularExpression, replacement:(String)=>(Object)) {
        def matcher := search.matcher(toString)
        clear()
        while matcher.find() {
            matcher.appendReplacement(self, replacement(matcher.group(0)).toString, false)
        }
        matcher.appendTail(self)
    }

    method replace(search:RegularExpression, replacement:(String)=&>(Object)) {
        def matcher := search.matcher(toString)
        clear()
        while matcher.find() {
            matcher.appendReplacement(self, replacement(matcher.group(0)).toString, false)
        }
        matcher.appendTail(self)
    }

    ================================================================================================
    As [replace(RegularExpression, (String)=>(Object))], but the replacement function receives the
    capture groups from the regular expression rather than the raw matched text. The groups list
    includes the special whole-match group at index `0`, with the first set of parentheses in the
    regular expression corresponding to index `1`.

    @param search the regular expression to match the string with
    @param replacement a function generating the replacement text
    ================================================================================================
    -- FIXME @self
    method replace(search:RegularExpression, replacement:(ListView<String?>)=>(Object)) {
        def matcher := search.matcher(toString)
        clear()
        while matcher.find() {
            def groups := Array<String?>()
            for i in 0 .. matcher.get_groupCount() {
                groups.add(matcher.group(i))
            }
            matcher.appendReplacement(self, replacement(groups).toString, false)
        }
        matcher.appendTail(self)
    }

    method replace(search:RegularExpression, replacement:(ListView<String?>)=&>(Object)) {
        def matcher := search.matcher(toString)
        clear()
        while matcher.find() {
            def groups := Array<String?>()
            for i in 0 .. matcher.get_groupCount() {
                groups.add(matcher.group(i))
            }
            matcher.appendReplacement(self, replacement(groups).toString, false)
        }
        matcher.appendTail(self)
    }

    ================================================================================================
    Returns the Unicode codepoint at the given offset within the string.
    ================================================================================================
    function [](index:Index):Char32 {
        def idx := index.byteOffset
        def c := data[idx]
        var result := c.asInt32
        if c.asInt && 0xFF < 0b11000000 {
            return Char32(result)
        }
        if c.asInt && 0xFF < 0b11100000 {
            assert idx + 1 < _length
            result := result && 0b11111 << 6 + data[idx + 1].asInt32 && 0b111111
            return Char32(result)
        }
        if c.asInt && 0xFF < 0b11110000 {
            assert idx + 2 < _length
            result := result && 0b1111 << 12 + data[idx + 1].asInt32 && 0b111111 << 6 +
                    data[idx + 2].asInt32 && 0b111111
            return Char32(result)
        }
        assert idx + 3 < _length
        result := result && 0b111 << 18 + data[idx + 1].asInt32 && 0b111111 << 12 +
                data[idx + 2].asInt32 && 0b111111 << 6 +
                data[idx + 3].asInt32 && 0b111111
        return Char32(result)
    }

    ================================================================================================
    Returns the Unicode codepoint at the given offset within the string. This overload of the `[]`
    operator is slower than the overload that accepts an `Index` parameter, as it must scan the
    (internally UTF-8) string from the beginning to find the correct index.
    ================================================================================================
    function [](index:Int):Char32 {
        return self[offset(start, index)]
    }

    function [](r:Range<Index>):String {
        -- FIXME do this without a copy
        return toString[Range<String.Index>(String.Index(r.min.byteOffset),
                String.Index(r.max.byteOffset), r.inclusive)]
    }

    function [](r:Range<Index?>):String {
        -- FIXME do this without a copy
        def min:String.Index?
        if r.min !== null {
            min := String.Index(r.min.byteOffset)
        }
        else {
            min := null
        }
        def max:String.Index?
        if r.max !== null {
            max := String.Index(r.max.byteOffset)
        }
        else {
            max := null
        }
        return toString[Range<String.Index>(min, max, r.inclusive)]
    }

    function [](r:Range<Int>):String {
        -- FIXME do this without a copy
        return toString[r]
    }

    function [](r:Range<Int?>):String {
        -- FIXME do this without a copy
        return toString[r]
    }

    function [](r:SteppedRange<Index?, Int>):String {
        -- FIXME do this without a copy
        def start:String.Index?
        if r.start !== null {
            start := String.Index(r.start.byteOffset)
        }
        else {
            start := null
        }
        def end:String.Index?
        if r.end !== null {
            end := String.Index(r.end.byteOffset)
        }
        else {
            end := null
        }
        return toString[SteppedRange<String.Index?, Int>(start, end, r.step, r.inclusive)]
    }

    function [](r:SteppedRange<Int?, Int>):String {
        -- FIXME do this without a copy
        return toString[r]
    }

    -- FIXME @self
    method []:=(index:Int, c:Char32) {
        self[index ... index] := c.toString
    }

    -- FIXME @self
    method []:=(index:Index, c:Char32) {
        self[index ... index] := c.toString
    }

    -- FIXME @self
    @pre(r.max >= r.min &
         ((r.inclusive & r.min.byteOffset < _length & r.max.byteOffset < _length) |
         (!r.inclusive & r.min.byteOffset <= _length & r.max.byteOffset <= _length)))
    method []:=(r:Range<Index>, s:String) {
        var max := r.max.byteOffset
        if r.inclusive {
            max += 1
        }
        def rangeLength := max - r.min.byteOffset
        def newLength := _length - rangeLength + s._length
        ensureCapacity(newLength)
        def offset := s._length - rangeLength
        if s.byteLength > rangeLength {
            for i in _length - 1 ... max by -1 {
                data[i + offset] := data[i]
            }
        }
        else {
            for i in max .. _length {
                data[i + offset] := data[i]
            }
        }
        for i in 0 .. s._length {
            data[r.min.byteOffset + i] := s.data[i]
        }
        _length := newLength
    }

    -- FIXME @self
    method []:=(r:Range<Int>, s:String) {
        self[Range<Index>(offset(start, r.min), offset(start, r.max), r.inclusive)] := s
    }

    -- FIXME @self
    @priority(1)
    method []:=(r:Range<Index?>, s:String) {
        def min:Index
        if r.min !== null {
            min := r.min
        }
        else {
            min := start
        }
        var inclusive := r.inclusive
        def max:Index
        if r.max !== null {
            max := r.max
        }
        else {
            max := end
            inclusive := false
        }
        self[Range<Index>(min, max, inclusive)] := s
    }

    -- FIXME @self
    method []:=(r:Range<Int?>, s:String) {
        def min:Index
        if r.min !== null {
            min := offset(start, r.min)
        }
        else {
            min := start
        }
        var inclusive := r.inclusive
        def max:Index
        if r.max !== null {
            max := offset(start, r.max)
        }
        else {
            max := end
            inclusive := false
        }
        self[Range<Index>(min, max, inclusive)] := s
    }

    -- FIXME @self
    method replace(search:String, replacement:String) {
        var index := start
        loop {
            def next := indexOf(search, index)
            if next == null {
                break
            }
            self[next .. Index(next.byteOffset + search.byteLength)] := replacement
            index := Index(next.byteOffset + replacement.byteLength.max(1))
        }
    }

    @private
    -- FIXME @self
    @pre(maxLength > 0)
    method ensureCapacity(newSize:Int) {
        if maxLength >= newSize {
            return
        }
        def oldMax := maxLength
        while maxLength < newSize {
            maxLength *= 2
        }
        data := data.realloc(oldMax, maxLength)
    }

    property utf8:UTF8List
    function get_utf8():UTF8List {
        return UTF8List(self)
    }

    -- FIXME @self
    method clear() {
        data := data.realloc(maxLength, DEFAULT_SIZE)
        _length := 0
        maxLength := DEFAULT_SIZE
    }

    ================================================================================================
    Returns an immutable copy of this `MutableString`. Typically it is better to use [finish()] for
    performance reasons, as that does not make a copy.
    ================================================================================================
    @override
    function get_toString():String {
        def result := Pointer<Char8>.alloc(_length)
        for i in 0 .. _length {
            result[i] := data[i]
        }
        return String(result, _length)
    }

    ================================================================================================
    Invalidates this `MutableString` and returns its contents as an immutable `String`. This is
    generally preferable to [toString], as it does not copy the string's contents. Interacting in
    any way with a `MutableString` after `finish`ing will cause precondition violations (or, if
    safety checks are disabled, undefined behavior).
    ================================================================================================
    -- FIXME @self
    method finish():String {
        -- FIXME this transformation is only safe at -S0
        data := data.realloc(maxLength, _length)
        maxLength := -1
        self.$class := "".$class
        return self->Object->String
--        maxLength := -1
--        return String(data, length)
    }
}