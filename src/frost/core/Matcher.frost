package frost.core

====================================================================================================
Represents the process of scanning a string for matches to a regular expression. `Matcher` objects
are created by [RegularExpression] to scan particular strings, and return matches one at a time.
====================================================================================================
class Matcher {
    @private
    constant REPLACEMENT_GROUPS := /\$(0|[1-9]\d*)/

    @private
    def nativeHandle:Int

    @private
    def searchText:String

    ================================================================================================
    `true` if we have successfully found a match.
    ================================================================================================
    @private
    var matched:Bit
    
    ================================================================================================
    The position that [appendReplacement](appendReplacement(MutableString, String)) or [appendTail]
    will start copying from.
    ================================================================================================
    @private
    var replacementIndex:String.Index

    ================================================================================================
    Returns the index of the beginning of the last match located by `find()`. It is a [safety
    violation](/safetyViolations.html) to read this property unless the last call to `matches()` or
    `find()` was successful.
    ================================================================================================
    property start:String.Index

    ================================================================================================
    Returns the index of the end of the last match located by `find()`. It is a [safety
    violation](/safetyViolations.html) to read this property unless the last call to `matches()` or
    `find()` was successful.
    ================================================================================================
    property end:String.Index

    ================================================================================================
    Returns the number of groups contained in the match. This is always at least 1, as group zero
    represents the entire matched text. It is a [safety violation](/safetyViolations.html) to read
    this property unless the last call to `matches()` or `find()` was successful.
    ================================================================================================
    property groupCount:Int

    @private
    init() {
    }

    ================================================================================================
    Checks to see if the regular expression matches the entire string. While `find()` tolerates
    additional unmatched text before or after the match, `matches()` does not.
    ================================================================================================
    -- @self FIXME
    @external(frostMatcherMatches)
    method matches():Bit

    ================================================================================================
    Returns the next occurrence of the matcher's regular expression within the string, starting just
    past the last match (or at the beginning of the string, if this is the first call to `find()`).
    Returns a `Bit` indicating whether or not a match was found. Use [start], [end], and
    [group(Int)] for more information about the match.
    
    @returns `true` if a match was found
    @see matches()
    @see find(String.Index)
    ================================================================================================
    -- @self FIXME
    @pre(matched | replacementIndex = searchText.start)
    method find():Bit {
        var start:String.Index
        if matched {
            start := self.end
            if self.start = start { -- zero-character match, skip ahead one
                start := searchText.next(start)
                if start >= searchText.end {
                    matched := false
                    return matched
                }
            }
        }
        else {
            start := searchText.start
        }
        matched := nativeFind(start)
        return matched
    }
    
    ================================================================================================
    Returns the first occurrence of the matcher's regular expression within the string starting at
    the character `start`. Returns whether or not a match was found. Use [start], [end], and
    [group(Int)] for more information about the match.
    
    @param start the index to start the search at
    @returns `true` if a match was found
    @see matches()
    @see find()
    ================================================================================================
    -- @self FIXME
    method find(start:String.Index):Bit {
        replacementIndex := start
        matched := nativeFind(start)
        return matched
    }

    ================================================================================================
    After a successful match, appends a replacement for the match to a `MutableString`. The text
    appended to the `MutableString` will include all unmatched characters between the last match and
    the current match, and the `replacement` string may include references to match groups using the
    syntax `$1`, `$2`, etc.

    `appendReplacement` is intended to be used in a loop with [find()] and completed with
    [appendTail()](appendTail), such as in this example:

        -- testcase MatcherAppendReplacement(Simple)
        def result := MutableString()
        def regex := /\s+/ -- match all whitespace
        def matcher := regex.matcher("Hello, can anyone hear me?")
        while matcher.find() {
            matcher.appendReplacement(result, "|")
        }
        matcher.appendTail(result)
        Console.printLine(result)

    This will display the text `"Hello,|can|anyone|hear|me?"`.

    @param target the `MutableString` to append to
    @param replacement the replacement string, optionally containing `$1`-style group references
    ================================================================================================
    @pre(matched)
    -- @limited FIXME
    method appendReplacement(target:MutableString, replacement:String) {
        appendReplacement(target, replacement, true)
    }

    ============================================================================
    As [appendReplacement(MutableString, String)], but allows the 
    interpretation of `$1`-style group references to be controlled. With
    `allowGroupReferences` set to `false`, the replacement string is treated
    literally, with no special handling for `$1`-style sequences.

    @param target the `MutableString` to append to
    @param replacement the replacement string
    @param allowGroupReferences if false, `$1`-style group references are 
           ignored
    ============================================================================
    @pre(matched)
    -- @limited FIXME
    method appendReplacement(target:MutableString, replacement:String, allowGroupReferences:Bit) {
        target.append(searchText[replacementIndex .. start])
        if allowGroupReferences {
            def ref := REPLACEMENT_GROUPS.matcher(replacement)
            var lastEnd:String.Index := searchText.start
            while ref.find() {
                def rawGroup := ref.group(1).asInt!
                var groupIdx := rawGroup
                var newEnd := ref.end
                while groupIdx >= groupCount { -- no such group, pull digits off
                    groupIdx //= 10
                    newEnd := searchText.previous(newEnd)
                }
                target.append(replacement[lastEnd .. ref.start])
                lastEnd := newEnd
                if groupIdx > 0 | rawGroup = 0 {
                    target.append(group(groupIdx))
                }
                else {
                    target.append("$")
                }
            }
            target.append(replacement[lastEnd..])
        }
        else {
            target.append(replacement)
        }
        replacementIndex := end
    }
    
    ================================================================================================
    Appends all remaining unmatched text to the target `MutableString`. See
    [appendReplacement](appendReplacement(MutableString, String)) for a usage example.

    @param target the string to append to
    ================================================================================================
    -- @limited FIXME
    method appendTail(target:MutableString) {
        target.append(searchText[replacementIndex..])
    }

    @private
    @external(frostMatcherNativeFind)
    method nativeFind(start:String.Index):Bit

    @pre(matched)
    @external(frostMatcherStart)
    function get_start():String.Index

    @pre(matched)
    @external(frostMatcherEnd)
    function get_end():String.Index

    @pre(matched)
    @external(frostMatcherGroupCount)
    function get_groupCount():Int

    ================================================================================================
    Returns the contents of the indicated match group. Group zero is the entire matched text, and
    additional groups are defined by parentheses in the regular expression. For example:

        -- testcase MatcherGroup(Simple)
        def m := /(\d+) plus (\d+) equals (\d+)/.matcher("12 plus 8 equals 20")
        if m.matches() {
            for i in 0 .. m.groupCount {
                Console.printLine(m.group(i))
            }
        }

    This will display:

        12 plus 8 equals 20
        12
        8
        20
    ================================================================================================
    @pre(matched)
    @external(frostMatcherGroup)
    function group(index:Int):String?

    @override
    method cleanup() {
        destroy()
    }

    @private
    @external(frostMatcherDestroy)
    method destroy()
}