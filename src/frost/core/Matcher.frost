package frost.core

uses frost.unsafe.Pointer

@final
class Matcher {
    @private
    constant REPLACEMENT_GROUPS := /\$(0|[1-9]\d*)/

    @private
    def nativeHandle:Pointer<Int8>

    @private
    def searchText:String

    ================================================================================================
    `true` if we have successfully found a match.
    ================================================================================================
    @private
    var matched:Bit
    
    ================================================================================================
    The position that [appendReplacement](appendReplacement(MutableString, String)) or [appendTail]
    will start copying from.
    ================================================================================================
    @private
    var replacementIndex:String.Index

    property start:String.Index

    property end:String.Index

    property groupCount:Int

    @private
    init() {
    }

    -- @self FIXME
    @external
    method matches():Bit

    ================================================================================================
    Returns the next occurrence of the matcher's regular expression within the string, starting just
    past the last match (or at the beginning of the string). Returns a `Bit` indicating whether or
    not a match was found. Use [start], [end], and [group(Int)] for more information about the
    match.
    
    @returns `true` if a match was found
    @see matches()
    @see find(String.Index)
    ================================================================================================
    -- @self FIXME
    @pre(matched | replacementIndex = searchText.start)
    method find():Bit {
        var start:String.Index
        if matched {
            start := self.end
            if self.start = start { -- zero-character match, skip ahead one
                start := searchText.next(start)
                if start >= searchText.end {
                    matched := false
                    return matched
                }
            }
        }
        else {
            start := searchText.start
        }
        matched := nativeFind(start)
        return matched
    }
    
    ================================================================================================
    Returns the first occurrence of the matcher's regular expression within the string starting at
    the character `start`. Returns whether or not a match was found. Use [start], [end], and
    [group(Int)] for more information about the match.
    
    @param start the index to start the search at
    @returns `true` if a match was found
    @see matches()
    @see find()
    ================================================================================================
    -- @self FIXME
    method find(start:String.Index):Bit {
        replacementIndex := start
        matched := nativeFind(start)
        return matched
    }

    ================================================================================================
    After a successful match, appends a replacement for the match to a `MutableString`. The text
    appended to the `MutableString` will include all unmatched characters between the last match and
    the current match, and the `replacement` string may include references to match groups using the
    syntax `$1`, `$2`, etc.

    `appendReplacement` is intended to be used in a loop with [find()] and completed with
    [appendTail()](appendTail), such as in this example:

        def result := MutableString()
        def regex := /\s+/ -- match all whitespace
        def matcher := regex.matcher("Hello, can anyone hear me?")
        while matcher.find() {
            matcher.appendReplacement(result, "|")
        }
        matcher.appendTail(result)
        Console.writeLine(result)

    This will display the text `"Hello,|can|anyone|hear|me?"`.

    @param target the `MutableString` to append to
    @param replacement the replacement string, optionally containing `$1`-style group references
    ================================================================================================
    @pre(matched)
    -- @limited FIXME
    method appendReplacement(target:MutableString, replacement:String) {
        appendReplacement(target, replacement, true)
    }

    ============================================================================
    As [appendReplacement(MutableString, String)], but allows the 
    interpretation of `$1`-style group references to be controlled. With
    `allowGroupReferences` set to `false`, the replacement string is treated
    literally, with no special handling for `$1`-style sequences.

    @param target the `MutableString` to append to
    @param replacement the replacement string
    @param allowGroupReferences if false, `$1`-style group references are 
           ignored
    ============================================================================
    @pre(matched)
    -- @limited FIXME
    method appendReplacement(target:MutableString, replacement:String, allowGroupReferences:Bit) {
        target.append(searchText[replacementIndex .. start])
        if allowGroupReferences {
            def ref := REPLACEMENT_GROUPS.matcher(replacement)
            var lastEnd:String.Index := searchText.start
            while ref.find() {
                def rawGroup := ref.group(1).asInt!
                def groupIdx := rawGroup
                var newEnd := ref.end
                while groupIdx >= groupCount { -- no such group, pull digits off
                    groupIdx //= 10
                    newEnd := searchText.previous(newEnd)
                }
                target.append(replacement[lastEnd .. ref.start])
                lastEnd := newEnd
                if groupIdx > 0 | rawGroup = 0 {
                    target.append(group(groupIdx))
                }
                else {
                    target.append("$")
                }
            }
            target.append(replacement[lastEnd..])
        }
        else {
            target.append(replacement)
        }
        replacementIndex := end
    }
    
    ================================================================================================
    Appends all remaining unmatched text to the target `MutableString`. See
    [appendReplacement](appendReplacement(MutableString, String)) for a usage example.

    @param target the string to append to
    ================================================================================================
    -- @limited FIXME
    method appendTail(target:MutableString) {
        target.append(searchText[replacementIndex..])
    }

    @private
    @external
    method nativeFind(start:String.Index):Bit

    @external
    function get_start():String.Index

    @external
    function get_end():String.Index

    @external
    function get_groupCount():Int

    @external
    function group(index:Int):String?

    @override
    method cleanup() {
        destroy()
    }

    @private
    @external
    method destroy()
}