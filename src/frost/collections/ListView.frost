package frost.collections

uses frost.unsafe.Pointer

====================================================================================================
A random-access `CollectionView` with numbered elements. Each entry has an index, ranging from `0`
to `count - 1`, by which it can be accessed.

@see ListWriter
@see List
====================================================================================================
interface ListView<T> : CollectionView<T> {
    ================================================================================================
    Returns an `Iterator` which returns `(index, value)` tuples. For example, 
    `["Hello", "Bonjour"].enumeration` returns an `Iterator<(Int, String)>` which produces
    `(0, "Hello")` followed by `(1, "Bonjour")`.
    ================================================================================================
    property enumeration:Iterator<(Int, T)>

    ================================================================================================
    An `Iterator` of all possible permutations of this list. A permutation is a distinct ordering;
    each possible shuffling of a deck of cards is a different permutation. As the number of
    permutations is equal to the factorial of the number of elements in the list, it is only
    practical to fully iterate the permutations of very small lists (a list with just 15 elements in
    it has over a trillion permutations).

    @returns an iterator which produces permutations of this list
    ================================================================================================
    property permutations:Iterator<ListView<T>>

    ================================================================================================
    Returns an `Iterator` which produces the elements of the power set of this list. The power set
    of a list is the set of all possible subsets (including the empty list. For instance, the power
    set of `[1, 2, 3]` is: `[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]`.

    As the power set of a list with `n` elements contains 2^n entries, iterating over the power set
    is only practical for small lists. 

    @returns an iterator which produces the power set of this list
    ================================================================================================
    property powerSet:Iterator<ListView<T>>

    property last:T

    @private
    class ListIterator<T> : Iterator<T> {
        var list:ListView<T>

        var index := 0

        init(list:ListView<T>) {
            self.list := list
        }

        @override
        function get_done():Bit {
            return index = list.count
        }

        @override
        function next():T {
            index += 1
            return list[index - 1]
        }
    }

    @private
    class PermutationIterator<T> : Iterator<ListView<T>> {
        def list:ListView<T>

        def choices:Array<Int>

        init(list:ListView<T>) {
            self.list := list
            self.choices := Array<Int>(list.count, 0)
        }

        @override
        function get_done():Bit {
            return choices[0] = -1
        }

        @override
        function next():ListView<T> {
            def result := Array<T>(list.count)
            def copy := Array<T>(list)
            for c in choices {
                result.add(copy[c])
                copy.removeIndex(c)
            }
            var i := 0
            while i < choices.count & choices[i] = list.count - i - 1->Int {
                choices[i] := 0
                i += 1
            }
            if i = choices.count {
                choices[0] := -1
            }
            else {
                choices[i] += 1
            }
            return result
        }
    }

    @private
    class CombinationIterator<T> : Iterator<ListView<T>> {
        def list:ListView<T>

        def choices:List<Int>

        var r := 0

        var index := 0

        @pre(count >= 0 & count <= list.count)
        init(list:ListView<T>, count:Int) {
            self.list := list
            self.choices := Array<Int>(count)
            for i in 0 .. count {
                choices.add(i)
            }
        }

        @override
        function get_done():Bit {
            for i in 0 .. choices.count {
                if choices[i] + choices.count < list.count - i {
                    return false
                }
            }
            return true
        }

        @override
        method next():ListView<T> {
            loop {
                if index <= list.count + r - choices.count {
                    choices[r] := index
                    if r = choices.count - 1->Int {
                        index += 1
                        def result := Array<T>(choices.count)
                        for c in choices {
                            result.add(list[c])
                        }
                        return result
                    }
                    else {
                        index := choices[r] + 1
                        r += 1
                    }
                }
                else {
                    r -= 1
                    if r > 0 {
                        index := choices[r] + 1
                    }
                    else {
                        index := choices[0] + 1
                    }
                }
            }
        }
    }

    @private
    class PowerSetIterator<T> : Iterator<ListView<T>> {
        def list:ListView<T>

        var bits:UInt64 := 0

        var stop:UInt64

        init(list:ListView<T>) {
            self.list := list
            self.stop := (1 << list.count).asUInt64
        }

        @override
        function get_done():Bit {
            return bits = stop
        }

        @override
        method next():ListView<T> {
            def result := Array<T>()
            for i in 0 .. list.count {
                if bits[i] {
                    result.add(list[i])
                }
            }
            bits += 1
            return result
        }
    }

    ================================================================================================
    Returns an item from this list.

    @param index the (zero-based) index of the item to return
    ================================================================================================
    @pre(index >= 0 & index < count)
    function [](index:Int):T

    ================================================================================================
    Returns a slice of the list, containing all of the elements specified by the range. The slice
    is an independent copy of the list and elements may be added to and removed from the original
    without affecting the copy. It is not, however, a deep copy, and thus both lists will refer
    to the same objects.
    ================================================================================================
    @default
    @pre(r.min >= 0 & (r.inclusive & r.min < count | !r.inclusive & r.min <= count) &
            r.max >= 0 & (r.inclusive & r.max < count | !r.inclusive & r.max <= count))
    @priority(1) -- FIXME shouldn't be needed
    function [](r:Range<Int>):ListView<T> {
        var max := r.max
        if r.inclusive {
            max += 1
        }
        def count := max - r.min
        def result := Pointer<T>.alloc(count)
        for i in 0 .. count {
            result[i] := self[r.min + i]
        }
        return Array<T>(result, count)
    }

    ================================================================================================
    Returns a slice of the list, containing all of the elements specified by the range. The slice
    is an independent copy of the list and elements may be added to and removed from the original
    without affecting the copy. It is not, however, a deep copy, and thus both lists will refer
    to the same objects.

    As usual for `Range`, a null `min` starts from the beginning of the list, and a null `max` ends
    at the end of the list.
    ================================================================================================
    @default
    function [](r:Range<Int?>):ListView<T> {
        def start:Int
        if r.min !== null {
            start := r.min
        }
        else {
            start := 0
        }

        var end:Int
        if r.max !== null {
            end := r.max
        }
        else {
            end := count
            if r.inclusive {
                end -= 1
            }
        }
        return self[Range<Int>(start, end, r.inclusive)]
    }

    @private
    @class
    function inRange(r:SteppedRange<Int?, Int>, count:Int):Bit {
        if r.start !== null {
            if (r.start < 0) {
                return false
            }
            if r.inclusive & r.start >= count {
                return false
            }
            if !r.inclusive & r.start > count {
                return false
            }
        }
        if r.end !== null {
            if (r.end < 0) {
                return false
            }
            if r.inclusive & r.end >= count {
                return false
            }
            if !r.inclusive & r.end > count {
                return false
            }
        }
        return true
    }

    ================================================================================================
    Returns a slice of the list, containing all of the elements specified by the range. The slice
    is an independent copy of the list and elements may be added to and removed from the original
    without affecting the copy. It is not, however, a deep copy, and thus both lists will refer
    to the same objects.
    ================================================================================================
    @default
    @pre(inRange(r, count))
    function [](r:SteppedRange<Int?, Int>):ListView<T> {
        def step := r.step

        def current:Int
        if r.start !== null {
            current := r.start
        }
        else if step > 0 {
            current := 0
        }
        else {
            current := count - 1
        }

        def end:Int
        if r.end !== null {
            end := r.end
        }
        else if step > 0 {
            end := count
        }
        else {
            end := 0
        }

        def result := Array<T>()
        if r.step > 0 {
            while current < end {
                result.add(self[current])
                current += step
            }
        }
        else {
            assert r.step < 0
            while current > end {
                result.add(self[current])
                current += step
            }
        }
        if (r.inclusive | r.end == null) & current = end & end < count {
            result.add(self[current])
        }
        return result
    }

    @override
    @default
    function get_first():T {
        return self[0]
    }

    @default
    function get_last():T {
        return self[count - 1]
    }

    ================================================================================================
    Returns a new list containing every entry in this list for which the `predicate` function
    returns true. For instance, `[1, 7, -10, 5, -2].filter(x => x > 0)` returns `[1, 7, 5]`.
    ================================================================================================
    @default
    @priority(1) -- FIXME I don't think I should need all these @priority annotations...
    -- FIXME need an annotation for having to use the return value
    function filter(predicate:(T)=>(Bit)):ListView<T> {
        def result := Array<T>()
        for v in self {
            if predicate(v) {
                result.add(v)
            }
        }
        return result
    }

    @default
    -- FIXME need an annotation for having to use the return value
    method filter(predicate:(T)=&>(Bit)):ListView<T> {
        def result := Array<T>()
        for v in self {
            if predicate(v) {
                result.add(v)
            }
        }
        return result
    }

    @default
    @priority(1)
    @pre(count = other.count)
    function combine<U, V>(other:ListView<U>, f:(T, U)=>(V)):ListView<V> {
        def result := Array<V>(count)
        for i in 0 .. count {
            result.add(f(self[i], other[i]))
        }
        return result
    }

    @default
    @pre(count = other.count)
    method combine<U, V>(other:ListView<U>, f:(T, U)=&>(V)):ListView<V> {
        def result := Array<V>(count)
        for i in 0 .. count {
            result.add(f(self[i], other[i]))
        }
        return result
    }

    @default
    @override
    function get_iterator():Iterator<T> {
        return ListIterator<T>(self)
    }

    @default
    function get_enumeration():Iterator<(Int, T)> {
        return iterator.enumeration
    }

    @default
    function get_permutations():Iterator<ListView<T>> {
        return PermutationIterator<T>(self)
    }

    ================================================================================================
    Returns an `Iterator` of all possible `n`-combinations of this list. An `n`-combination of a
    list is a selection of `n` distinct elements from the list; the set of 5-combinations of a deck
    of cards is the set of all possible poker hands. The combinations are chosen in such a way as to
    preserve order: the combinations of a sorted list will themselves be sorted. Elements are
    considered "distinct" if they appear at different positions in the input list. This means that
    the 2-combinations of [1, 2, 2] are [1, 2], [1, 2], and [2, 2], as the two occurrences of `2`
    are considered distinct elements.

    @returns an iterator which produces the `n`-combinations of this list
    ================================================================================================
    @default
    function combinations(n:Int):Iterator<ListView<T>> {
        return CombinationIterator<T>(self, n)
    }

    @default
    @pre(count < 64)
    function get_powerSet():Iterator<ListView<T>> {
        return PowerSetIterator<T>(self)
    }

    ================================================================================================
    Returns a sorted copy of the list using the provided comparison method. The list is sorted so
    that the greatest elements, according to the `greater` function, are at the end (higher indices)
    of the array. The sort algorithm used may be unstable, meaning equal values (that is, values for
    which `greater(a, b)` and `greater(b, a)` both return `false`) may be arbitrarily reordered
    during the sort.
    ================================================================================================
    -- FIXME write a better sort, create stableSort
    -- FIXME need an annotation for having to use the return value
    @default
    method sort(greater:(T, T)=>(Bit)):ListView<T> {
        def result := Array<T>(self)
        Frost.sort<T>(result, 0, count - 1, greater)
        return result
    }
}
