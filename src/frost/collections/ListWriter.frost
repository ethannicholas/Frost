package frost.collections

====================================================================================================
A write-only view of a list of elements. `ListWriter` adds random-access methods to the basic
functionality inherited from [CollectionWriter].

@see ListView
@see List
====================================================================================================
interface ListWriter<T> : CollectionWriter<T> {
    ================================================================================================
    Replaces the element at `index` with a new value.

    @param index the element to modify
    @param value the new value
    ================================================================================================
    @pre(index >= 0 & index < count)
    method []:=(index:Int, value:T)

    ================================================================================================
    Inserts a new element at `index`, moving all elements from `index` to the end of the list out of
    the way to make room for it. Inserting with an `index` equal to `count` is equivalent to calling
    [add].

    @param index the location at which to insert
    @param value the new value
    ================================================================================================
    @pre(index >= 0 & index <= count)
    method insert(index:Int, value:T)

    ================================================================================================
    Removes the element at `index`, moving all elements from `index + 1` to the end of the list down
    one index to fill in the "hole" created by the deletion.

    @param index the index to remove
    @returns the value which was removed
    ================================================================================================
    @pre(index >= 0 & index < count)
    method removeIndex(index:Int):T

    @pre(count > 0)
    @default
    method removeLast() {
        removeIndex(count - 1)
    }
}
