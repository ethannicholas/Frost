package frost.collections

====================================================================================================
A `Set` which compares its entries using identity (`==`) instead of equality (`=`). Unlike
`HashSet`, which requires its entries to implement the `Key` interface, any type of object may be
used in an `IdentitiySet`. However, it is important that the type not be a subclass of `Value`, as
values do not have well-defined identities and `IdentitySet` will therefore not function properly
with value types.
====================================================================================================
@final
class IdentitySet<T> : Collection<T> {
    @private
    def contents := IdentityMap<T, T>()

    ================================================================================================
    Creates a new empty `IdentitySet`.
    ================================================================================================
    init() {
    }

    ================================================================================================
    Creates a new set containing all of the elements from another collection, with duplicate entries
    filtered out.
    ================================================================================================
    init(c:CollectionView<T>) {
        addAll(c)
    }

    @override
    method add(value:T) {
        contents[value] := value
    }

    @override
    method addAll(c:CollectionView<T>) {
        for v in c {
            add(v)
        }
    }

    ================================================================================================
    Removes an entry from the set, if present.
    ================================================================================================
    method remove(value:T) {
        contents.remove(value)
    }

    @override
    function get_count():Int {
        return contents.count
    }

    @override
    method clear() {
        contents.clear()
    }

    @override
    function get_iterator():Iterator<T> {
        return contents.keys
    }

    ================================================================================================
    Returns `true` if the value is present in the set.
    ================================================================================================
    function contains(value:T):Bit {
        return contents.contains(value)
    }

    @override
    method filterInPlace(test:(T)=>(Bit)) {
        contents.filterInPlace((k, v) => test(k))
    }

    @override
    function get_toString():String {
        def result := MutableString("[")
        var separator := ""
        for v in contents.keys {
            result.append(separator)
            -- FIXME cast shouldn't be necessary
            if v->Object? !== null {
                result.append(v)
            }
            else {
                result.append("<null>")
            }
            separator := ", "
        }
        result.append("]")
        return result.finish()
    }
}
