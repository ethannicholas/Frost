package frost.collections

uses frost.unsafe.Pointer

====================================================================================================
Standard implementation of the [Map] interface, which associates keys with values. An arbitrary
number of values can be stored in a `HashMap` and then retrieved in constant average time:

    -- testcase HashMap(Simple)
    def alignment := HashMap<String, String>()
    alignment["faerie"] := "good"
    alignment["orc"]    := "evil"
    alignment["golem"]  := "neutral"
    Console.printLine(alignment["faerie"])

This will display the value `"good"`.
====================================================================================================
@final
class HashMap<K:HashKey<K>, V> : Map<K, V> {
    @private
    class Entry<K:HashKey<K>, V> {
        ============================================================================================
        The entry's key.
        ============================================================================================
        def key:K

        ============================================================================================
        The entry's value.
        ============================================================================================
        var value:V

        var next:Entry<K, V>?

        @private
        init(key:K, value:V) {
            self.key := key
            self.value := value
        }
    }

    @private
    class EntryIterator<K:HashKey<K>, V> : Iterator<(K, V)> {
        def map:HashMap<K, V>
        var bucket := 0
        var entry:Entry<K, V>? := null

        init(map:HashMap<K, V>) {
            self.map := map
            while bucket < map.bucketCount & map.contents[bucket] == null {
                bucket += 1
            }
            if bucket < map.bucketCount {
                entry := map.contents[bucket]
            }
        }

        @override
        function get_done():Bit {
            return bucket = map.bucketCount & entry == null
        }

        @override
        method next():(K, V) {
            assert entry !== null
            assert bucket < map.bucketCount
            def result := entry!
            entry := entry!.next
            while entry == null {
                bucket += 1
                if bucket = map.bucketCount {
                    break
                }
                entry := map.contents[bucket]
            }
            return (result.key, result.value)
        }
    }

    @private
    constant DEFAULT_BUCKET_COUNT := 16

    @private
    var _count:Int

    @private
    -- must be a power of 2 (see indexFor)
    var bucketCount:Int

    @private
    var contents:Pointer<Entry<K, V>?>

    @private
    var threshold:Int

    @private
    var changeCount := 0
    
    ================================================================================================
    Creates a new, empty `HashMap`.
    ================================================================================================
    init() {
        changeCount += 1
        _count := 0
        bucketCount := DEFAULT_BUCKET_COUNT
        contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
        for i in 0 .. bucketCount {
            contents[i] := null
        }
        threshold := (bucketCount * 3) // 4
    }

    init(map:MapView<K, V>) {
        init()
        for (k, v) in map.entries {
            self[k] := v
        }
    }

    init(entries:CollectionView<(K, V)>) {
        init()
        for e in entries {
            self[e[0]] := e[1]
        }
    }

    @override
    method cleanup() {
        for i in 0 .. bucketCount {
            if contents[i] !== null {
                Frost.unrefThreadSafe(contents[i])
            }
        }
        contents.destroy()
    }

    ================================================================================================
    Given a key, returns the bucket in which the key's entry should be stored.
    ================================================================================================
    @private
    function indexFor(key:K):Int {
        var h:Int
        if key == null {
            h := 0
        }
        else {
            h := key.hash
        }
        -- supplemental hash function to defend against poor hash codes, as we do not use a prime
        -- table length
        h ~~= (h >> 20) ~~ (h >> 12) ~~ (h >> 7) ~~ (h >> 4)
        -- the bitwise and below is equivalent to mod if length is a power of 2, which is why we
        -- require that
        h &&= bucketCount - 1
        return h
    }
    
    @override
    function [](key:K):V? {
        def index := indexFor(key)
        var e := contents[index]
        while e !== null & e.key != key {
            e := e.next
        }
        if e !== null {
            return e.value
        }
        else {
            return null
        }
    }
    
    @override
    function contains(key:K):Bit {
        def index := indexFor(key)
        var e := contents[index]
        while e !== null & e.key != key {
            e := e.next
        }
        return e !== null
    }

    @override
    method []:=(key:K, value:V) {
        changeCount += 1
        def index := indexFor(key)
        var e := contents[index]
        while e !== null & e.key != key {
            e := e.next
        }
        if e == null {
            def old := contents[index]
            e := Entry<K, V>(key, value)
            e.next := old
            contents[index] := e
            incrementCount()
        }
        else {
            e.value := value
        }
    }
    
    @override
    method remove(key:K) {
        changeCount += 1
        def index := indexFor(key)
        var e := contents[index]
        -- not found
        if e == null {
            return
        }
        -- found in the first slot, need to update the contents array
        if e.key = key {
            contents[index] := e.next
            _count -= 1
            return
        }
        loop {
            def next := e.next
            if next == null {
                -- not found
                return
            }
            if next.key = key {
                -- it's the next slot in the list
                break
            }
            e := next
        }
        -- we are looking at the entry before it, update its next Pointer to skip over it
        def next := e.next
        assert next !== null
        e.next := next.next
        _count -= 1
    }

    @override
    method clear() {
        changeCount += 1
        _count := 0
        for i in 0 .. bucketCount {
            if contents[i] !== null {
                Frost.unrefThreadSafe(contents[i])
            }
        }
        contents.destroy()
        bucketCount := DEFAULT_BUCKET_COUNT
        contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
        for i in 0 .. bucketCount {
            if contents[i] !== null {
                contents[i] := null
            }
        }
        threshold := (bucketCount * 3) // 4
    }
    
    @private
    method incrementCount() {
        _count += 1
        if _count >= threshold {
            def oldContents := contents
            def oldBucketCount := bucketCount
            bucketCount *= 2
            contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
            for i in 0 .. bucketCount {
                contents[i] := null
            }
            threshold *= 2
            _count := 0
            for i in 0 .. oldBucketCount {
                var e := oldContents[i]
                while e !== null {
                    self[e.key] := e.value
                    e := e.next
                }
            }
            for i in 0 .. oldBucketCount {
                if oldContents[i] !== null {
                    Frost.unrefThreadSafe(oldContents[i])
                }
            }
            oldContents.destroy()
        }
    }

    @override
    function get_entries():Iterator<(K, V)> {
        return EntryIterator<K, V>(self)
    }

    @override
    function get_count():Int {
        return _count
    }

    @override
    method filterInPlace(test:(K, V)=>(Bit)) {
        for i in 0 .. bucketCount {
            var e := contents[i]
            while e !== null & !test(e.key, e.value) {
                e := e.next
                contents[i] := e
            }
            if e !== null {
                var next := e.next
                while next !== null {
                    if !test(next.key, next.value) {
                        e.next := next
                    }
                    next := next.next
                }
            }
        }
    }

    ================================================================================================
    Returns a string representation of the map.

    @param fmt the format string
    @returns a string representation of this object
    ================================================================================================
    @override
    function get_asString():String {
        def result := MutableString()
        result.append("{")
        var separator := ""
        for i in 0 .. bucketCount {
            var entry := contents[i]
            while entry !== null {
                result.append(separator)
                if entry.key !== null {
                    result.append(entry.key)
                }
                else {
                    result.append("null")
                }
                result.append(":")
                if entry.value !== null {
                    result.append(entry.value)
                }
                else {
                    result.append("null")
                }
                entry := entry.next
                separator := ", "
            }
        }
        result.append("}")
        return result.finish()
    }
}
