package frost.collections

====================================================================================================
A write-only view of a collection of elements. `CollectionWriter` provides methods to add and
remove elements, but not to retrieve them.

@see CollectionView
@see Collection
@see ListWriter
====================================================================================================
interface CollectionWriter<T> {
    property count:Int

    function get_count():Int

    ================================================================================================
    Adds a new element to the collection. The exact semantics of `add` - does it add to the end of
    the collection, or an arbitrary location? does it always actually add the element, or sometimes
    leave the collection unmodified? - are defined by the collection implementation.
    ================================================================================================
    method add(value:T)

    ================================================================================================
    Adds all elements in `c` to this collection. The default implementation simply calls [add] for
    each element in `c`, in iteration order.
    ================================================================================================
    @default
    method addAll(c:CollectionView<T>) {
        for v in c {
            add(v)
        }
    }

    ================================================================================================
    Removes all elements in the collection.
    ================================================================================================
    @post(count = 0)
    method clear()

    ================================================================================================
    Calls the `test` function on each element in the collection, removing all elements for which the
    function returns `false`.

    For example, calling `filterInPlace(x => x % 2 = 1)` on `[1, 2, 3, 4, 5]` will result in
    `[1, 3, 5]`, as the filter function returns true only for elements with odd values.
    ================================================================================================
    method filterInPlace(test:(T)=>(Bit))
}
