package frost.collections

uses frost.unsafe.Pointer

====================================================================================================
Standard implementation of the `List` interface. `Array` is a resizable random-access array,
featuring constant time reads and writes. Appending new elements to the array can be expensive, as
it may require the backing store to be increased in size which in turn may require a memory copy.

Particularly for bigger arrays, it is best to avoid this expensive size increase by pre-allocating
the array with the expected number of elements it will contain using [init(Int)].
====================================================================================================
@final
class Array<T> : List<T> {
    @private
    constant DEFAULT_CAPACITY := 16

    @private
    var _count := 0

    @private
    var capacity:Int

    @private
    var data:Pointer<T>

    ================================================================================================
    Creates a new, empty `Array`.
    ================================================================================================
    init() {
        init(DEFAULT_CAPACITY)
    }

    ================================================================================================
    Creates a new, empty `Array` with the specified maximum capacity. The `Array` will allocate
    enough memory to hold `capacity` elements at the time of its creation.
    ================================================================================================
    init(capacity:Int) {
        self.capacity := capacity
        data := Pointer<T>.alloc(capacity)
    }

    ================================================================================================
    Creates a new `Array` containing all the elements in another collection.
    ================================================================================================
    init(other:CollectionView<T>) {
        init(other.count.max(DEFAULT_CAPACITY))
        for v in other {
            add(v)
        }
    }

    ================================================================================================
    Creates a new `Array` containing `count` copies of `value`.
    ================================================================================================
    init(count:Int, value:T) {
        init(capacity)
        for i in 0 .. count {
            add(value)
        }
    }

    ================================================================================================
    Creates a new `Array` containing `count` values produced by `generator`. `generator` is called
    `count` times, starting with the parameter `0` and ending with `count - 1`.
    ================================================================================================
    init(count:Int, generator:(Int)=&>(T)) {
        init(capacity)
        for i in 0 .. count {
            add(generator(i))
        }
    }

    @private
    init(data:Pointer<T>, count:Int) {
        self.data := data->Pointer<T>
        self._count := count
        self.capacity := count
    }

    @override
    method cleanup() {
        clear()
        data.destroy()
    }

    ================================================================================================
    Returns an entry from this array.
    ================================================================================================
    @override
    @priority(2)
    function [](index:Int):T {
        return data[index]
    }

    ================================================================================================
    Returns a new array containing a slice of this array. The new array is an independent shallow
    copy: they contain the same elements, so modifying to the elements will be visible in both
    arrays, but modifications to the arrays themselves (adding / removing / replacing elements) will
    not.
    ================================================================================================
    @priority(2)
    function [](r:Range<Int>):Array<T> {
        var max := r.max
        if r.inclusive {
            max += 1
        }
        def count := max - r.min
        def result := Pointer<T>.alloc(count)
        for i in 0 .. count {
            result[i] := self[r.min + i]
        }
        return Array<T>(result, count)
    }

    ================================================================================================
    Returns a new array containing a slice of this array. The new array is an independent shallow
    copy: they contain the same elements, so modifying to the elements will be visible in both
    arrays, but modifications to the arrays themselves (adding / removing / replacing elements) will
    not.
    ================================================================================================
    @priority(1)
    function [](r:Range<Int?>):Array<T> {
        def start:Int
        if r.min !== null {
            start := r.min
        }
        else {
            start := 0
        }

        var end:Int
        if r.max !== null {
            end := r.max
        }
        else {
            end := count
            if r.inclusive {
                end -= 1
            }
        }
        return self[Range<Int>(start, end, r.inclusive)]
    }

    ================================================================================================
    Replaces an element in this array with a new element.
    ================================================================================================
    @override
    method []:=(index:Int, value:T) {
        data[index] := value
    }

    @override
    method insert(index:Int, value:T) {
        -- FIXME performance, this is horrendously slow
        ensureCapacity(count + 1)
        for i in count .. index by -1 {
            data[i] := data[i - 1->Int]
        }
        _count += 1
        data[index] := value
    }

    @override
    method add(value:T) {
        ensureCapacity(_count + 1)
        data[_count] := value
        _count += 1
    }

    @override
    method addAll(c:CollectionView<T>) {
        ensureCapacity(_count + c.count)
        for v in c {
            data[_count] := v
            _count += 1
        }
    }

    @private
    method ensureCapacity(newCapacity:Int) {
        if newCapacity <= capacity {
            return
        }
        def oldCapacity := capacity
        capacity := capacity.max(1)
        while capacity < newCapacity {
            capacity *= 2
        }
        data := data.realloc(oldCapacity, capacity)
    }

    @override
    function get_count():Int {
        return _count
    }

    @override
    method removeIndex(index:Int):T {
        -- FIXME performance, this is horrendously slow
        def result := self[index]
        for i in index .. _count - 1 {
            self[i] := self[i + 1]
        }
        _count -= 1
        data.clear(_count)
        return result
    }

    @override
    method clear() {
        _count := 0
        for i in 0 .. capacity {
            data.clear(i)
        }
    }

    ================================================================================================
    As [ListView.filter((T)=>(Bit))], but returns an `Array`.
    ================================================================================================
    @priority(2)
    function filter(predicate:(T)=>(Bit)):Array<T> {
        def result := Array<T>()
        for v in self {
            if predicate(v) {
                result.add(v)
            }
        }
        return result
    }

    ================================================================================================
    As [ListView.filter((T)=&>(Bit))], but returns an `Array`.
    ================================================================================================
    @priority(2)
    method filter(predicate:(T)=&>(Bit)):Array<T> {
        def result := Array<T>()
        for v in self {
            if predicate(v) {
                result.add(v)
            }
        }
        return result
    }

    ================================================================================================
    As [ListView.combine(ListView<U>)], but returns an `Array`.
    ================================================================================================
    @priority(2)
    @pre(count = other.count)
    function combine<U>(other:ListView<U>):Array<(T, U)> {
        def result := Array<(T, U)>(count)
        for i in 0 .. count {
            result.add((self[i], other[i]))
        }
        return result
    }

    ================================================================================================
    As [ListView.combine(ListView<U>, (T, U)=>(V))], but returns an `Array`.
    ================================================================================================
    @priority(4)
    @pre(count = other.count)
    function combine<U, V>(other:ListView<U>, f:(T, U)=>(V)):Array<V> {
        def result := Array<V>(count)
        for i in 0 .. count {
            result.add(f(self[i], other[i]))
        }
        return result
    }

    ================================================================================================
    As [ListView.combine(ListView<U>, (T, U)=&>(V))], but returns an `Array`.
    ================================================================================================
    @priority(3)
    @pre(count = other.count)
    method combine<U, V>(other:ListView<U>, f:(T, U)=&>(V)):Array<V> {
        def result := Array<V>(count)
        for i in 0 .. count {
            result.add(f(self[i], other[i]))
        }
        return result
    }

    ================================================================================================
    As [ListView.sort], but returns an `Array`.
    ================================================================================================
    @priority(1)
    method sort(greater:(T, T)=>(Bit)):Array<T> {
        def result := Array<T>(self)
        MergeSort.sort(result, greater)
        return result
    }

    @override
    function get_toString():String {
        def result := MutableString()
        result.append("[")
        var separator := ""
        for v in self {
            result.append(separator)
            separator := ", "
            -- FIXME cast shouldn't be necessary
            if v->Object? !== null {
                result.append(v)
            }
            else {
                result.append("<null>")
            }
        }
        result.append("]")
        return result.finish()
    }
}
