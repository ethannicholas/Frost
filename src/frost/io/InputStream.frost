package frost.io

uses frost.unsafe.Pointer

====================================================================================================
A stream of binary or character data which can be read from.
====================================================================================================
@abstract
class InputStream {
    ================================================================================================
    Determines the endianness of the data in this stream when reading multi-byte values. Defaults to
    `LITTLE_ENDIAN`, but may be freely changed.
    ================================================================================================
    var byteOrder := ByteOrder.LITTLE_ENDIAN

    @private
    class LineIterator : Iterator<String> {
        def input:InputStream
        var _next:String?

        init(input:InputStream) {
            self.input := input
            readNext()
        }

        @override
        function get_done():Bit {
            return _next == null
        }

        @override
        method next():String {
            assert _next !== null
            def result := _next
            readNext()
            return result
        }

        method readNext() {
            _next := input.readLine()
        }
    }

    ================================================================================================
    Reads and returns a single byte. Blocks until at least one byte is available for reading, or
    returns `null` if the end of the stream has been reached or in the event of an error.
    ================================================================================================
    @abstract
    method read():UInt8?

    ================================================================================================
    Reads two bytes from this stream, interpreting them as a `UInt16` value. The interpretation of
    the bytes is determined by the [byteOrder] field.
    ================================================================================================
    method read():UInt16? {
        def result:Int16 := read()
        if result !== null {
            return result.asUInt16
        }
        return null
    }

    ================================================================================================
    Reads four bytes from this stream, interpreting them as a `UInt32` value. The interpretation of
    the bytes is determined by the [byteOrder] field.
    ================================================================================================
    method read():UInt32? {
        def result:Int32 := read()
        if result !== null {
            return result.asUInt32
        }
        return null
    }

    ================================================================================================
    Reads eight bytes from this stream, interpreting them as a `UInt64` value. The interpretation of
    the bytes is determined by the [byteOrder] field.
    ================================================================================================
    method read():UInt64? {
        def result:Int64 := read()
        if result !== null {
            return result.asUInt64
        }
        return null
    }

    ================================================================================================
    Reads a single byte from this stream as an `Int8`.
    ================================================================================================
    method read():Int8? {
        def result:UInt8? := read()
        if result !== null {
            return result.asInt8
        }
        return null
    }

    ================================================================================================
    Reads two bytes from this stream, interpreting them as an `Int16` value. The interpretation of
    the bytes is determined by the [byteOrder] field.
    ================================================================================================
    method read():Int16? {
        def a:UInt8? := read()
        if a == null {
            return null
        }
        def b:UInt8? := read()
        if b == null {
            return null
        }
        if byteOrder = ByteOrder.LITTLE_ENDIAN {
            return (b << 8 + a).asInt16
        }
        else {
            return (a << 8 + b).asInt16
        }
    }

    ================================================================================================
    Reads four bytes from this stream, interpreting them as an `Int32` value. The interpretation of
    the bytes is determined by the [byteOrder] field.
    ================================================================================================
    method read():Int32? {
        def a:Int16? := read()
        if a == null {
            return null
        }
        def b:Int16? := read()
        if b == null {
            return null
        }
        if byteOrder = ByteOrder.LITTLE_ENDIAN {
            return b << 16 + a
        }
        else {
            return a << 16 + b
        }
    }

    ================================================================================================
    Reads eight bytes from this stream, interpreting them as an `Int64` value. The interpretation of
    the bytes is determined by the [byteOrder] field.
    ================================================================================================
    method read():Int64? {
        def a:Int32? := read()
        if a == null {
            return null
        }
        def b:Int32? := read()
        if b == null {
            return null
        }
        if byteOrder = ByteOrder.LITTLE_ENDIAN {
            return Int64(b.value->builtin_int64) << 32 + a
        }
        else {
            return Int64(a.value->builtin_int64) << 32 + b
        }
    }

    ================================================================================================
    Reads a single byte from this stream as a `Char8`.
    ================================================================================================
    method read():Char8? {
        def result:UInt8? := read()
        if result !== null {
            return Char8(result)
        }
        return null
    }

    ================================================================================================
    Reads up to `max` bytes from this stream into a buffer and returns the number of bytes actually
    read. Blocks until at least one byte is available for reading, or returns `0` if the end of the
    stream has been reached or if an error occurs.
    ================================================================================================
    @post(@return >= 0)
    method read(buffer:Pointer<UInt8>, max:Int):Int {
        var i := 0
        while i < max {
            def next:UInt8? := read()
            if next == null {
                break
            }
            buffer[i] := next
            i += 1
        }
        return i
    }

    ================================================================================================
    As [read(Pointer<UInt8>, Int)], but treats the read bytes as signed.
    ================================================================================================
    @final
    method read(buffer:Pointer<Int8>, max:Int):Int {
        return read(buffer->Pointer<UInt8>, max)
    }

    ================================================================================================
    As [read(Pointer<UInt8>, Int)], but treats the read bytes as `Char8`s.
    ================================================================================================
    @final
    method read(buffer:Pointer<Char8>, max:Int):Int {
        return read(buffer->Pointer<UInt8>, max)
    }

    ================================================================================================
    Reads from this stream until the end, returning the data read as a `String`. As streams may
    contain a very large (or even infinite) amount of data, you should exercise caution when using
    `readFully`.
    ================================================================================================
    @priority(1)
    method readFully():String {
        constant BUFFER_SIZE := 2048
        def result := MutableString()
        def buffer := Pointer<UInt8>.alloc(BUFFER_SIZE)
        loop {
            def count := read(buffer, BUFFER_SIZE)
            if count <= 0 {
                break
            }
            result.append(buffer->Pointer<Char8>, count)
        }
        buffer.destroy()
        return result.finish()
    }

    ================================================================================================
    Reads from this stream until the end, returning the data read as an `Array<UInt8>`. As streams
    may contain a very large (or even infinite) amount of data, you should exercise caution when
    using `readFully`.
    ================================================================================================
    method readFully():Array<UInt8> {
        constant BUFFER_SIZE := 2048
        def result := Array<UInt8>()
        def buffer := Pointer<UInt8>.alloc(BUFFER_SIZE)
        loop {
            def count := read(buffer, BUFFER_SIZE)
            if count <= 0 {
                break
            }
            -- FIXME need a bulk add
            for i in 0 .. count {
                result.add(buffer[i])
            }
        }
        buffer.destroy()
        return result
    }

    ================================================================================================
    Reads a single line of text from this stream and returns it as a `String`. Either `"\n"` or
    `"\r\n"` is accepted as a valid line ending. The line ending is not part of the returned string.
    Returns `null` if an error occurs while reading.
    ================================================================================================
    method readLine():String? {
        def result := MutableString()
        loop {
            def c:Char8? := read()
            if c == null {
                if result._length = 0 {
                    return null
                }
                break
            }
            if c = "\n" {
                if result._length > 0 & result[result.previous(result.end)] = "\r" {
                    result._length -= 1
                }
                break
            }
            result.append(c)
        }
        return result.finish()
    }

    ================================================================================================
    Continually reads from this stream, sending all of the data read to an [OutputStream]. Returns
    the number of bytes transferred when the end of the input is reached (which may be "never" for
    some `InputStream`s).
    ================================================================================================
    method sendTo(out:OutputStream):Maybe<Int> {
        var total := 0
        constant BUFFER_SIZE := 2048
        def buffer := Pointer<UInt8>.alloc(BUFFER_SIZE)
        loop {
            def count := read(buffer, BUFFER_SIZE)
            if count <= 0 {
                break
            }
            total += count
            def error := out.write(buffer, count)
            if error !== null {
                return Maybe<Int>.ERROR(error)
            }
        }
        buffer.destroy()
        return Maybe<Int>.SUCCESS(total)
    }

    ================================================================================================
    Returns an `Iterator` which reads from this string one line at a time. The `Iterator` will
    report that it is finished either when the end of the stream is reached or an error occurs.
    ================================================================================================
    function lines():Iterator<String> {
        return LineIterator(self)
    }

    method close():Error? {
        return null
    }
}