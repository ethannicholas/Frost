package frost.io

====================================================================================================
An input stream which allows data to be "pushed back" into it, so that it may be read again. This is
useful in situations such as parsing, in which you may wish to read until you encounter a delimiter
and then push the delimiter back into the stream so that it can be handled by other code.

The `PushbackInputStream` "sits on top of" another stream, reading from it when it requires new
data. You should not read directly from the underlying stream while reading from a
`PushbackInputStream`. Closing the `PushbackInputStream` *does not* close the underlying stream, but
if the `PushbackInputStream` holds the only remaining reference to the underlying stream, then
discarding the `PushbackInputStream` will cause the underlying stream to likewise be discarded and
thus closed.
====================================================================================================
@final
class PushbackInputStream : InputStream {
    @private
    def source:InputStream

    @private
    def pushbackBuffer := Array<UInt8>()

    ================================================================================================
    Creates a new `PushbackInputStream`.

    @param raw the underlying stream
    ================================================================================================
    init(source:InputStream) {
        self.source := source
        super.init()
    }

    @override
    method read():UInt8? {
        if pushbackBuffer.count > 0 {
            def result := pushbackBuffer[pushbackBuffer.count - 1]
            pushbackBuffer.removeIndex(pushbackBuffer.count - 1)
            return result
        }
        return source.read()
    }

    ============================================================================
    Pushes back a single `UInt8`, so that it will be the next byte read by the
    stream.

    @param v the `UInt8` to push
    ============================================================================
    method pushback(v:UInt8) {
        pushbackBuffer.add(v)
    }

    ============================================================================
    Pushes back a single `Int8`, so that it will be the next byte read by the
    stream.

    @param v the `Int8` to push
    ============================================================================
    method pushback(v:Int8) {
        pushbackBuffer.add(v.convert())
    }

    ============================================================================
    Pushes back a list of `UInt8`s.

    @param v the array to push
    ============================================================================
    method pushback(v:ListView<UInt8>) {
        for i in v.count - 1 ... 0 by -1 {
            pushback(v[i])
        }
    }

    ============================================================================
    Pushes back a list of `Int8`s.

    @param v the array to push
    ============================================================================
    method pushback(v:ListView<Int8>) {
        for i in v.count - 1 ... 0 by -1 {
            pushback(v[i])
        }
    }

    ============================================================================
    Pushes back a single `Char8`.

    @param c the character to push
    ============================================================================
    method pushback(c:Char8) {
        pushback(c.convert()->UInt8)
    }

    ============================================================================
    Pushes back a list of `Char`s.

    @param c the array to push
    ============================================================================
    method pushback(c:ListView<Char8>) {
        for i in c.count - 1 ... 0 by -1 {
            pushback(c[i])
        }
    }

    ============================================================================
    Pushes back a `String`.

    @param s the string to push
    ============================================================================
    method pushback(s:String) {
        pushback(s.utf8)
    }
}