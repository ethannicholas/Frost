package frost.io

uses frost.unsafe.Pointer

====================================================================================================
A stream of binary or character data which can be written to. The various `write` methods output
binary data, whereas `print` outputs text. This means that `out.write(65)` will write an `"A"`
(which has numeric value 65) to the stream, while `out.print(65)` will print the two characters
`"6"` and `"5"`.
====================================================================================================
@abstract
class OutputStream {
    ================================================================================================
    Determines the endianness of the data in this stream when writing multi-byte values. Defaults to
    `LITTLE_ENDIAN`, but may be freely changed.
    ================================================================================================
    var byteOrder := ByteOrder.LITTLE_ENDIAN

    ================================================================================================
    The string used to terminate lines written by the various `printLine` methods. Defaults to the
    correct line ending sequence for the current platform.
    ================================================================================================
    var lineEnding := "\n" -- FIXME this will need to be changed on Windows

    ================================================================================================
    Writes a single byte.

    @param value the value to write
    ================================================================================================
    @abstract
    method write(value:UInt8):Error?

    ================================================================================================
    Writes the two bytes comprising a `UInt16`. The byte order is controlled by the [byteOrder]
    field.

    @param value the value to write
    ================================================================================================
    method write(value:UInt16):Error? {
        try {
            if byteOrder = ByteOrder.LITTLE_ENDIAN {
                write(value.asUInt8)
                write((value >> 8).asUInt8)
            }
            else {
                write((value >> 8).asUInt8)
                write(value.asUInt8)
            }
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Writes the four bytes comprising a `UInt32`. The byte order is controlled by the [byteOrder]
    field.

    @param value the value to write
    ================================================================================================
    method write(value:UInt32):Error? {
        try {
            if byteOrder = ByteOrder.LITTLE_ENDIAN {
                write(value.asUInt16)
                write((value >> 16).asUInt16)
            }
            else {
                write((value >> 16).asUInt16)
                write(value.asUInt16)
            }
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Writes the eight bytes comprising a `UInt64`. The byte order is controlled by the [byteOrder]
    field.

    @param value the value to write
    ================================================================================================
    method write(value:UInt64):Error? {
        try {
            if byteOrder = ByteOrder.LITTLE_ENDIAN {
                write(value.asUInt32)
                write((value >> 32).asUInt32)
            }
            else {
                write((value >> 32).asUInt32)
                write(value.asUInt32)
            }
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Writes a single byte.

    @param value the value to write
    ================================================================================================
    @final
    method write(value:Int8):Error? {
        return write(value.asUInt8)
    }

    ================================================================================================
    Writes the two bytes comprising an `Int16`. The byte order is controlled by the [byteOrder]
    field.

    @param value the value to write
    ================================================================================================
    method write(value:Int16):Error? {
        return write(value.asUInt16)
    }

    ================================================================================================
    Writes the four bytes comprising an `Int32`. The byte order is controlled by the [byteOrder]
    field.

    @param value the value to write
    ================================================================================================
    method write(value:Int32):Error? {
        return write(value.asUInt32)
    }

    ================================================================================================
    Writes the eight bytes comprising an `Int64`. The byte order is controlled by the [byteOrder]
    field.

    @param value the value to write
    ================================================================================================
    method write(value:Int64):Error? {
        return write(value.asUInt64)
    }

    ================================================================================================
    Writes a block of data to this stream.

    @param ptr pointer to the data to write
    @param count number of bytes to write
    ================================================================================================
    method write(ptr:Pointer<UInt8>, count:Int):Error? {
        try {
            for i in 0 .. count {
                write(ptr[i])
            }
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Writes a block of data to this stream.

    @param ptr pointer to the data to write
    @param count number of bytes to write
    ================================================================================================
    @final
    method write(ptr:Pointer<Int8>, count:Int):Error? {
        return write(ptr->Pointer<UInt8>, count)
    }

    ================================================================================================
    Writes a block of data to this stream.

    @param ptr pointer to the data to write
    @param count number of bytes to write
    ================================================================================================
    @final
    method write(ptr:Pointer<Char8>, count:Int):Error? {
        return write(ptr->Pointer<UInt8>, count)
    }

    ================================================================================================
    Writes a portion of an array of bytes to this stream. The write begins at index `0` and the last
    byte written is at index `count - 1`.

    @param a the array to write
    @param count number of bytes to write
    ================================================================================================
    @final
    method write(a:Array<UInt8>, count:Int):Error? {
        try {
            for v in a {
                write(v)
            }
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Writes a portion of an array of bytes to this stream. The write begins at index `0` and the last
    byte written is at index `count - 1`.

    @param a the array to write
    @param count number of bytes to write
    ================================================================================================
    @final
    method write(a:Array<Int8>, count:Int):Error? {
        try {
            for v in a {
                write(v)
            }
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Writes a portion of an array of bytes to this stream. The write begins at index `0` and the last
    byte written is at index `count - 1`.

    @param a the array to write
    @param count number of bytes to write
    ================================================================================================
    @final
    method write(a:Array<Char8>, count:Int):Error? {
        try {
            for v in a {
                write(v)
            }
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Writes a single byte.

    @param value the value to write
    ================================================================================================
    method write(value:Char8):Error? {
        return write(value.value)
    }

    ================================================================================================
    Prints a string to the stream.

    @param s the string to write
    ================================================================================================
    method print(s:String):Error? {
        return write(s.data, s._length)
    }

    ================================================================================================
    Prints the string represention of an object (as given by [asString](Object.asString)) to the
    stream.

    @param o the object to write
    ================================================================================================
    method print(o:Object):Error? {
        return print(o.asString)
    }

    ================================================================================================
    Prints a string to the stream., followed by a [line ending](lineEnding).

    @param s the string to write
    ================================================================================================
    method printLine(s:String):Error? {
        try {
            print(s)
            printLine()
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Prints the string represention of an object (as given by [asString](Object.asString)) to the
    stream, followed by a [line ending](lineEnding).

    @param o the object to write
    ================================================================================================
    method printLine(o:Object):Error? {
        return printLine(o.asString)
    }

    ================================================================================================
    Prints a [line ending](lineEnding).
    ================================================================================================
    method printLine():Error? {
        return print(lineEnding)
    }

    ================================================================================================
    Flushes any buffers associated with this stream. `OutputStream` does not itself perform any
    buffering, so the base implementation of this method does nothing, but subclasses which buffer
    their output should override this.
    ================================================================================================
    method flush():Error? {
        return null
    }

    method close():Error? {
        return null
    }
}