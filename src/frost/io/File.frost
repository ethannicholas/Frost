package frost.io

====================================================================================================
Represents a file path, providing methods to query, read, and write files. A `File` object itself is
merely the path to the file, not the actual physical file on disk, so creating a `File` object does
not in and of itself cause any interaction with the filesystem.

`File` always uses `"/"` as a path separator regardless of the operating environment's native path
separator. Relative paths (that is, those that do not begin with `"/"`) are interpreted relative to
[System.workingDirectory()], which never changes while a program is running.
====================================================================================================
class File : Immutable, HashKey<File> {
    ================================================================================================
    The path represented by this `File`.
    ================================================================================================
    def path:String

    ================================================================================================
    `true` if this file represents an absolute path.
    ================================================================================================
    property isAbsolute:Bit

    ================================================================================================
    The directory containing this file, or `null` if this file is the root directory or `"."`. The
    directory is computed based purely on the path string, without accessing the filesystem. Use
    [parent()] to determine the directory by accessing the filesystem.
    ================================================================================================
    property directory:File?

    ================================================================================================
    The name (not including directory) of this file. For instance, `File("/tmp/data/log.txt").name`
    is `"log.txt"`.
    ================================================================================================
    property name:String

    ================================================================================================
    The name of this file without its extension. The file's extension is considered to start at the
    last period (`'.'`) it contains, so `File("/tmp/foo.bar.baz").simpleName()` returns the path
    `"foo.bar"`. If the filename does not contain a period, this property is equivalen to `name`.
    ================================================================================================
    property simpleName:String

    ================================================================================================
    Creates a new `File` with the specified path. This merely creates a new object representing the
    path does not access the file system in any way.
    ================================================================================================
    init(path:String) {
        self.path := path
    }

    ================================================================================================
    Resolves a path relative to this `File`. If the path begins with `"/"`, it is absolute and
    returned as-is. Otherwise this `File` is interpreted as a directory containing the relative
    path, so for instance `File("/tmp/output").relative("data/dump.xml")` results in the path
    `"/tmp/output/data/dump.xml"`. This function merely performs string manipulation and does not
    access the filesystem.

    @param path the relative or absolute path
    @returns the final path
    ================================================================================================
    function resolve(path:String):File {
        if path.startsWith("/") {
            return File(path)
        }
        if path = "." {
            return self
        }
        if self.path.endsWith("/") {
            return File(self.path + path)
        }
        return File(self.path + "/" + path)
    }

    ================================================================================================
    Returns an iterator which reads from the file line-by-line. Either `"\r\n"` or `"\n"` is
    accepted as a line ending, and the line endings are not part of the returned strings.

    @returns the contents of the file line-by-line
    ================================================================================================
    function lines():Maybe<Iterator<String>> {
        try {
            return Maybe<Iterator<String>>.SUCCESS(openInputStream().lines())
        }
        fail(error) {
            return Maybe<Iterator<String>>.ERROR(error)
        }
    }

    function get_isAbsolute():Bit {
        return path.startsWith("/")
    }
    
    -- only guaranteed to work for files which actually exist
    @private
    @external(frostFileAbsolute)
    method systemAbsolutePath():Maybe<File>

    ================================================================================================
    Returns a `File` representing the absolute path of this file. This queries the filesystem and
    thus is not guaranteed to succeed.

    @returns the file's absolute path
    ================================================================================================
    method absolute():Maybe<File> {
        if exists() {
            return systemAbsolutePath()
        }
        try {
            if path.contains("/") {
                return Maybe<File>.SUCCESS(directory.absolute().resolve(name))
            }
            return Maybe<File>.SUCCESS(System.workingDirectory().absolute().resolve(path))
        }
        fail(error) {
            return Maybe<File>.ERROR(error)
        }
    }

    @private
    @class
    function normalize(path:String):String? {
        var result := path
        -- coalesce multiple repeated '/'s into a single '/'
        result := result.replace(/\/+/, "/")
        if result = "/" {
            return result
        }
        -- remove trailing '/' or '/.'
        while result.endsWith("/") | result.endsWith("/.") {
            result := result[..result.lastIndexOf("/")]
        }
        def absolute := result.startsWith("/")
        if absolute {
            result := result[1..]
        }
        -- collapse "foo/../bar" to just "bar"
        def components := result.split("/")
        outer: loop {
            for i in 1 .. components.count {
                if components[i] = ".." & components[i - 1] != ".." {
                    components.removeIndex(i)
                    components.removeIndex(i - 1)
                    continue outer
                }
            }
            break
        }
        result := components.join("/")
        if absolute {
            result := "/" + result
            if result.contains("/..") {
                -- uh-oh, we went above root level
                return null
            }
        }
        if result = "" {
            result := "."
        }
        return result
    }

    function get_directory():File? {
        def n := normalize(path)
        if n = "/" | n = "." | n.endsWith("..") {
            return null
        }
        if !n.contains("/") {
            return File(".")
        }
        def result := normalize(resolve("..").path)
        if result == null {
            return null
        }
        return File(result)
    }

    function parent():File? {
        try {
            if path.contains("/") {
                return directory
            }
            return absolute().directory
        }
        fail(error) {
            return null
        }
    }

    function get_name():String {
        def index := path.lastIndexOf("/")
        if index !== null {
            return path[path.next(index)..]
        }
        else {
            return path
        }
    }

    function get_simpleName():String {
        def result := name
        def index := result.lastIndexOf(".")
        if index == null {
            return result
        }
        return result[..index]
    }

    ================================================================================================
    Removes the extension (including the period) from this path and replaces it with a new
    extension. This does not alter the file on disk; it merely performs string manipulation to
    compute a new path. The new extension does not have to contain a period; it is possible to turn
    a path with an extension into one without using this method. It is a safety violation to call
    this on a path which does not have a filename (e.g. `"/"` or `".."`).

    Examples:

        -- testcase FileWithExtension
        File("/tmp/foo.gif").withExtension(".png") => /tmp/foo.png
        File("/tmp/foo").withExtension(".png") => /tmp/foo.png
        File("/tmp/foo.gif").withExtension("") => /tmp/foo
        File("/tmp/foo.tar.gz").withExtension("") => /tmp/foo.tar

    @param ext the new extension
    @returns the path with a new extension
    ================================================================================================
    function withExtension(ext:String):File {
        return directory!.resolve(simpleName + ext)
    }

    ================================================================================================
    Returns `true` if this file exists. A return value of `false` indicates either that the path
    does not exist or that an error occurred while trying to query the filesystem.

    @returns `true` if this file exists
    ================================================================================================
    @external(frostFileExists)
    method exists():Bit

    ================================================================================================
    Returns `true` if this path represents a directory. A return value of `false` indicates either
    that the path does not exist, is not a directory, or that an error occurred while trying to
    query the filesystem.

    @returns `true` if this is a directory
    ================================================================================================
    @external(frostFileIsDirectory)
    method isDirectory():Bit

    ================================================================================================
    Returns a list of files contained by this directory, or an `Error` if the path could not be
    listed.
    ================================================================================================
    @external(frostFileList)
    method list():Maybe<ListView<File>>

    ================================================================================================
    Creates a directory at this path. It is not an error to attempt to create a directory which
    already exists.
    ================================================================================================
    @external(frostFileCreateDirectory)
    method createDirectory():Error?

    ================================================================================================
    Creates a directory at this path, including all required parent directories. It is not an error
    to attempt to create a directory which already exists.
    ================================================================================================
    method createDirectories():Error? {
        try {
            def p := parent()
            if p !== null {
                p.createDirectories()
            }
            createDirectory()
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Returns an `InputStream` for reading this file.

    @returns an `InputStream`
    ================================================================================================
    @external(frostFileOpenInputStream)
    method openInputStream():Maybe<InputStream>

    ================================================================================================
    Destroys any existing contents of this file and returns an `OutputStream` for writing it. If the
    file does not already exist, it is created.

    @returns an `OutputStream`
    ================================================================================================
    @external(frostFileOpenOutputStream)
    method openOutputStream():Maybe<OutputStream>

    ================================================================================================
    Returns an `OutputStream` for writing to the end of this file. If the file does not already
    exist, it is created.

    @returns an `OutputStream`
    ================================================================================================
    @external(frostFileOpenForAppend)
    method openForAppend():Maybe<OutputStream>

    ================================================================================================
    Reads the entire contents of the file into memory as a `String` and returns it. Naturally, you
    should be careful to only call `readFully()` for files which comfortably fit into memory.

    @returns the contents of the file
    ================================================================================================
    @priority(1)
    method readFully():Maybe<String> {
        try {
            return Maybe<String>.SUCCESS(openInputStream().readFully())
        }
        fail(error) {
            return Maybe<String>.ERROR(error)
        }
    }

    ================================================================================================
    Reads the entire contents of the file into memory as an `Array<UInt8>` and returns it.
    Naturally, you should be careful to only call `readFully()` for files which comfortably fit into
    memory.

    @returns the contents of the file
    ================================================================================================
    method readFully():Maybe<Array<UInt8>> {
        try {
            return Maybe<Array<UInt8>>.SUCCESS(openInputStream().readFully())
        }
        fail(error) {
            return Maybe<Array<UInt8>>.ERROR(error)
        }
    }

    ================================================================================================
    Writes a string to this path. If the file already exists, its contents are replaced. If it does
    not exist, it is created.

    @param contents the data to write
    ================================================================================================
    method write(contents:String):Error? {
        try {
            openOutputStream().print(contents)
            return null
        }
        fail(error) {
            return error
        }
    }

    ================================================================================================
    Attempts to rename the file to a different path. The rules about when files can be renamed and
    to which paths depend upon the operating environment, but generally speaking the source and
    destination paths must be on the same filesystem for this operation to succeed. Returns an
    [Error] if the file could not be renamed.
    ================================================================================================
    @external(frostFileRename)
    method rename(path:File):Error?

    ================================================================================================
    Attempts to delete the file. If the file is a directory, it must be empty or the operation will
    fail. Returns an [Error] if the file could not be deleted.
    ================================================================================================
    @external(frostFileDelete)
    method delete():Error?

    ================================================================================================
    Returns `true` if both files refer to the same path. Note that two files can refer to the same
    physical file on disk without being the same path (e.g. `File("src/Foo.frost")` and
    `File("src/../src/Foo.frost")`); these are considered not equal despite resolving to the same
    physical file.

    @returns true if the files refer to the same path
    ================================================================================================
    @override
    function =(other:File):Bit {
        return path = other.path
    }

    @override
    function get_hash():Int {
        return path.hash
    }

    ================================================================================================
    Returns the path to which this file refers.
    ================================================================================================
    @override
    function get_toString():String {
        return path
    }
}