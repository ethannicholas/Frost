package frost.json

====================================================================================================
A node in a JSON parse tree.

@hidden
====================================================================================================
choice JSON {
    ================================================================================================
    An `Int` node.
    ================================================================================================
    INT(Int)

    ================================================================================================
    A `Real` node.
    ================================================================================================
    REAL(Real64)

    ================================================================================================
    A `String` node.
    ================================================================================================
    STRING(String)

    ================================================================================================
    A `Bit` node.
    ================================================================================================
    BIT(Bit)

    ================================================================================================
    A map node.
    ================================================================================================
    MAP(MapView<String, JSON>)

    ================================================================================================
    A list node.
    ================================================================================================
    LIST(ListView<JSON>)

    ================================================================================================
    A `null` node.
    ================================================================================================
    NULL

    @private
    choice PathKey {
        FIELD(String, String.Index) -- FIXME pull the String.Index out of here and return a (PathKey, String.Index) from nextPathKey()
        INDEX(Int, String.Index)
    }

    @private
    @class
    function nextPathKey(path:String, start:String.Index):PathKey? {
        match path[start] {
            when "/" {
                def end := path.end
                def fieldStart := path.next(start)
                var index := fieldStart
                do {
                    var c := path[index]
                    if c = "/" | c = "[" {
                        break
                    }
                    index := path.next(index)
                }
                while index != end
                if fieldStart = index {
                    return null
                }
                return PathKey.FIELD(path.substring(fieldStart .. index), index)
            }
            when "[" {
                def indexStart := path.next(start)
                var index := indexStart
                while path[index] != "]" {
                    index := path.next(index)
                }
                def parsed := path.substring(indexStart .. index).asInt
                if parsed == null {
                    return null
                }
                return PathKey.INDEX(parsed, path.next(index))
            }
            otherwise {
                return null
            }
        }
    }

    ================================================================================================
    Returns a node from the JSON subtree represented by this node by following a path specification.
    The path of this node (the root of its subtree) is the empty string (`""`). Maps are indexed
    by a slash followed by the name of a field, such as `"/customer"`. Lists are index by bracketed
    integers, such as `[0]`. These rules may be combined to produce complex paths such as
    "/customer/address[0]/zipCode".

    If the specified node does not exist or cannot be resolved (for instance, by trying to index
    into a node which is not a list), `null` is returned. Note that a `null` node in the JSON file
    is represented by `JSON.NULL`, so successfully retrieving a `null` JSON node will result in a
    *non-null* `JSON.NULL` return. An invalid path (due to mismatched brackets, non-numeric list
    indices, etc.) will cause a precondition failure.
    ================================================================================================
    -- FIXME @pre(valid(path))
    function get(path:String):JSON? {
        var index := path.start
        var end := path.end
        var current:JSON? := self
        while index != end {
            assert nextPathKey(path, index) !== null, "invalid JSON path '\{path}'"
            match nextPathKey(path, index) {
                when PathKey.FIELD(field, next) {
                    match current {
                        when MAP(fields) {
                            current := fields[field]
                            if current == null {
                                return null
                            }
                        }
                        otherwise {
                            return null
                        }
                    }
                    index := next
                }
                when PathKey.INDEX(key, next) {
                    match current {
                        when LIST(nodes) {
                            current := nodes[key]
                        }
                        otherwise {
                            return null
                        }
                    }
                    index := next
                }
            }
        }
        return current
    }

    ================================================================================================
    As [get(String)], but returns the node as an `Int64`.
    ================================================================================================
    function getInt(path:String):Int64? {
        def result := get(path)
        if result == null {
            return null
        }
        match result {
            when INT(value) {
                return value
            }
            otherwise {
                return null
            }
        }
    }

    ================================================================================================
    As [get(String)], but returns the node as a `Real64`.
    ================================================================================================
    function getReal(path:String):Real64? {
        def result := get(path)
        if result == null {
            return null
        }
        match result {
            when REAL(value) {
                return value
            }
            otherwise {
                return null
            }
        }
    }

    ================================================================================================
    As [get(String)], but returns the node as a `Bit`.
    ================================================================================================
    function getBit(path:String):Bit? {
        def result := get(path)
        if result == null {
            return null
        }
        match result {
            when BIT(value) {
                return value
            }
            otherwise {
                return null
            }
        }
    }

    ================================================================================================
    As [get(String)], but returns the node as a `String`.
    ================================================================================================
    function getString(path:String):String? {
        def result := get(path)
        if result == null {
            return null
        }
        match result {
            when STRING(value) {
                return value
            }
            otherwise {
                return null
            }
        }
    }

    ================================================================================================
    As [get(String)], but returns the node as a list (`ListView<Node>`).
    ================================================================================================
    function getList(path:String):ListView<JSON>? {
        def result := get(path)
        if result == null {
            return null
        }
        match result {
            when LIST(value) {
                return value
            }
            otherwise {
                return null
            }
        }
    }

    ================================================================================================
    As [get(String)], but returns the node as a map (`MapView<String, JSON>`).
    ================================================================================================
    function getMap(path:String):MapView<String, JSON>? {
        def result := get(path)
        if result == null {
            return null
        }
        match result {
            when MAP(value) {
                return value
            }
            otherwise {
                return null
            }
        }
    }

    ================================================================================================
    Returns the value of this `INT` node.
    ================================================================================================
    property asInt:Int64
    function get_asInt():Int64 {
        match self {
            when INT(value) {
                return value
            }
            otherwise {
                unreachable
            }
        }
    }

    ================================================================================================
    Returns the value of this `REAL` node.
    ================================================================================================
    property asReal:Real64
    function get_asReal():Real64 {
        match self {
            when REAL(value) {
                return value
            }
            otherwise {
                unreachable
            }
        }
    }

    ================================================================================================
    Returns the value of this `BIT` node.
    ================================================================================================
    property asBit:Bit
    function get_asBit():Bit {
        match self {
            when BIT(value) {
                return value
            }
            otherwise {
                unreachable
            }
        }
    }

    ================================================================================================
    Returns the value of this `MAP` node.
    ================================================================================================
    property asMap:MapView<String, JSON>
    function get_asMap():MapView<String, JSON> {
        match self {
            when MAP(value) {
                return value
            }
            otherwise {
                unreachable
            }
        }
    }

    ================================================================================================
    Returns the value of this `LIST` node.
    ================================================================================================
    property asListView:ListView<JSON>
    function get_asListView():ListView<JSON> {
        match self {
            when LIST(value) {
                return value
            }
            otherwise {
                unreachable
            }
        }
    }

    ================================================================================================
    Returns a JSON string representing this node.
    ================================================================================================
    @override
    function get_toString():String {
        match self {
            when INT(value) {
                return value.toString
            }
            when REAL(value) {
                return value.toString
            }
            when STRING(value) {
                return value.format("frost")
            }
            when BIT(value) {
                return value.toString
            }
            when MAP(fields) {
                def result := MutableString("{")
                var separator := " "
                for k in fields.keys { -- FIXME iterate over tuples
                    result.append("\{separator}\{k:frost}: \{fields[k]}")
                    separator := ", "
                }
                result.append(" }")
                return result.finish()
            }
            when LIST(nodes) {
                def result := MutableString("[")
                var separator := ""
                for n in nodes {
                    result.append("\{separator}\{n}")
                    separator := ", "
                }
                result.append("]")
                return result.finish()
            }
            when NULL {
                return "null"
            }
            otherwise {
                unreachable
            }
        }
    }
}
