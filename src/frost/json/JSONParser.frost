package frost.json

uses org.frostlang.json.Lexer
uses org.frostlang.json.Token

====================================================================================================
Simple JSON parser. Note that this parser is incomplete - in particular it does not handle string
escape sequences correctly.

FIXME error handling
====================================================================================================
class JSONParser {
    @private
    var source := "<error>"

    @private
    def lexer := Lexer()

    @private
    def pushbackToken:Token? := null

    ================================================================================================
    Parses a JSON string.

    @returns the JSON node the string contains, or `null` if it could not be parsed
    ================================================================================================
    method parse(json:String):JSON? {
        source := json
        lexer.start(json)
        return node()
    }

    @private
    method next():Token {
        if pushbackToken !== null {
            def result := pushbackToken
            pushbackToken := null
            return result
        }
        var result:Token := lexer.next()
        while result.kind = Token.Kind.WS {
            result := lexer.next()
        }
        return result
    }

    @private
    method pushback(token:Token) {
        assert pushbackToken == null
        pushbackToken := token
    }

    @private
    method peek():Token {
        def result := next()
        pushback(result)
        return result
    }

    @private
    method checkNext(kind:Token.Kind):Token? {
        def token := next()
        if token.kind = kind {
            return token
        }
        pushback(token)
        return null
    }

    @private
    function text(token:Token):String {
        return source.substring(token.start .. token.end)
    }

    @private
    method list():JSON {
        if checkNext(Token.Kind.RBRACKET) !== null {
            return JSON.LIST([])
        }
        def result := Array<JSON>()
        loop {
            result.add(node())
            match next().kind {
                when Token.Kind.RBRACKET {
                    return JSON.LIST(result)
                }
                when Token.Kind.COMMA {
                    continue
                }
                otherwise {
                    unreachable, "expected end of list"
                }
            }
        }
    }

    @private
    method map():JSON {
        if checkNext(Token.Kind.RBRACE) !== null {
            return JSON.MAP(HashMap<String, JSON>())
        }
        def result := HashMap<String, JSON>()
        loop {
            def key := string()
            def colon := next()
            if colon.kind != Token.Kind.COLON {
                unreachable, "expected ':'"
            }
            result[key] := node()
            match next().kind {
                when Token.Kind.RBRACE {
                    return JSON.MAP(result)
                }
                when Token.Kind.COMMA {
                    continue
                }
                otherwise {
                    unreachable, "expected end of map"
                }
            }
        }
    }

    @private
    method string():String {
        def token := next()
        if token.kind != Token.Kind.STRING {
            unreachable, "expected string, but found '\{text(token)}'"
        }
        def s := text(token)
        return s.substring(s.next(s.start) .. s.previous(s.end))
    }

    @private
    method node():JSON {
        def token := next()
        match token.kind {
            when Token.Kind.LBRACE {
                return map()
            }
            when Token.Kind.LBRACKET {
                return list()
            }
            when Token.Kind.STRING {
                def s := text(token)
                return JSON.STRING(s.substring(s.next(s.start) .. s.previous(s.end)))
            }
            when Token.Kind.INT {
                return JSON.INT(text(token).asInt64)
            }
            when Token.Kind.REAL {
                return JSON.REAL(text(token).asReal64)
            }
            when Token.Kind.TRUE {
                return JSON.BIT(true)
            }
            when Token.Kind.FALSE {
                return JSON.BIT(false)
            }
            when Token.Kind.NULL {
                return JSON.NULL
            }
            otherwise {
                unreachable
            }
        }
    }
}