package frost.time

====================================================================================================
A high-resolution timer which measures time either from the epoch (midnight UTC on January 1st,
1970) or between two events.
====================================================================================================
class Timer {
    @private
    def native:Int64

    @private
    var basis:Real64 := 0

    ================================================================================================
    Creates a `Timer` which initially measures time relative to the epoch.
    ================================================================================================
    init() {
        setup()
    }

    @override
    method cleanup() {
        destroy()
    }

    @private
    @external(frostTimerSetup)
    method setup()

    @private
    @external(frostTimerDestroy)
    method destroy()

    ================================================================================================
    Reports the time elapsed in seconds. If this timer has been [reset()], reports the number of
    seconds since the last `reset`, otherwise reports the number of seconds since the epoch.
    ================================================================================================
    method elapsed():Real64 {
        return Real64(now()) - basis
    }

    @private
    @external(frostTimerNow)
    method now():builtin_float64

    ================================================================================================
    Resets the timer so that subsequent calls to [elapsed()] will be relative to this point in time.
    ================================================================================================
    method reset() {
        basis := now()
    }
}