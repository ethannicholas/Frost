package frost.threads

====================================================================================================
An object which holds onto a [Lock] as long as the `ScopedLock` itself continues to exist.
`ScopedLock` is typically assigned to a local variable, which will cause it to remain in memory
until the local variable goes out of scope. For example:

    method process() {
        def scope := ScopedLock(lock)
        ...
        -- lock is automatically released at this point
    }
====================================================================================================
@final
class ScopedLock : Immutable {
    @private
    def lock:Lock

    init(lock:Lock) {
        self.lock := lock
        lock.lock()
    }

    @override
    method cleanup() {
        lock.unlock()
    }
}