package org.pandalanguage.plex.runtime

uses panda.unsafe.Pointer

class DFA {
    constant START_CHAR:Int8 := 9
    constant END_CHAR:Int8 := 127

    def stateCount:Int

    def transitions:Pointer<Pointer<Int>>

    def acceptCount:Int

    def accepts:Pointer<Int>

    var rawToken := RawToken()

    var pushback := PushbackInputStream(MemoryInputStream("this is a test (there's nothing here)"))

    var source:LineNumberInputStream := LineNumberInputStream(pushback)

    var text := MutableString()

    var line := 1

    var column := 1

    init(stateCount:Int, transitions:Pointer<Pointer<Int>>, acceptCount:Int,
            accepts:Pointer<Int>) {
        init(MemoryInputStream(""), stateCount, transitions, acceptCount, accepts)
    }

    init(input:InputStream, stateCount:Int, transitions:Pointer<Pointer<Int>>, acceptCount:Int,
            accepts:Pointer<Int>) {
        pushback := PushbackInputStream(input)
        source := LineNumberInputStream(pushback)
        self.stateCount := stateCount
        self.transitions := transitions
        self.acceptCount := acceptCount
        self.accepts := accepts
    }

    method next():RawToken {
        var currentState := 1
        var hitEOF := false
        rawToken.startLine := source.line
        rawToken.startColumn := source.column
        var lastLine := -1
        var lastColumn := -1
        var lastAccept := -1
        var lastAcceptPosition := -1
        loop {
            def c:Char8? := source.read()
            if c = null {
                hitEOF := true
                break
            }
            if c.convert() > END_CHAR {
                Console.printLine("invalid token (\{c.convert()->Int8} > " +
                        "\{stateCount}) at \{source.line}, \{source.column}")
                System.exit(1)
            }
            currentState := transitions[c.convert()][currentState]
            if currentState != 0 {
                text.append(c)
                var newAccept := accepts[currentState]
                if newAccept != -1 {
                    lastAccept := newAccept
                    lastAcceptPosition := text.length
                    lastLine := source.line
                    lastColumn := source.column
                }
            }
            else {
                pushback.pushback(c)
                break
            }
        }
        if text.length > 0 {
            if lastAccept != -1 {
                def s := text.convert()->String
                def index := s.offset(s.start(), lastAcceptPosition)
                pushback.pushback(s[index..])
                source.line := lastLine
                source.column := lastColumn
                rawToken.kind := lastAccept
                rawToken.text := s[..index]
                text.clear()
                return rawToken
            }
        }
        else if hitEOF {
            rawToken.kind := 0
            rawToken.text := "<EOF>"
            return rawToken
        }
        Console.printLine("invalid token at \{rawToken.startLine}:\{rawToken.startColumn}")
        System.exit(1)
    }
}