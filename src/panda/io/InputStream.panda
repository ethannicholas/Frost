package panda.io

uses panda.unsafe.Pointer

@abstract
class InputStream {
    @private
    class LineIterator : Iterator<String> {
        def input:InputStream
        var _next:String?

        init(input:InputStream) {
            self.input := input
            readNext()
        }

        @override
        function get_done():Bit {
            return _next = null
        }

        @override
        method next():String {
            assert _next != null
            def result := _next
            readNext()
            return result
        }

        method readNext() {
            _next := input.readLine()
        }
    }

    @abstract
    method read():UInt8?

    method read(buffer:Pointer<UInt8>, max:Int):Int {
        var i := 0
        while i < max {
            def next:UInt8? := read()
            if next = null {
                break
            }
            buffer[i] := next
            i += 1
        }
        return i
    }

    @final
    method read(buffer:Pointer<Int8>, max:Int):Int {
        return read(buffer->Pointer<UInt8>, max)
    }

    @final
    method read(buffer:Pointer<Char8>, max:Int):Int {
        return read(buffer->Pointer<UInt8>, max)
    }

    method readFully():String {
        constant BUFFER_SIZE := 2048
        def result := MutableString()
        def buffer := Pointer<Int8>.alloc(BUFFER_SIZE)
        loop {
            def count := read(buffer, BUFFER_SIZE)
            if count <= 0 {
                break
            }
            result.append(buffer->Pointer<Char8>, 0, count)
        }
        buffer.destroy()
        return result.finish()
    }

    method read():Int16? {
        def a:UInt8? := read()
        if a = null {
            return null
        }
        def b:UInt8? := read()
        if b = null {
            return null
        }
        return (a << 8 + b).convert()
    }

    method read():Int32? {
        def a:Int16? := read()
        if a = null {
            return null
        }
        def b:Int16? := read()
        if b = null {
            return null
        }
        return a << 16 + b
    }

    method read():Int64? {
        def a:Int32? := read()
        if a = null {
            return null
        }
        def b:Int32? := read()
        if b = null {
            return null
        }
        return Int64(a.value->builtin_int64) << 32 + b
    }

    method read():Char8? {
        def result:UInt8? := read()
        if result != null {
            return Char8(result)
        }
        return null
    }

    method readLine():String? {
        def result := MutableString()
        loop {
            def c:Char8? := read()
            if c = null {
                if result.length = 0 {
                    return null
                }
                break
            }
            if c = Char8(10) {
                break
            }
            result.append(c)
        }
        return result.finish()
    }

    function lines():Iterator<String> {
        return LineIterator(self)
    }
}