package panda.io

uses panda.unsafe.Pointer

@abstract
class OutputStream {
    @abstract
    method write(value:UInt8)

    @final
    method write(value:Int8) {
        write(value.convert()->UInt8)
    }

    method write(ptr:Pointer<UInt8>, count:Int) {
        for i in 0 .. count {
            write(ptr[i])
        }
    }

    @final
    method write(ptr:Pointer<Int8>, count:Int) {
        write(ptr->Pointer<UInt8>, count)
    }

    @final
    method write(ptr:Pointer<Char8>, count:Int) {
        write(ptr->Pointer<UInt8>, count)
    }

    @final
    method write(a:Array<UInt8>, count:Int) {
        write(a.data, count)
    }

    @final
    method write(a:Array<Int8>, count:Int) {
        write(a.data, count)
    }

    @final
    method write(a:Array<Char8>, count:Int) {
        write(a.data, count)
    }

    method write(value:UInt16) {
        write((value >> 8).convert()->UInt8)
        write(value.convert()->UInt8)
    }

    method write(value:Int16) {
        write(value.convert()->UInt16)
    }

    method write(value:UInt32) {
        write((value >> 16).convert()->UInt16)
        write(value.convert()->UInt16)
    }

    method write(value:Int32) {
        write(value.convert()->UInt32)
    }

    method write(value:UInt64) {
        write((value >> 32).convert()->UInt32)
        write(value.convert()->UInt32)
    }

    method write(value:Int64) {
        write(value.convert()->UInt64)
    }

    method write(c:Char8) {
        write(c.value)
    }

    method print(o:Object) {
        print(o.convert())
    }

    method print(s:String) {
        write(s.data, s._length)
    }

    method printLine() {
        write(Char8(10))
    }

    method printLine(o:Object) {
        printLine(o.convert())
    }

    method printLine(s:String) {
        print(s)
        printLine()
    }

    ================================================================================================
    Flushes any buffers associated with this stream. `OutputStream` does not itself perform any
    buffering, so the base implementation of this method does nothing, but subclasses which buffer
    their output should override this.
    ================================================================================================
    method flush() {
    }
}