package panda.io

@final
class File {
    @private
    def path:String

    init(path:String) {
        self.path := path
    }

    function resolve(path:String):File {
        if path.startsWith("/") {
            return File(path)
        }
        return File(self.path + "/" + path)
    }

    function lines():Iterator<String> {
        return openInputStream().lines()
    }

    @private
    @external
    method absolutePath():String

    ============================================================================
    Returns a `File` representing the absolute path of this file.

    @returns the file's absolute path
    ============================================================================
    method absolute():File {
        return File(absolutePath())
    }

    ============================================================================
    Returns the directory containing this file, or `null` if the file does not
    have a parent.

    @returns the path to the file
    ============================================================================
    method parent():File? {
        if path = "/" {
            return null
        }
        def index := path.lastIndexOf("/")
        if index != null {
            return File(path[..index])
        }
        else {
            return absolute().parent()
        }
    }

    function name():String {
        def index := path.lastIndexOf("/")
        if index != null {
            return path[path.next(index)..]
        }
        else {
            return path
        }
    }

    ============================================================================
    Returns `true` if this file exists.

    @returns `true` if this file exists
    ============================================================================
    @external
    method exists():Bit

    ============================================================================
    Creates a directory at this path. It is not an error to attempt to create a
    directory which already exists.
    ============================================================================
    @external
    method createDirectory()

    ============================================================================
    Creates a directory at this path, including all required parent directories.
    It is not an error to attempt to create a directory which already exists.
    ============================================================================
    method createDirectories() {
        def p := parent()
        if p != null & !p.exists() {
            p.createDirectories()
        }
        createDirectory()
    }

    @external
    method openInputStream():InputStream

    @external
    method openOutputStream():OutputStream

    method readFully():String {
        return openInputStream().readFully()
    }

    ============================================================================
    Deletes the file. If the file is a directory, it must be empty or FIXME
    some sort of error will be produced just as soon as I figure out how we're
    handling errors.
    ============================================================================
    @external
    method delete()

    @override
    function convert():String {
        return path
    }
}