package panda.io

@final
class File : Immutable, Key<File> {
    @private
    def path:String

    init(path:String) {
        self.path := path
    }

    function resolve(path:String):File {
        if path.startsWith("/") {
            return File(path)
        }
        return File(self.path + "/" + path)
    }

    function lines():Iterator<String> {
        return openInputStream().lines()
    }

    @private
    @external
    method absolutePath():String

    ================================================================================================
    Returns a `File` representing the absolute path of this file.

    @returns the file's absolute path
    ================================================================================================
    method absolute():File {
        return File(absolutePath())
    }

    ================================================================================================
    Returns the directory containing this file, or `null` if the file does not have a parent.

    @returns the path to the file
    ================================================================================================
    method parent():File? {
        if path = "/" {
            return null
        }
        if path = "" {
            return File(".").parent()
        }
        def index := path.lastIndexOf("/")
        if index != null {
            return File(path[..index])
        }
        else {
            return absolute().parent()
        }
    }

    function name():String {
        def index := path.lastIndexOf("/")
        if index != null {
            return path[path.next(index)..]
        }
        else {
            return path
        }
    }

    ================================================================================================
    Returns the name of this file without its extension. The file's extension is considered to start
    at the last period (`'.'`) it contains, so `File("/tmp/foo.bar.baz").simpleName()` returns the
    path `"foo.bar"`. If the filename does not contain a period, this call is equivalen to `name()`.
    ================================================================================================
    function simpleName():String {
        def result := name()
        def index := result.lastIndexOf(".")
        if index = null {
            return result
        }
        return result[..index]
    }

    ================================================================================================
    Removes the extension from this path and replaces it with a new extension. This does not alter
    the file on disk; it merely performs string manipulation to compute a new path. The new
    extension does not have to contain a period; it is possible to turn a path with an extension
    into one without using this method.

    Examples:

        File("/tmp/foo.gif").changeExtension(".png") => /tmp/foo.png
        File("/tmp/foo").changeExtension(".png") => /tmp/foo.png
        File("/tmp/foo.gif").changeExtension("") => /tmp/foo
    ================================================================================================
    function changeExtension(ext:String):File {
        return parent().resolve(simpleName() + ext)
    }

    ================================================================================================
    Returns `true` if this file exists.

    @returns `true` if this file exists
    ================================================================================================
    @external
    method exists():Bit

    @external
    method isDirectory():Bit

    @external
    method list():ListView<File>

    ================================================================================================
    Creates a directory at this path. It is not an error to attempt to create a directory which
    already exists.
    ================================================================================================
    @external
    method createDirectory()

    ================================================================================================
    Creates a directory at this path, including all required parent directories. It is not an error
    to attempt to create a directory which already exists.
    ================================================================================================
    method createDirectories() {
        def p := parent()
        if p != null & !p.exists() {
            p.createDirectories()
        }
        createDirectory()
    }

    @external
    method openInputStream():InputStream

    @external
    method openOutputStream():OutputStream

    @external
    method openForAppend():OutputStream

    method readFully():String {
        return openInputStream().readFully()
    }

    method write(contents:String) {
        openOutputStream().print(contents)
    }

    ================================================================================================
    Deletes the file. If the file is a directory, it must be empty or FIXME some sort of error will
    be produced just as soon as I figure out how we're handling errors.
    ================================================================================================
    @external
    method delete()

    ================================================================================================
    Returns `true` if both files represent the same path. Note that two files can refer to the same
    physical file on disk without being the same path (e.g. `File("src/Foo.panda")` and
    `File("src/../src/Foo.panda")`); these are considered not equal despite resolving to the same
    physical file.

    @returns true if the files refer to the same path
    ================================================================================================
    @override
    function =(other:File):Bit {
        return path = other.path
    }

    @override
    function !=(other:File):Bit {
        return path != other.path
    }

    @override
    function hash():Int {
        return path.hash()
    }

    ================================================================================================
    Returns the path to which this file refers.
    ================================================================================================
    @override
    function convert():String {
        return path
    }
}