package panda.io

uses panda.unsafe.Pointer

====================================================================================================
An output stream which indents the lines it writes. `IndentedOutputStream` sits "on top of" another
stream, directing its output to the underlying stream.
====================================================================================================
class IndentedOutputStream : OutputStream {
    ================================================================================================
    The current indentation level, in units of `indentSize`. Each line written to the underlying
    stream will be prefixed by `indentSize * level` spaces.
    ================================================================================================
    var level := 0 -- FIXME make these properties and store the indentation string

    ================================================================================================
    The number of spaces represented by each increment of `level`.
    ================================================================================================
    var indentSize := 4

    @private
    var atLineStart := true

    @private
    def out:OutputStream

    ================================================================================================
    Creates a new `IndentedOutputStream`.

    @param out the underlying output stream
    ================================================================================================
    init(out:OutputStream) {
        self.out := out
    }

    @override
    method write(b:UInt8) {
        if b = 10 {
            atLineStart := true
        }
        else {
            indentIfNeeded()
        }
        out.write(b)
    }

    @override
    method write(ptr:Pointer<UInt8>, offset:Int, count:Int) {
        var start := offset
        var current := start
        while current < offset + count {
            if ptr[current] = 10 {
                out.write(ptr, start, current - start)
                start := current
                atLineStart := true
            }
            else if atLineStart {
                out.write(ptr, start, current - start)
                start := current
                indentIfNeeded()
            }
            current += 1
        }
        out.write(ptr, start, current - start)
    }
    
    @private
    method indentIfNeeded() {
        if atLineStart {
            atLineStart := false
            print(" " * (indentSize * level))
        }
    }
}