package panda.collections

@final
class Stack<T> (Iterable<T>) {
    @private
    class StackIterator<T> (Iterator<T>) {
        def stack:Stack<T>

        var index := 0

        init(stack:Stack<T>) {
            self.stack := stack
        }

        @override
        function get_done():Bit {
            return index >= stack.get_count()
        }

        @override
        method next():T {
            def result := stack.peek(index)
            index += 1
            return result
        }
    }

    @private
    def contents := Array<T>()

    method push(v:T) {
        contents.add(v)
    }

    method pop():T {
        assert contents.get_count() > 0
        def result := contents[contents.count - 1]
        contents.removeIndex(contents.count - 1)
        return result
    }

    function peek():T {
        assert contents.get_count() > 0
        return contents[contents.count - 1]
    }

    function peek(depth:Int):T {
        assert contents.get_count() > depth
        return contents[contents.count - 1 - depth]
    }

    @override
    function iterator():Iterator<T> {
        return StackIterator<T>(self)
    }

    function get_count():Int {
        return contents.count
    }

    @override
    function convert():String {
        return contents.convert()
    }
}