package panda.collections

uses panda.unsafe.Pointer

class ImmutableArray<T> (ListView<T>) {
    class ImmutableArrayIterator<T> (Iterator<T>) {
        var array:ImmutableArray<T>

        var index := 0

        init(array:ImmutableArray<T>) {
            self.array := array
        }

        @override
        function get_done():Bit {
            return index = array.count
        }

        @override
        function next():T {
            index += 1
            return array[index - 1]
        }
    }

    @private
    def count:Int

    @private
    def data:Pointer<T>

    init() {
        self.count := 0
    }

    init(data:ListView<T>) {
        self.count := data.get_count()
        self.data := Pointer<T>.alloc(count)
        for i in 0 .. count {
            self.data[i] := data[i]
        }
    }

    @override
    method cleanup() {
        data.destroy()
    }

    @override
    function [](index:Int):T {
        return data[index]
    }

    @override
    function get_count():Int {
        return count
    }

    ================================================================================================
    Returns a slice of the array, containing all of the elements specified by the range.
    ================================================================================================
    function [](r:Range<Int?>):ImmutableArray<T> {
        def step := r.step

        def current:Int
        if r.start != null {
            current := r.start
        }
        else if step > 0 {
            current := 0
        }
        else {
            current := get_count() - 1
        }

        def end:Int
        if r.end != null {
            end := r.end
        }
        else if step > 0 {
            end := get_count()
        }
        else {
            end := 0
        }

        def result := Array<T>()
        if r.step > 0 {
            while current < end {
                result.add(self[current])
                current += step
            }
        }
        else {
            assert r.step < 0
            while current > end {
                result.add(self[current])
                current -= step
            }
        }
        if (r.inclusive | r.end = null) & current = end & end < get_count() {
            result.add(self[current])
        }
        return ImmutableArray<T>(result)
    }

    @override
    function iterator():Iterator<T> {
        return ImmutableArrayIterator<T>(self)
    }

    @override
    function convert():String {
        def result := MutableString()
        result.append("[")
        var separator := ""
        for v in self {
            result.append(separator)
            separator := ", "
            result.append(v)
        }
        result.append("]")
        return result.convert()
    }
}
