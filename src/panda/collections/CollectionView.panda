package panda.collections

====================================================================================================
A read-only view of a collection of elements. A `CollectionView`'s elements are accessed via its
[iterator()].

@see CollectionWriter
@see Collection
@see ListView
====================================================================================================
interface CollectionView<T> : Iterable<T> {
    property count:Int

    function get_count():Int

    ================================================================================================
    Returns a comma-separated string containing all of the items in this collection, in iteration
    order. Equivalent to `join(", ")`.

    @see join(String)
    ================================================================================================
    function join():String {
        return join(", ")
    }

    ================================================================================================
    Converts all of the items in this collection to strings and concatenates them in iteration
    order, with the given separator between them. For instance, `[1, 2, 3].join("|")` returns
    `"1|2|3"`.

    @param separator the delimiter string
    @see join()
    ================================================================================================    
    function join(separator:String):String {
        if count = 0 {
            return ""
        }
        var first := true
        def result := MutableString()
        for v in self {
            if first {
                first := false
            }
            else {
                result.append(separator)
            }
            if v != null {
                result.append(v)
            }
            else {
                result.append("<null>")
            }
        }
        return result.finish()
    }

    ================================================================================================
    Successively applies a binary function to 'fold' the elements in the list down to a single
    value. For instance, if we have a collection of [Int64]s and fold using the binary function
    [Int64.+(Int64)], as in:

        [1, 2, 3, 4, 5].fold(Int.+)

    this would add the first (in iteration order) and second elements of the collection together,
    and then add the sum of the first to elements to the third, and so forth until all of the
    elements of the collection had been added together. This would result in the sum of all of the
    elements in the collection.

    Similarly, we could fold using [Int64.max(Int64)] to find the biggest number in the list,
    [Int64.*(Int64)] to get the product of all of the numbers in the list, etc.

    If the list has only a single element in the list, the result of `fold` is this single element
    and the function `f` is never called. This variant of `fold` may not be called on an empty list
    because the result would be undefined

    @param f a binary function to combine elements of the collection
    @returns the result of combining the entire collection
    @see fold((T, T)=>(T), T)
    ================================================================================================
    @pre(count > 0)
    function fold(f:(T, T)=>(T)):T {
        def i := iterator()
        var result := i.next()
        while !i.get_done() {
            result := f(result, i.next())
        }
        return result
    }

    ================================================================================================
    As [fold((T, T)=>(T))], but additionally takes a starting value for the fold operation. The
    starting value is folded into the first element of the list, the result is then folded into the
    second element, etc. This allows `fold` to be well-defined even on an empty list: folding an
    empty list simply returns the start value.

    @param f a binary function to combine elements of the collection
    @param start the starting value for the fold
    @see fold((T, T)=>(T))
    ================================================================================================
    function fold(f:(T, T)=>(T), start:T):T {
        var result := start
        for v in self {
            result := f(result, v)
        }
        return result
    }

    ================================================================================================
    Calls the method `m` on each element of the collection in iteration order. For instance, to
    display every element in a collection you could write:

        collection.apply(Console.printLine)

    @param m a method to call on each element
    ================================================================================================
    method apply(m:(T)=&>()) {
        for v in self {
            m(v)
        }
    }
}
