package panda.collections

uses panda.unsafe.Pointer

====================================================================================================
Standard implementation of the [Map] interface, which associates keys with values. An arbitrary
number of values can be stored in a `HashMap` and then retrieved in constant average time:

    def alignment := HashMap<String, String>()
    alignment["faerie"] := "good"
    alignment["orc"]    := "evil"
    alignment["golem"]  := "neutral"
    Console.printLine(alignment["faerie"])

This will display the value `"good"`.
====================================================================================================
@final
class HashMap<K:Key<K>, V> : Map<K, V>, Equatable<Map<K, V>> {
    @private
    class Entry<K:Key<K>, V> {
        ============================================================================================
        The entry's key.
        ============================================================================================
        def key:K

        ============================================================================================
        The entry's value.
        ============================================================================================
        var value:V

        var next:Entry<K, V>?

        @private
        init(key:K, value:V) {
            self.key := key
            self.value := value
        }
    }

    @private
    class EntryIterator<K:Key<K>, V> : Iterator<Entry<K, V>> {
        def map:HashMap<K, V>
        var bucket := 0
        var entry:Entry<K, V>? := null

        init(map:HashMap<K, V>) {
            self.map := map
            while bucket < map.bucketCount & map.contents[bucket] = null {
                bucket += 1
            }
            if bucket < map.bucketCount {
                entry := map.contents[bucket]
            }
        }

        @override
        function get_done():Bit {
            return bucket = map.bucketCount & entry = null
        }

        @override
        method next():Entry<K, V> {
            assert entry != null
            assert bucket < map.bucketCount
            def result := entry
            entry := entry.next
            while entry = null {
                bucket += 1
                if bucket = map.bucketCount {
                    break
                }
                entry := map.contents[bucket]
            }
            return result
        }
    }

    @private
    class KeyIterator<K:Key<K>, V> : Iterator<K> {
        def base:EntryIterator<K, V>

        init(map:HashMap<K, V>) {
            base := EntryIterator<K, V>(map)
        }

        @override
        function get_done():Bit {
            return base.get_done()
        }

        @override
        method next():K {
            return base.next().key
        }
    }

    @private
    class ValueIterator<K:Key<K>, V> : Iterator<V> {
        def base:EntryIterator<K, V>

        init(map:HashMap<K, V>) {
            base := EntryIterator<K, V>(map)
        }

        @override
        function get_done():Bit {
            return base.get_done()
        }

        @override
        method next():V {
            return base.next().value
        }
    }

    @private
    constant DEFAULT_BUCKET_COUNT := 16

    @private
    var _count:Int

    @private
    -- must be a power of 2 (see indexFor)
    var bucketCount:Int

    @private
    var contents:Pointer<Entry<K, V>?>

    @private
    var threshold:Int

    @private
    var changeCount := 0
    
    ================================================================================================
    Creates a new, empty `HashMap`.
    ================================================================================================
    init() {
        changeCount += 1
        _count := 0
        bucketCount := DEFAULT_BUCKET_COUNT
        contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
        for i in 0 .. bucketCount {
            contents[i] := null
        }
        threshold := (bucketCount * 3) // 4
    }

    init(map:MapView<K, V>) {
        init() -- FIXME this should be implied
        -- FIXME inefficient, need to iterate across entries rather than keys
        for k in map.keys() {
            self[k] := map[k]
        }
    }

    ================================================================================================
    Given a key, returns the bucket in which the key's entry should be stored.
    ================================================================================================
    @private
    function indexFor(key:K):Int {
        var h:Int
        if key = null {
            h := 0
        }
        else {
            h := key.hash()
        }
        -- supplemental hash function to defend against poor hash codes, as we do not use a prime
        -- table length
        h ~~= (h >> 20) ~~ (h >> 12) ~~ (h >> 7) ~~ (h >> 4)
        -- the bitwise and below is equivalent to mod if length is a power of 2, which is why we
        -- require that
        h &&= bucketCount - 1
        return h
    }
    
    @override
    function [](key:K):V? {
        def index := indexFor(key)
        var e := contents[index]
        while e != null & e.key != key {
            e := e.next
        }
        if e != null {
            return e.value
        }
        else {
            return null
        }
    }
    
    function contains(key:K):Bit {
        def index := indexFor(key)
        var e := contents[index]
        while e != null & e.key != key {
            e := e.next
        }
        return e != null
    }

    @override
    method []:=(key:K, value:V) {
        changeCount += 1
        def index := indexFor(key)
        var e := contents[index]
        while e != null & e.key != key {
            e := e.next
        }
        if e = null {
            def old := contents[index]
            e := Entry<K, V>(key, value)
            e.next := old
            contents[index] := e
            incrementCount()
        }
        else {
            e.value := value
        }
    }
    
    method remove(key:K) {
        changeCount += 1
        def index := indexFor(key)
        var e := contents[index]
        -- not found
        if e = null {
            return
        }
        -- found in the first slot, need to update the contents array
        if e.key = key {
            contents[index] := e.next
            _count -= 1
            return
        }
        loop {
            def next := e.next
            if next = null {
                -- not found
                return
            }
            if next.key = key {
                -- it's the next slot in the list
                break
            }
            e := next
        }
        -- we are looking at the entry before it, update its next pointer to skip over it
        def next := e.next
        assert next != null
        e.next := next.next
        _count -= 1
    }

    method clear() {
        changeCount += 1
        _count := 0
        contents.destroy()
        bucketCount := DEFAULT_BUCKET_COUNT
        contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
        for i in 0 .. bucketCount {
            contents[i] := null
        }
        threshold := (bucketCount * 3) // 4
    }
    
    @private
    method incrementCount() {
        _count += 1
        if _count >= threshold {
            def oldContents := contents
            def oldBucketCount := bucketCount
            bucketCount *= 2
            contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
            for i in 0 .. bucketCount {
                contents[i] := null
            }
            threshold *= 2
            _count := 0
            for i in 0 .. oldBucketCount {
                var e := oldContents[i]
                while e != null {
                    self[e.key] := e.value
                    e := e.next
                }
            }
        }
    }

    @override
    function keys():Iterator<K> {
        return KeyIterator<K, V>(self)
    }

    @override
    function values():Iterator<V> {
        return ValueIterator<K, V>(self)
    }

    @override
    function get_count():Int {
        return _count
    }

    ================================================================================================
    Returns `true` if `o` is a Map containing the same key/value pairs as this map.

    @param o the object to compare against
    @returns `true` if the two values are equal
    ================================================================================================
    @override
    function =(other:Map<K, V>):Bit {
-*        if count != other.get_count() {
            return false
        }
        for (key, value) in self {
            if value != m[key] {
                return false
            }
        }
        return true*-
        assert false, "HashMap.="
    }

    @override
    function !=(other:Map<K, V>):Bit {
        assert false, "HashMap.!=" -- fixme remove this method when default != is in
    }

    ================================================================================================
    Returns a string representation of the map.

    @param fmt the format string
    @returns a string representation of this object
    ================================================================================================
    @override
    function convert():String {
        def result := MutableString()
        result.append("{")
        var separator := ""
        for i in 0 .. bucketCount {
            var entry := contents[i]
            while entry != null {
                result.append(separator)
                if entry.key != null {
                    result.append(entry.key)
                }
                else {
                    result.append("null")
                }
                result.append(":")
                if entry.value != null {
                    result.append(entry.value)
                }
                else {
                    result.append("null")
                }
                entry := entry.next
                separator := ", "
            }
        }
        result.append("}")
        return result.finish()
    }
}
