package panda.collections

uses panda.core.Pointer

class ArrayIterator<T> (Iterator<T>) {
    var array:Array<T>

    var index := 0

    init(array:Array<T>) {
        self.array := array
    }

    @override
    function get_done():Bit {
        return index = array.count
    }

    @override
    function next():T {
        index += 1
        return array[index - 1]
    }
}

class Array<T> (List<T>) {
    @private
    var count := 0

    @private
    var capacity:Int

    @private
    var data:Pointer<T>

    init() {
        init(16)
    }

    init(capacity:Int) {
        self.capacity := capacity
        data := Pointer<T>.alloc(capacity)
    }

    @override
    method cleanup() {
        data.destroy()
    }

    @override
    function [](index:Int):T {
        return data[index]
    }

    @override
    method []:=(index:Int, value:T) {
        data[index] := value
    }

    @override
    method add(value:T) {
        ensureCapacity(count + 1)
        data[count] := value
        count += 1
    }

    @override
    method addAll(c:CollectionView<T>) {
        ensureCapacity(count + c.get_count())
        for v in c {
            data[count] := v
            count += 1
        }
    }

    method ensureCapacity(newCapacity:Int) {
        if newCapacity <= capacity {
            return
        }
        while capacity < newCapacity {
            capacity *= 2
        }
        data := data.realloc(capacity)
    }

    @override
    function get_count():Int {
        return count
    }

    @override
    method removeIndex(index:Int) {
        for i in index .. count - 1 {
            self[i] := self[i + 1]
        }
        count -= 1
    }

    @override
    method remove(value:T) {
        for i in 0 .. count {
            if self[i] = value {
                removeIndex(i)
                return
            }
        }
    }

    @override
    function iterator():Iterator<T> {
        return ArrayIterator<T>(self)
    }

    @override
    method clear() {
        count := 0
    }

    @override
    function convert():String {
        def result := MutableString()
        result.append("[")
        var separator := ""
        for v in self {
            result.append(separator)
            separator := ", "
            result.append(v)
        }
        result.append("]")
        return result.convert()
    }
}
