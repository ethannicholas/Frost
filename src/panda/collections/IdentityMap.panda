package panda.collections

uses panda.unsafe.Pointer

====================================================================================================
A `Map` which compares its keys using identity (`==`) instead of equality (`=`). Unlike `HashMap`,
which requires its keys to implement the `Key` interface, any type of object may be used as a key.
However, it is important that the key not be a subclass of `Value`, as values do not have
well-defined identities and `IdentityMap` will therefore not function properly with value keys.
====================================================================================================
@final
class IdentityMap<K, V> : Map<K, V>, Equatable<Map<K, V>> {
    @private
    class Entry<K, V> {
        ============================================================================================
        The entry's key.
        ============================================================================================
        def key:K

        ============================================================================================
        The entry's value.
        ============================================================================================
        var value:V
        
        var next:Entry<K, V>?
        
        @private
        init(key:K, value:V) {
            self.key := key
            self.value := value
        }
    }

    @private
    constant DEFAULT_BUCKET_COUNT := 16

    @private
    var _count:Int

    @private
    -- must be a power of 2 (see indexFor)
    var bucketCount:Int

    @private
    var contents:Pointer<Entry<K, V>?>

    @private
    var threshold:Int

    @private
    var changeCount := 0
    
    ================================================================================================
    Creates a new, empty `IdentityMap`.
    ================================================================================================
    init() {
        changeCount += 1
        _count := 0
        bucketCount := DEFAULT_BUCKET_COUNT
        contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
        for i in 0 .. bucketCount {
            contents[i] := null
        }
        threshold := (bucketCount * 3) // 4
    }

    ================================================================================================
    Given a key, returns the bucket in which the key's entry should be stored.
    ================================================================================================
    @private
    function indexFor(key:K):Int {
        return panda.core.Panda.addressOf(key) % bucketCount
    }
    
    @override
    function [](key:K):V? {
        def index := indexFor(key)
        var e := contents[index]
        while e != null & e.key !== key {
            e := e.next
        }
        if e != null {
            return e.value
        }
        else {
            return null
        }
    }
    
    function contains(key:K):Bit {
        def index := indexFor(key)
        var e := contents[index]
        while e != null & e.key !== key {
            e := e.next
        }
        return e != null
    }

    @override
    method []:=(key:K, value:V) {
        changeCount += 1
        def index := indexFor(key)
        var e := contents[index]
        while e != null & e.key !== key {
            e := e.next
        }
        if e = null {
            def old := contents[index]
            e := Entry<K, V>(key, value)
            e.next := old
            contents[index] := e
            incrementCount()
        }
        else {
            e.value := value
        }
    }
    
    method remove(key:K) {
        changeCount += 1
        def index := indexFor(key)
        var e := contents[index]
        -- not found
        if e = null {
            return
        }
        -- found in the first slot, need to update the contents array
        if e.key == key {
            contents[index] := e.next
            _count -= 1
            return
        }
        loop {
            def next := e.next
            if next = null {
                -- not found
                return
            }
            if next.key == key {
                -- it's the next slot in the list
                break
            }
            e := next
        }
        -- we are looking at the entry before it, update its next pointer to skip over it
        def next := e.next
        assert next != null
        e.next := next.next
        _count -= 1
    }

    method clear() {
        changeCount += 1
        _count := 0
        contents.destroy()
        bucketCount := DEFAULT_BUCKET_COUNT
        contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
        for i in 0 .. bucketCount {
            contents[i] := null
        }
        threshold := (bucketCount * 3) // 4
    }
    
    @private
    method incrementCount() {
        _count += 1
        if _count >= threshold {
            def oldContents := contents
            def oldBucketCount := bucketCount
            bucketCount *= 2
            contents := Pointer<Entry<K, V>?>.alloc(bucketCount)
            for i in 0 .. bucketCount {
                contents[i] := null
            }
            threshold *= 2
            _count := 0
            for i in 0 .. oldBucketCount {
                var e := oldContents[i]
                while e != null {
                    self[e.key] := e.value
                    e := e.next
                }
            }
        }
    }

    @override
    function get_count():Int {
        return _count
    }

    ================================================================================================
    Returns `true` if `o` is a Map containing the same key/value pairs as this map.

    @param o the object to compare against
    @returns `true` if the two values are equal
    ================================================================================================
    @override
    function =(other:Map<K, V>):Bit {
-*        if count != other.get_count() {
            return false
        }
        for (key, value) in self {
            if value != m[key] {
                return false
            }
        }
        return true*-
        assert false, "IdentityMap.="
    }

    @override
    function !=(other:Map<K, V>):Bit {
        assert false, "IdentityMap.!=" -- fixme remove this method when default != is in
    }

    @override
    function keys():Iterator<K> {
        assert false, "unimplemented" -- FIXME
    }

    @override
    function values():Iterator<V> {
        assert false, "unimplemented" -- FIXME
    }

    ================================================================================================
    Returns a string representation of the map.

    @param fmt the format string
    @returns a string representation of this object
    ================================================================================================
    @override
    function convert():String {
        def result := MutableString()
        result.append("{")
        var separator := ""
        for i in 0 .. bucketCount {
            var entry := contents[i]
            while entry != null {
                result.append(separator)
                if entry.key != null {
                    result.append(entry.key)
                }
                else {
                    result.append("null")
                }
                result.append(":")
                if entry.value != null {
                    result.append(entry.value)
                }
                else {
                    result.append("null")
                }
                entry := entry.next
                separator := ", "
            }
        }
        result.append("}")
        return result.convert()
    }
}
