package panda.threads

====================================================================================================
A queue which can be shared between multiple [threads](Thread), allowing any of them to submit
messages to or pull messages out of it. Multiple threads may simultaneously wait for a message from
the same message queue, in which case one of the waiting threads will be selected to receive the
message in a system-dependent fashion, while the other threads will continue to wait.
====================================================================================================
@final
@unsafeImmutable
class MessageQueue<T:Immutable> : Immutable {
    @private
    class Message<T:Immutable> : Immutable {
        def payload:T

        def next:Message<T>?

        init(payload:T) {
            self.payload := payload
        }

        @override
        function convert():String {
            if next != null {
                return "Message(\{payload}, \{next})"
            }
            return "Message(\{payload})"
        }
    }

    @private
    def lock := Lock()

    @private
    def notifier := Notifier(lock)

    @private
    var count := 0

    @private
    var head:Message<T>?

    @private
    var tail:Message<T>?

    ================================================================================================
    Posts an object to the queue.
    
    @param data the object to post
    ================================================================================================
    method post(data:T) {
        def scope := ScopedLock(lock)
        if tail != null {
            assert head != null
            tail.next := Message<T>(data)
            tail := tail.next
        }
        else {
            assert count = 0
            head := Message<T>(data)
            tail := head
        }
        count += 1
        notifier.notify()
    }

    ================================================================================================
    Returns the number of messages currently in the queue.
    
    @returns the number of messages in this `MessageQueue`
    @see hasMessage()
    @see getMessage()
    @see getMessage(Int)
    ================================================================================================
    method pendingMessages():Int {
        def scope := ScopedLock(lock)
        return count
    }
    
    ================================================================================================
    Returns `true` if there are one or more messages in the queue.
    
    @returns whether this queue has pending messages
    @see pendingMessages()
    @see getMessage()
    @see getMessage(Int)
    ================================================================================================
    method hasMessage():Bit {
        return pendingMessages() > 0
    }
    
    ================================================================================================
    Returns the next message from the queue, blocking until one is available.
    
    @see getMessage(Int)
    @returns the next message from the queue
    ================================================================================================
    method getMessage():T {
        def scope := ScopedLock(lock)
        while head = null {
            notifier.wait()
        }
        def result := head.payload
        head := head.next
        if head = null {
            tail := null
        }
        count -= 1
        return result
    }
}