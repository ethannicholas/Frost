package panda.json

uses org.pandalanguage.json.Lexer
uses org.pandalanguage.json.Token

uses panda.collections.ImmutableHashMap

====================================================================================================
Simple JSON parser. Note that this parser is incomplete - in particular it does not handle string
escape sequences correctly.
====================================================================================================
class JSONParser {
    @private
    var source := "<error>"

    @private
    def lexer := Lexer()

    @private
    def pushbackToken:Token? := null

    method parse(json:String):JSON {
        source := json
        lexer.start(json)
        return node()
    }

    @private
    method next():Token {
        if pushbackToken != null {
            def result := pushbackToken
            pushbackToken := null
            return result
        }
        var result:Token := lexer.next()
        while result.kind = Token.Kind.WS {
            result := lexer.next()
        }
        return result
    }

    @private
    method pushback(token:Token) {
        assert pushbackToken = null
        pushbackToken := token
    }

    @private
    method peek():Token {
        def result := next()
        pushback(result)
        return result
    }

    @private
    method checkNext(kind:Token.Kind):Token? {
        def token := next()
        if token.kind = kind {
            return token
        }
        pushback(token)
        return null
    }

    @private
    function text(token:Token):String {
        return source.substring(token.start .. token.end)    
    }

    @private
    method array():JSON {
        if checkNext(Token.Kind.RBRACKET) != null {
            return JSON.ARRAY(ImmutableArray<JSON>()) -- FIXME literal
        }
        def result := Array<JSON>()
        loop {
            result.add(node())
            match next().kind {
                when Token.Kind.RBRACKET:
                    return JSON.ARRAY(result.finish())
                when Token.Kind.COMMA:
                    continue
                otherwise:
                    assert false, "expected end of array"
            }
        }
    }

    @private
    method object():JSON {
        if checkNext(Token.Kind.RBRACE) != null {
            return JSON.OBJECT(ImmutableHashMap<String, JSON>()) -- FIXME literal
        }
        def result := HashMap<String, JSON>()
        loop {
            def key := string()
            def colon := next()
            if colon.kind != Token.Kind.COLON {
                assert false, "expected ':'"
            }
            result[key] := node()
            match next().kind {
                when Token.Kind.RBRACE:
                    return JSON.OBJECT(result.finish())
                when Token.Kind.COMMA:
                    continue
                otherwise:
                    assert false, "expected end of object"
            }
        }
    }

    @private
    method string():String {
        def token := next()
        if token.kind != Token.Kind.STRING {
            assert false, "expected string, but found '\{text(token)}'"
        }
        def s := text(token)
        return s.substring(s.next(s.start()) .. s.previous(s.end()))
    }

    @private
    method node():JSON {
        def token := next()
        match token.kind {
            when Token.Kind.LBRACE:
                return object()
            when Token.Kind.LBRACKET:
                return array()
            when Token.Kind.STRING:
                def s := text(token)
                return JSON.STRING(s.substring(s.next(s.start()) .. s.previous(s.end())))
            when Token.Kind.INT:
                return JSON.INT(text(token).convert())
            when Token.Kind.REAL:
                return JSON.REAL(Real64.parse(text(token)))
            when Token.Kind.TRUE:
                return JSON.BIT(true)
            when Token.Kind.FALSE:
                return JSON.BIT(false)
            when Token.Kind.NULL:
                return JSON.NULL
            otherwise:
                assert false, "invalid node: '\{text(token)}'"
        }
    }
}