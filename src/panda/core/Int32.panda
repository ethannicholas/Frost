package panda.core

class Int32 : Value {
    @$implicit
    init(value:builtin_int32) {
        self.value := value
    }

    function +(other:Int32):Int32 {
        return Int32(value + other.value)
    }

    function -(other:Int32):Int32 {
        return Int32(value - other.value)
    }

    function *(other:Int32):Int32 {
        return Int32(value * other.value)
    }

    function //(other:Int32):Int32 {
        return Int32(value // other.value)
    }

    function -():Int32 {
        return Int32(-value)
    }

    function !!():Int32 {
        return Int32(!!value)
    }

    function ||(other:Int32):Int32 {
        return Int32(value || other.value)
    }

    function &&(other:Int32):Int32 {
        return Int32(value && other.value)
    }

    function ~~(other:Int32):Int32 {
        return Int32(value ~~ other.value)
    }

    function <<(other:Int32):Int32 {
        return Int32(value << other.value)
    }

    function >>(other:Int32):Int32 {
        return Int32(value >> other.value)
    }

    function =(other:Int32):Bit {
        return value = other.value
    }

    function !=(other:Int32):Bit {
        return value != other.value
    }

    function >(other:Int32):Bit {
        return value > other.value
    }

    function <(other:Int32):Bit {
        return value < other.value
    }

    function >=(other:Int32):Bit {
        return value >= other.value
    }

    function <=(other:Int32):Bit {
        return value <= other.value
    }

    @override
    function convert():String {
        return Int64(value->builtin_int64).convert()
    }

    @private
    def value:builtin_int32
}