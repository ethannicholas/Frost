package panda.core

====================================================================================================
Contains utility methods used in the internal implementation of certain language features.
====================================================================================================
@package
@final
class Panda {
    @class
    @external
    function toReal64(s:String):Real64

    @class
    @external
    function floatToIntBits(r:Real64):Int64

    @class
    @external
    function addressOf(o:Object):Int64

    @class
    method assertionFailure(file:String, line:Int) {
        Console.errorStream().printLine("assertion failure (\{file}:\{line})")
        System.crash()
    }

    @class
    method assertionFailure(file:String, line:Int, msg:String) {
        Console.errorStream().printLine("assertion failure (\{file}:\{line}): \{msg}")
        System.crash()
    }

    @class
    function digit(c:Char32):UInt64? {
        if c >= "0" & c <= "9" {
            return c.convert()->UInt64 - "0"->Char8.convert()->UInt64
        }
        if c >= "A" & c <= "Z" {
            return c.convert()->UInt64 - "A"->Char8.convert()->UInt64 + 10
        }
        if c >= "a" & c <= "z" {
            return c.convert()->UInt64 - "a"->Char8.convert()->UInt64 + 10
        }
        return null
    }

    ================================================================================================
    Used to implement the various number classes' radix parse methods.
    ================================================================================================
    @class
    function parse(str:String, rawRadix:Int):UInt64? {
        if str = "" {
            return null
        }
        var result:UInt64 := 0
        def radix := rawRadix.convert()->UInt64
        var index := str.start()
        while index != str.end() {
            def value := digit(str[index])
            if value = null | value >= radix {
                return null
            }
            result := result * radix + value
            index := str.next(index)
        }
        return result
    }

    ================================================================================================
    Used to implement alignment specifiers during string interpolation. The alignment specifier must
    be of the form `[<fill>]<direction><width>`, where the optional `<fill>` is a single character
    to fill the string width, `<direction>` is `"<"` (left), `"^"` (center), or `">"` (right), and
    width is a positive integer specifying the minimum length of the resulting string.

    @param str the string to align
    @param specifier an alignment specifier such as `"0>6"`
    ================================================================================================
    @class
    function align(str:String, specifier:String):String {
        assert specifier.length() >= 2, "invalid alignment string '\{specifier}'"
        var index := specifier.next(specifier.start())
        match specifier[index] {
            when "<", "^", ">": -- do nothing
            otherwise:
                index := specifier.start()
        }
        def width := specifier[specifier.next(index)..].convert()->Int
        def fill:Char32
        if index = specifier.start() {
            fill := " "
        }
        else {
            fill := specifier[specifier.start()]
        }
        match specifier[index] {
            when "<": return str.leftAlign(width, fill)
            when "^": return str.centerAlign(width, fill)
            when ">": return str.rightAlign(width, fill)
            otherwise:
                assert false, "invalid alignment string '\{specifier}'"
        }
    }

    ================================================================================================
    Used to implement the various number classes' format methods.

    @param sign true if the number is negative
    @param rawValue the number's absolute value
    @param mask a bit mask representing the actual size of the number
    @param fmt the format string
    ================================================================================================
    @class
    function format(sign:Bit, rawValue:UInt64, mask:UInt64, fmt:String):String {
        var index := fmt.start()
        var base:UInt64 := 10
        var digits := "0123456789abcdef".utf8()
        if index < fmt.end() {
            match fmt[index] {
                when "b", "B":
                    base := 2
                when "o", "O":
                    base := 8
                when "d", "D":
                    base := 10
                when "x":
                    base := 16
                when "X":
                    base := 16
                    digits := "0123456789ABCDEF".utf8()
                otherwise:
                    assert false, "invalid format string"
            }
        }
        var value:UInt64 -- FIXME make rawValue a var parameter
        if sign & base != 10 {
            value := (-rawValue.convert()->Int64).convert()->UInt64 && mask
        }
        else {
            value := rawValue
        }
        constant max := 64
        def chars := Pointer<Char8>.alloc(max)
        var charIndex := max - 1
        do {
            chars[charIndex] := digits[(value % base).convert()]
            value //= base
            charIndex -= 1
        }
        while value > 0
        if sign & base = 10 {
            chars[charIndex] := "-"
            charIndex -= 1
        }
        charIndex += 1
        def size := max - charIndex
        for i in 0 .. size {
            chars[i] := chars[i + charIndex]
        }
        return String(chars, size)
    }

    @class
    method debugPrint(i:builtin_int64) {
        Console.printLine("Debug: \{Int64(i)}")
    }
}