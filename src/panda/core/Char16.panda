package panda.core

uses panda.unsafe.Pointer

====================================================================================================
Represents a single 2-byte word of a UTF-16 encoded string.
====================================================================================================
@final
class Char16 : Value (Key<Char16>) {
    init(value:UInt16) {
        self.value := value.value
    }

    @override
    function =(other:Char16):Bit {
        return value = other.value
    }

    @override
    function !=(other:Char16):Bit {
        return value != other.value
    }

    @override
    function hash():Int {
        return convert()
    }


    function convert():Int8 {
        return Int8(value->builtin_int8)
    }

    function convert():Int16 {
        return Int16(value->builtin_int16)
    }

    function convert():Int32 {
        return Int32(value->builtin_int32)
    }

    function convert():Int64 {
        return Int64(value->builtin_int64)
    }

    function convert():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    function convert():UInt16 {
        return UInt16(value)
    }

    function convert():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    function convert():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    ================================================================================================
    Returns a string containing this character. Note that separately encoding high and low surrogate
    pairs may not produce the intended result; they should generally be decoded into a single
    `Char32` before being reencoded into a `String`.
    ================================================================================================
    @override
    function convert():String {
        if value < 0x80 {
            def data := Pointer<Char8>.alloc(1)
            data[0] := Char8(convert()->UInt8)
            return String(data, 1, true)
        }
        if value < 0x800 {
            def data := Pointer<Char8>.alloc(2)
            data[0] := Char8(UInt8((value >> 6 || 0b11000000)->builtin_uint8))
            data[1] := Char8(UInt8((value && 0b111111 || 0b10000000)->builtin_uint8))
            return String(data, 2, true)
        }
        def data := Pointer<Char8>.alloc(3)
        data[0] := Char8(UInt8((value >> 12 || 0b11100000)->builtin_uint8))
        data[1] := Char8(UInt8((value >> 6 && 0b111111 || 0b10000000)->builtin_uint8))
        data[2] := Char8(UInt8((value && 0b111111 || 0b10000000)->builtin_uint8))
        return String(data, 3, true)
    }

    @private
    def value:builtin_uint16
}