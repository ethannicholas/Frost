------------------------------------------------------------------
-- This file was autogenerated by 'writeNumbers', do not modify --
------------------------------------------------------------------

package panda.core

===
A 64-bit floating point number.
===
@final
class Real64 : Value, Key<Real64>, Comparable<Real64>, Formattable {
    @private
    def value:builtin_float64

    @private
    @implicit
    init(value:builtin_float64) {
        self.value := value
    }

    @implicit
    @priority(-6)
    init(value:Int8) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(-5)
    init(value:Int16) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(-4)
    init(value:Int32) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(-3)
    init(value:Int64) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(-3)
    init(value:UInt8) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(-2)
    init(value:UInt16) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(-1)
    init(value:UInt32) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(0)
    init(value:UInt64) {
        self.value := value.value->builtin_float64
    }

    @implicit
    @priority(-4)
    init(value:Real32) {
        self.value := value.value->builtin_float64
    }

    ===Adds another number to this number.===
    @priority(2)
    function +(other:Real64):Real64 {
        return value + other.value
    }

    ===Subtracts another number from this number.===
    @priority(2)
    function -(other:Real64):Real64 {
        return value - other.value
    }

    ===Returns the negation (additive inverse) of this number===
    function -():Real64 {
        return Real64(-value)
    }

    ===Multiplies this number by another number.===
    @priority(2)
    function *(other:Real64):Real64 {
        return value * other.value
    }

    ===Divides this number by another number.===
    function /(other:Int8):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    function /(other:Int16):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    function /(other:Int32):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    function /(other:Int64):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    function /(other:UInt8):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    function /(other:UInt16):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    function /(other:UInt32):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    function /(other:UInt64):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(1)
    function /(other:Real32):Real64 {
        return value / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(2)
    @priority(1)
    function /(other:Real64):Real64 {
        return value / other.value
    }

    ===Returns `true` if this number is equal to the given number.===
    function =(other:Real32):Bit {
        return value = other.value->builtin_float64
    }

    ===Returns `true` if this number is equal to the given number.===
    @override
    @priority(2)
    function =(other:Real64):Bit {
        return value = other.value
    }

    ===Returns `true` if this number is not equal to the given number.===
    function !=(other:Real32):Bit {
        return value != other.value->builtin_float64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @override
    @priority(2)
    function !=(other:Real64):Bit {
        return value != other.value
    }

    ===Returns `true` if this number is less than the given number.===
    function <(other:Real32):Bit {
        return value < other.value->builtin_float64
    }

    ===Returns `true` if this number is less than the given number.===
    @override
    @priority(2)
    function <(other:Real64):Bit {
        return value < other.value
    }

    ===Returns `true` if this number is greater than the given number.===
    function >(other:Real32):Bit {
        return value > other.value->builtin_float64
    }

    ===Returns `true` if this number is greater than the given number.===
    @override
    @priority(2)
    function >(other:Real64):Bit {
        return value > other.value
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    function >=(other:Real32):Bit {
        return value >= other.value->builtin_float64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @override
    @priority(2)
    function >=(other:Real64):Bit {
        return value >= other.value
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    function <=(other:Real32):Bit {
        return value <= other.value->builtin_float64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @override
    @priority(2)
    function <=(other:Real64):Bit {
        return value <= other.value
    }

    ===Returns the absolute value of this number.===
    function abs():Real64 {
        if self < 0 {
            return -self
        }
        return self
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    function min(other:Int8):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    function min(other:Int16):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    function min(other:Int32):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(1)
    function min(other:Int64):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    function min(other:UInt8):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    function min(other:UInt16):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    function min(other:UInt32):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    function min(other:UInt64):Real64 {
        if value < other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    function max(other:Int8):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    function max(other:Int16):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    function max(other:Int32):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(1)
    function max(other:Int64):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    function max(other:UInt8):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    function max(other:UInt16):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    function max(other:UInt32):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    function max(other:UInt64):Real64 {
        if value > other.value->builtin_float64 {
            return value
        }
        return other.value->builtin_float64
    }

    @override
    function hash():Int {
        return Int(value->builtin_int64)
    }

    ===Returns this number truncated to an bit signed number.===
    function convert():Int8 {
        return Int8(value->builtin_int8)
    }

    ===Returns this number truncated to a bit signed number.===
    function convert():Int16 {
        return Int16(value->builtin_int16)
    }

    ===Returns this number truncated to a bit signed number.===
    function convert():Int32 {
        return Int32(value->builtin_int32)
    }

    ===Returns this number reinterpreted to a bit signed number.===
    function convert():Int64 {
        return Int64(value->builtin_int64)
    }

    ===Returns this number truncated to an bit unsigned number.===
    function convert():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    ===Returns this number truncated to a bit unsigned number.===
    function convert():UInt16 {
        return UInt16(value->builtin_uint16)
    }

    ===Returns this number truncated to a bit unsigned number.===
    function convert():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    ===Returns this number reinterpreted to a bit unsigned number.===
    function convert():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    ===Returns this number truncated to a bit signed number.===
    function convert():Real32 {
        return Real32(value->builtin_float32)
    }

    ===Returns this number reinterpreted to a bit signed number.===
    function convert():Real64 {
        return Real64(value->builtin_float64)
    }

    @override
    @external
    function convert():String

    === Returns a formatted representation of this number. Supported format strings are `""`, `"d"`, or `"D"` for decimal, `"b"` or `"B"` for binary, `"o"` or `"O"` for octal, `"x"` for lowercase hexadecimal, and `"X"` for uppercase hexadecimal. ===
    @override
    function format(fmt:String):String {
        return Panda.format(value < 0, abs().convert(), 0xFFFFFFFFFFFFFFFF, fmt)
    }
}
