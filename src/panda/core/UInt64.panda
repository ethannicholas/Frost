-- This file was autogenerated by 'writeints', do not modify
package panda.core

uses panda.unsafe.Pointer

@final
class UInt64 : Value (Key<UInt64>, Comparable<UInt64>) {
    constant MIN:UInt64 := 0

    constant MAX:UInt64 := 18446744073709551615

    @private
    def value:builtin_uint64

    @$implicit
    init(value:builtin_uint64) {
        self.value := value
    }

    function +(other:UInt8):UInt64 {
        return value + other.value->builtin_uint64
    }

    function +(other:UInt16):UInt64 {
        return value + other.value->builtin_uint64
    }

    function +(other:UInt32):UInt64 {
        return value + other.value->builtin_uint64
    }

    function +(other:UInt64):UInt64 {
        return value + other.value
    }

    function -(other:UInt8):UInt64 {
        return value - other.value->builtin_uint64
    }

    function -(other:UInt16):UInt64 {
        return value - other.value->builtin_uint64
    }

    function -(other:UInt32):UInt64 {
        return value - other.value->builtin_uint64
    }

    function -(other:UInt64):UInt64 {
        return value - other.value
    }

    function -():UInt64 {
        return UInt64(-value)
    }

    function *(other:UInt8):UInt64 {
        return value * other.value->builtin_uint64
    }

    function *(other:UInt16):UInt64 {
        return value * other.value->builtin_uint64
    }

    function *(other:UInt32):UInt64 {
        return value * other.value->builtin_uint64
    }

    function *(other:UInt64):UInt64 {
        return value * other.value
    }

    function //(other:UInt8):UInt64 {
        return value // other.value->builtin_uint64
    }

    function //(other:UInt16):UInt64 {
        return value // other.value->builtin_uint64
    }

    function //(other:UInt32):UInt64 {
        return value // other.value->builtin_uint64
    }

    function //(other:UInt64):UInt64 {
        return value // other.value
    }

    function %(other:UInt8):UInt64 {
        return value % other.value->builtin_uint64
    }

    function %(other:UInt16):UInt64 {
        return value % other.value->builtin_uint64
    }

    function %(other:UInt32):UInt64 {
        return value % other.value->builtin_uint64
    }

    function %(other:UInt64):UInt64 {
        return value % other.value
    }

    function !!():UInt64 {
        return UInt64(!!value)
    }

    function &&(other:Int8):UInt64 {
        return value && other.value->builtin_uint64
    }

    function &&(other:Int16):UInt64 {
        return value && other.value->builtin_uint64
    }

    function &&(other:Int32):UInt64 {
        return value && other.value->builtin_uint64
    }

    function &&(other:Int64):Int64 {
        return value->builtin_int64 && other.value
    }

    function &&(other:UInt8):UInt64 {
        return value && other.value->builtin_uint64
    }

    function &&(other:UInt16):UInt64 {
        return value && other.value->builtin_uint64
    }

    function &&(other:UInt32):UInt64 {
        return value && other.value->builtin_uint64
    }

    function &&(other:UInt64):UInt64 {
        return value && other.value
    }

    function ||(other:Int8):UInt64 {
        return value || other.value->builtin_uint64
    }

    function ||(other:Int16):UInt64 {
        return value || other.value->builtin_uint64
    }

    function ||(other:Int32):UInt64 {
        return value || other.value->builtin_uint64
    }

    function ||(other:Int64):Int64 {
        return value->builtin_int64 || other.value
    }

    function ||(other:UInt8):UInt64 {
        return value || other.value->builtin_uint64
    }

    function ||(other:UInt16):UInt64 {
        return value || other.value->builtin_uint64
    }

    function ||(other:UInt32):UInt64 {
        return value || other.value->builtin_uint64
    }

    function ||(other:UInt64):UInt64 {
        return value || other.value
    }

    function ~~(other:Int8):UInt64 {
        return value ~~ other.value->builtin_uint64
    }

    function ~~(other:Int16):UInt64 {
        return value ~~ other.value->builtin_uint64
    }

    function ~~(other:Int32):UInt64 {
        return value ~~ other.value->builtin_uint64
    }

    function ~~(other:Int64):Int64 {
        return value->builtin_int64 ~~ other.value
    }

    function ~~(other:UInt8):UInt64 {
        return value ~~ other.value->builtin_uint64
    }

    function ~~(other:UInt16):UInt64 {
        return value ~~ other.value->builtin_uint64
    }

    function ~~(other:UInt32):UInt64 {
        return value ~~ other.value->builtin_uint64
    }

    function ~~(other:UInt64):UInt64 {
        return value ~~ other.value
    }

    function <<(other:Int8):UInt64 {
        return value << other.value->builtin_uint64
    }

    function <<(other:Int16):UInt64 {
        return value << other.value->builtin_uint64
    }

    function <<(other:Int32):UInt64 {
        return value << other.value->builtin_uint64
    }

    function <<(other:Int64):Int64 {
        return value->builtin_int64 << other.value
    }

    function <<(other:UInt8):UInt64 {
        return value << other.value->builtin_uint64
    }

    function <<(other:UInt16):UInt64 {
        return value << other.value->builtin_uint64
    }

    function <<(other:UInt32):UInt64 {
        return value << other.value->builtin_uint64
    }

    function <<(other:UInt64):UInt64 {
        return value << other.value
    }

    function >>(other:Int8):UInt64 {
        return value >> other.value->builtin_uint64
    }

    function >>(other:Int16):UInt64 {
        return value >> other.value->builtin_uint64
    }

    function >>(other:Int32):UInt64 {
        return value >> other.value->builtin_uint64
    }

    function >>(other:Int64):Int64 {
        return value->builtin_int64 >> other.value
    }

    function >>(other:UInt8):UInt64 {
        return value >> other.value->builtin_uint64
    }

    function >>(other:UInt16):UInt64 {
        return value >> other.value->builtin_uint64
    }

    function >>(other:UInt32):UInt64 {
        return value >> other.value->builtin_uint64
    }

    function >>(other:UInt64):UInt64 {
        return value >> other.value
    }

    function =(other:UInt8):Bit {
        return value = other.value->builtin_uint64
    }

    function =(other:UInt16):Bit {
        return value = other.value->builtin_uint64
    }

    function =(other:UInt32):Bit {
        return value = other.value->builtin_uint64
    }

    @override
    function =(other:UInt64):Bit {
        return value = other.value
    }

    function !=(other:UInt8):Bit {
        return value != other.value->builtin_uint64
    }

    function !=(other:UInt16):Bit {
        return value != other.value->builtin_uint64
    }

    function !=(other:UInt32):Bit {
        return value != other.value->builtin_uint64
    }

    @override
    function !=(other:UInt64):Bit {
        return value != other.value
    }

    function <(other:UInt8):Bit {
        return value < other.value->builtin_uint64
    }

    function <(other:UInt16):Bit {
        return value < other.value->builtin_uint64
    }

    function <(other:UInt32):Bit {
        return value < other.value->builtin_uint64
    }

    @override
    function <(other:UInt64):Bit {
        return value < other.value
    }

    function >(other:UInt8):Bit {
        return value > other.value->builtin_uint64
    }

    function >(other:UInt16):Bit {
        return value > other.value->builtin_uint64
    }

    function >(other:UInt32):Bit {
        return value > other.value->builtin_uint64
    }

    @override
    function >(other:UInt64):Bit {
        return value > other.value
    }

    function >=(other:UInt8):Bit {
        return value >= other.value->builtin_uint64
    }

    function >=(other:UInt16):Bit {
        return value >= other.value->builtin_uint64
    }

    function >=(other:UInt32):Bit {
        return value >= other.value->builtin_uint64
    }

    @override
    function >=(other:UInt64):Bit {
        return value >= other.value
    }

    function <=(other:UInt8):Bit {
        return value <= other.value->builtin_uint64
    }

    function <=(other:UInt16):Bit {
        return value <= other.value->builtin_uint64
    }

    function <=(other:UInt32):Bit {
        return value <= other.value->builtin_uint64
    }

    @override
    function <=(other:UInt64):Bit {
        return value <= other.value
    }





    function min(other:UInt8):UInt64 {
        if value < other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    function min(other:UInt16):UInt64 {
        if value < other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    function min(other:UInt32):UInt64 {
        if value < other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    function min(other:UInt64):UInt64 {
        if value < other.value {
            return value
        }
        return other.value
    }





    function max(other:UInt8):UInt64 {
        if value > other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    function max(other:UInt16):UInt64 {
        if value > other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    function max(other:UInt32):UInt64 {
        if value > other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    function max(other:UInt64):UInt64 {
        if value > other.value {
            return value
        }
        return other.value
    }

    function [](index:Int8):Bit {
        return self && (1 << index) != 0
    }

    function [](index:Int16):Bit {
        return self && (1 << index) != 0
    }

    function [](index:Int32):Bit {
        return self && (1 << index) != 0
    }

    function [](index:Int64):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt8):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt16):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt32):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt64):Bit {
        return self && (1 << index) != 0
    }

    @override
    function hash():Int {
        return Int(value->builtin_int64)
    }

    function convert():Int8 {
        return Int8(value->builtin_int8)
    }

    function convert():Int16 {
        return Int16(value->builtin_int16)
    }

    function convert():Int32 {
        return Int32(value->builtin_int32)
    }

    function convert():Int64 {
        return Int64(value->builtin_int64)
    }

    function convert():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    function convert():UInt16 {
        return UInt16(value->builtin_uint16)
    }

    function convert():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    @override
    function convert():String {
        constant max := 20
        def chars := Pointer<Char8>.alloc(max)
        var index := max - 1
        var value := self
        if value >= 0 {
            do {
                chars[index] := Char8((value % 10 + 48).value->builtin_uint8)
                value := (value // 10)
                index -= 1
            }
            while value > 0
            index += 1
        }
        else {
            do {
                chars[index] := Char8((48 - value % 10).value->builtin_uint8)
                value := (value // 10)
                index -= 1
            }
            while value < 0
            chars[index] := Char8(45) -- "-"
        }
        def size := max - index
        def result := Pointer<Char8>.alloc(size)
        for i in index .. max {
            result[i - index] := chars[i]
        }
        chars.destroy()
        return String(result, size, true)
    }
}
