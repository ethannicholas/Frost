------------------------------------------------------------------
-- This file was autogenerated by 'writeNumbers', do not modify --
------------------------------------------------------------------

package panda.core

uses panda.unsafe.Pointer

===
A 64-bit unsigned integer.
===
@final
class UInt64 : Value, Key<UInt64>, Comparable<UInt64>, Formattable, ListView<Bit> {
    ===
    The smallest value this type can hold (0).
    ===
    constant MIN:UInt64 := 0

    ===
    The largest value this type can hold (18,446,744,073,709,551,615).
    ===
    constant MAX:UInt64 := 18446744073709551615

    @private
    def value:builtin_uint64

    @private
    @implicit
    init(value:builtin_uint64) {
        self.value := value
    }

    @implicit
    @priority(-6)
    init(value:UInt8) {
        self.value := value.value->builtin_uint64
    }

    @implicit
    @priority(-5)
    init(value:UInt16) {
        self.value := value.value->builtin_uint64
    }

    @implicit
    @priority(-4)
    init(value:UInt32) {
        self.value := value.value->builtin_uint64
    }

    ===Adds another number to this number.===
    @priority(20)
    function +(other:UInt64):UInt64 {
        return value + other.value
    }

    ===Subtracts another number from this number.===
    @priority(20)
    function -(other:UInt64):UInt64 {
        return value - other.value
    }

    ===Returns the negation (additive inverse) of this number===
    function -():UInt64 {
        return UInt64(-value)
    }

    ===Multiplies this number by another number.===
    @priority(20)
    function *(other:UInt64):UInt64 {
        return value * other.value
    }

    ===Divides this number by another number, returning the whole number portion.===
    @priority(20)
    function //(other:UInt64):UInt64 {
        return value // other.value
    }

    ===Returns the remainder of dividing this number by another number.===
    @priority(20)
    function %(other:UInt64):UInt64 {
        return value % other.value
    }

    ===Divides this number by another number.===
    @priority(7)
    function /(other:Int8):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(9)
    function /(other:Int16):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(11)
    function /(other:Int32):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(13)
    function /(other:Int64):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(6)
    function /(other:UInt8):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(8)
    function /(other:UInt16):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(10)
    function /(other:UInt32):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(20)
    function /(other:UInt64):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(14)
    function /(other:Real32):Real64 {
        return value->builtin_float64 / other.value->builtin_float64
    }

    ===Divides this number by another number.===
    @priority(15)
    function /(other:Real64):Real64 {
        return value->builtin_float64 / other.value
    }

    ===Returns the bitwise NOT of this number.===
    function !!():UInt64 {
        return UInt64(!!value)
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(13)
    function &&(other:Int64):Int64 {
        return value->builtin_int64 && other.value
    }

    ===Returns the bitwise AND of this number with another number.===
    @priority(20)
    function &&(other:UInt64):UInt64 {
        return value && other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(13)
    function ||(other:Int64):Int64 {
        return value->builtin_int64 || other.value
    }

    ===Returns the bitwise OR of this number with another number.===
    @priority(20)
    function ||(other:UInt64):UInt64 {
        return value || other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(13)
    function ~~(other:Int64):Int64 {
        return value->builtin_int64 ~~ other.value
    }

    ===Returns the bitwise XOR of this number with another number.===
    @priority(20)
    function ~~(other:UInt64):UInt64 {
        return value ~~ other.value
    }

    ===Returns this number shifted left by the specified number of bits.===
    @priority(13)
    function <<(other:Int64):Int64 {
        return value->builtin_int64 << other.value
    }

    ===Returns this number shifted left by the specified number of bits.===
    @priority(20)
    function <<(other:UInt64):UInt64 {
        return value << other.value
    }

    ===Returns this number logical shifted right by the specified number of bits.===
    @priority(13)
    function >>(other:Int64):Int64 {
        return value->builtin_int64 >> other.value
    }

    ===Returns this number logical shifted right by the specified number of bits.===
    @priority(20)
    function >>(other:UInt64):UInt64 {
        return value >> other.value
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(6)
    function =(other:UInt8):Bit {
        return value = other.value->builtin_uint64
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(8)
    function =(other:UInt16):Bit {
        return value = other.value->builtin_uint64
    }

    ===Returns `true` if this number is equal to the given number.===
    @priority(10)
    function =(other:UInt32):Bit {
        return value = other.value->builtin_uint64
    }

    ===Returns `true` if this number is equal to the given number.===
    @override
    @priority(20)
    function =(other:UInt64):Bit {
        return value = other.value
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(6)
    function !=(other:UInt8):Bit {
        return value != other.value->builtin_uint64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(8)
    function !=(other:UInt16):Bit {
        return value != other.value->builtin_uint64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @priority(10)
    function !=(other:UInt32):Bit {
        return value != other.value->builtin_uint64
    }

    ===Returns `true` if this number is not equal to the given number.===
    @override
    @priority(20)
    function !=(other:UInt64):Bit {
        return value != other.value
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(6)
    function <(other:UInt8):Bit {
        return value < other.value->builtin_uint64
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(8)
    function <(other:UInt16):Bit {
        return value < other.value->builtin_uint64
    }

    ===Returns `true` if this number is less than the given number.===
    @priority(10)
    function <(other:UInt32):Bit {
        return value < other.value->builtin_uint64
    }

    ===Returns `true` if this number is less than the given number.===
    @override
    @priority(20)
    function <(other:UInt64):Bit {
        return value < other.value
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(6)
    function >(other:UInt8):Bit {
        return value > other.value->builtin_uint64
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(8)
    function >(other:UInt16):Bit {
        return value > other.value->builtin_uint64
    }

    ===Returns `true` if this number is greater than the given number.===
    @priority(10)
    function >(other:UInt32):Bit {
        return value > other.value->builtin_uint64
    }

    ===Returns `true` if this number is greater than the given number.===
    @override
    @priority(20)
    function >(other:UInt64):Bit {
        return value > other.value
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(6)
    function >=(other:UInt8):Bit {
        return value >= other.value->builtin_uint64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(8)
    function >=(other:UInt16):Bit {
        return value >= other.value->builtin_uint64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @priority(10)
    function >=(other:UInt32):Bit {
        return value >= other.value->builtin_uint64
    }

    ===Returns `true` if this number is greater than or equal to the given number.===
    @override
    @priority(20)
    function >=(other:UInt64):Bit {
        return value >= other.value
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(6)
    function <=(other:UInt8):Bit {
        return value <= other.value->builtin_uint64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(8)
    function <=(other:UInt16):Bit {
        return value <= other.value->builtin_uint64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @priority(10)
    function <=(other:UInt32):Bit {
        return value <= other.value->builtin_uint64
    }

    ===Returns `true` if this number is less than or equal to the given number.===
    @override
    @priority(20)
    function <=(other:UInt64):Bit {
        return value <= other.value
    }





    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(6)
    function min(other:UInt8):UInt64 {
        if value < other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(8)
    function min(other:UInt16):UInt64 {
        if value < other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(10)
    function min(other:UInt32):UInt64 {
        if value < other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    ===Returns the smaller (closest to negative infinity) of this number and another number.===
    @priority(20)
    function min(other:UInt64):UInt64 {
        if value < other.value {
            return value
        }
        return other.value
    }





    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(6)
    function max(other:UInt8):UInt64 {
        if value > other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(8)
    function max(other:UInt16):UInt64 {
        if value > other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(10)
    function max(other:UInt32):UInt64 {
        if value > other.value->builtin_uint64 {
            return value
        }
        return other.value->builtin_uint64
    }

    ===Returns the larger (closest to positive infinity) of this number and another number.===
    @priority(20)
    function max(other:UInt64):UInt64 {
        if value > other.value {
            return value
        }
        return other.value
    }
    ===Returns a list of all integers in the given range. The list is 'lazy', meaning that it does not actually allocate memory to hold the entire list.===
    @class
    function [](range:Range<UInt64>):ListView<UInt64> {
        return org.pandalanguage.panda.UInt64List(SteppedRange<UInt64, UInt64>(range.min, range.max, 1, range.inclusive))
    }
    ===Returns a list of all integers in the given stepped range. The list is 'lazy', meaning that it does not actually allocate memory to hold the entire list.===
    @class
    function [](range:SteppedRange<UInt64, UInt64>):ListView<UInt64> {
        return org.pandalanguage.panda.UInt64List(range)
    }

    ===Returns a single bit from this number, where index 0 is the least significant bit.===
    @override
    function [](index:Int64):Bit {
        return self && (1 << index) != 0
    }

    ===Returns the number of bits in this integer, which is always 64.===
    @override
    function get_count():Int {
        return 64
    }

    @override
    function iterator():Iterator<Bit> {
        return org.pandalanguage.panda.IntBitIterator(self, 1 << 63)
    }

    @override
    function get_hash():Int {
        return Int(value->builtin_int64)
    }

    ===Parses a string as a number in the specified radix. Returns `null` if the parse fails.===
    @class
    @pre(radix >= 2 & radix <= 36)
    function parse(str:String, radix:Int):UInt64? {
        def result := Panda.parse(str, radix)
        if result == null {
            return null
        }
        return result
    }

    ===Returns this number truncated to an bit signed number.===
    function convert():Int8 {
        return Int8(value->builtin_int8)
    }

    ===Returns this number truncated to a bit signed number.===
    function convert():Int16 {
        return Int16(value->builtin_int16)
    }

    ===Returns this number truncated to a bit signed number.===
    function convert():Int32 {
        return Int32(value->builtin_int32)
    }

    ===Returns this number reinterpreted to a bit signed number.===
    function convert():Int64 {
        return Int64(value->builtin_int64)
    }

    ===Returns this number truncated to an bit unsigned number.===
    function convert():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    ===Returns this number truncated to a bit unsigned number.===
    function convert():UInt16 {
        return UInt16(value->builtin_uint16)
    }

    ===Returns this number truncated to a bit unsigned number.===
    function convert():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    ===Returns this number truncated to a bit signed number.===
    function convert():Real32 {
        return Real32(value->builtin_float32)
    }

    ===Returns this number reinterpreted to a bit signed number.===
    function convert():Real64 {
        return Real64(value->builtin_float64)
    }

    ===Returns this number converted to a decimal string.===
    @override
    function convert():String {
        constant max := 20
        def chars := Pointer<Char8>.alloc(max)
        var index := max - 1
        var value := self
        if value >= 0 {
            do {
                chars[index] := Char8((value % 10 + 48).convert())
                value := (value // 10)
                index -= 1
            }
            while value > 0
            index += 1
        }
        else {
            do {
                chars[index] := Char8((48 - value % 10).convert())
                value := (value // 10)
                index -= 1
            }
            while value < 0
            chars[index] := "-"
        }
        def size := max - index
        for i in 0 .. size {
            chars[i] := chars[i + index]
        }
        return String(chars, size)
    }

    === Returns a formatted representation of this number. Supported format strings are `""`, `"d"`, or `"D"` for decimal, `"b"` or `"B"` for binary, `"o"` or `"O"` for octal, `"x"` for lowercase hexadecimal, and `"X"` for uppercase hexadecimal. ===
    @override
    function format(fmt:String):String {
        return Panda.format(false, self, 0xFFFFFFFFFFFFFFFF, fmt)
    }
}
