-- This file was autogenerated by 'writeints', do not modify
package panda.core

uses panda.unsafe.Pointer

@final
class Int64 : Value, Key<Int64>, Comparable<Int64>, Formattable {
    constant MIN:Int64 := -9223372036854775808

    constant MAX:Int64 := 9223372036854775807

    @private
    def value:builtin_int64

    @private
    @implicit
    init(value:builtin_int64) {
        self.value := value
    }

    @implicit
    init(value:Int8) {
        self.value := value.value->builtin_int64
    }

    @implicit
    init(value:Int16) {
        self.value := value.value->builtin_int64
    }

    @implicit
    init(value:Int32) {
        self.value := value.value->builtin_int64
    }

    @implicit
    init(value:UInt8) {
        self.value := value.value->builtin_int64
    }

    @implicit
    init(value:UInt16) {
        self.value := value.value->builtin_int64
    }

    @implicit
    init(value:UInt32) {
        self.value := value.value->builtin_int64
    }

    function +(other:Int8):Int64 {
        return value + other.value->builtin_int64
    }

    function +(other:Int16):Int64 {
        return value + other.value->builtin_int64
    }

    function +(other:Int32):Int64 {
        return value + other.value->builtin_int64
    }

    function +(other:Int64):Int64 {
        return value + other.value
    }

    function -(other:Int8):Int64 {
        return value - other.value->builtin_int64
    }

    function -(other:Int16):Int64 {
        return value - other.value->builtin_int64
    }

    function -(other:Int32):Int64 {
        return value - other.value->builtin_int64
    }

    function -(other:Int64):Int64 {
        return value - other.value
    }

    function -():Int64 {
        return Int64(-value)
    }

    function *(other:Int8):Int64 {
        return value * other.value->builtin_int64
    }

    function *(other:Int16):Int64 {
        return value * other.value->builtin_int64
    }

    function *(other:Int32):Int64 {
        return value * other.value->builtin_int64
    }

    function *(other:Int64):Int64 {
        return value * other.value
    }

    function //(other:Int8):Int64 {
        return value // other.value->builtin_int64
    }

    function //(other:Int16):Int64 {
        return value // other.value->builtin_int64
    }

    function //(other:Int32):Int64 {
        return value // other.value->builtin_int64
    }

    function //(other:Int64):Int64 {
        return value // other.value
    }

    function %(other:Int8):Int64 {
        return value % other.value->builtin_int64
    }

    function %(other:Int16):Int64 {
        return value % other.value->builtin_int64
    }

    function %(other:Int32):Int64 {
        return value % other.value->builtin_int64
    }

    function %(other:Int64):Int64 {
        return value % other.value
    }

    function !!():Int64 {
        return Int64(!!value)
    }

    function &&(other:Int8):Int64 {
        return value && other.value->builtin_int64
    }

    function &&(other:Int16):Int64 {
        return value && other.value->builtin_int64
    }

    function &&(other:Int32):Int64 {
        return value && other.value->builtin_int64
    }

    function &&(other:Int64):Int64 {
        return value && other.value
    }

    function &&(other:UInt8):Int64 {
        return value && other.value->builtin_int64
    }

    function &&(other:UInt16):Int64 {
        return value && other.value->builtin_int64
    }

    function &&(other:UInt32):Int64 {
        return value && other.value->builtin_int64
    }

    function &&(other:UInt64):UInt64 {
        return value->builtin_uint64 && other.value
    }

    function ||(other:Int8):Int64 {
        return value || other.value->builtin_int64
    }

    function ||(other:Int16):Int64 {
        return value || other.value->builtin_int64
    }

    function ||(other:Int32):Int64 {
        return value || other.value->builtin_int64
    }

    function ||(other:Int64):Int64 {
        return value || other.value
    }

    function ||(other:UInt8):Int64 {
        return value || other.value->builtin_int64
    }

    function ||(other:UInt16):Int64 {
        return value || other.value->builtin_int64
    }

    function ||(other:UInt32):Int64 {
        return value || other.value->builtin_int64
    }

    function ||(other:UInt64):UInt64 {
        return value->builtin_uint64 || other.value
    }

    function ~~(other:Int8):Int64 {
        return value ~~ other.value->builtin_int64
    }

    function ~~(other:Int16):Int64 {
        return value ~~ other.value->builtin_int64
    }

    function ~~(other:Int32):Int64 {
        return value ~~ other.value->builtin_int64
    }

    function ~~(other:Int64):Int64 {
        return value ~~ other.value
    }

    function ~~(other:UInt8):Int64 {
        return value ~~ other.value->builtin_int64
    }

    function ~~(other:UInt16):Int64 {
        return value ~~ other.value->builtin_int64
    }

    function ~~(other:UInt32):Int64 {
        return value ~~ other.value->builtin_int64
    }

    function ~~(other:UInt64):UInt64 {
        return value->builtin_uint64 ~~ other.value
    }

    function <<(other:Int8):Int64 {
        return value << other.value->builtin_int64
    }

    function <<(other:Int16):Int64 {
        return value << other.value->builtin_int64
    }

    function <<(other:Int32):Int64 {
        return value << other.value->builtin_int64
    }

    function <<(other:Int64):Int64 {
        return value << other.value
    }

    function <<(other:UInt8):Int64 {
        return value << other.value->builtin_int64
    }

    function <<(other:UInt16):Int64 {
        return value << other.value->builtin_int64
    }

    function <<(other:UInt32):Int64 {
        return value << other.value->builtin_int64
    }

    function <<(other:UInt64):UInt64 {
        return value->builtin_uint64 << other.value
    }

    function >>(other:Int8):Int64 {
        return value >> other.value->builtin_int64
    }

    function >>(other:Int16):Int64 {
        return value >> other.value->builtin_int64
    }

    function >>(other:Int32):Int64 {
        return value >> other.value->builtin_int64
    }

    function >>(other:Int64):Int64 {
        return value >> other.value
    }

    function >>(other:UInt8):Int64 {
        return value >> other.value->builtin_int64
    }

    function >>(other:UInt16):Int64 {
        return value >> other.value->builtin_int64
    }

    function >>(other:UInt32):Int64 {
        return value >> other.value->builtin_int64
    }

    function >>(other:UInt64):UInt64 {
        return value->builtin_uint64 >> other.value
    }

    function =(other:Int8):Bit {
        return value = other.value->builtin_int64
    }

    function =(other:Int16):Bit {
        return value = other.value->builtin_int64
    }

    function =(other:Int32):Bit {
        return value = other.value->builtin_int64
    }

    @override
    function =(other:Int64):Bit {
        return value = other.value
    }

    function !=(other:Int8):Bit {
        return value != other.value->builtin_int64
    }

    function !=(other:Int16):Bit {
        return value != other.value->builtin_int64
    }

    function !=(other:Int32):Bit {
        return value != other.value->builtin_int64
    }

    @override
    function !=(other:Int64):Bit {
        return value != other.value
    }

    function <(other:Int8):Bit {
        return value < other.value->builtin_int64
    }

    function <(other:Int16):Bit {
        return value < other.value->builtin_int64
    }

    function <(other:Int32):Bit {
        return value < other.value->builtin_int64
    }

    @override
    function <(other:Int64):Bit {
        return value < other.value
    }

    function >(other:Int8):Bit {
        return value > other.value->builtin_int64
    }

    function >(other:Int16):Bit {
        return value > other.value->builtin_int64
    }

    function >(other:Int32):Bit {
        return value > other.value->builtin_int64
    }

    @override
    function >(other:Int64):Bit {
        return value > other.value
    }

    function >=(other:Int8):Bit {
        return value >= other.value->builtin_int64
    }

    function >=(other:Int16):Bit {
        return value >= other.value->builtin_int64
    }

    function >=(other:Int32):Bit {
        return value >= other.value->builtin_int64
    }

    @override
    function >=(other:Int64):Bit {
        return value >= other.value
    }

    function <=(other:Int8):Bit {
        return value <= other.value->builtin_int64
    }

    function <=(other:Int16):Bit {
        return value <= other.value->builtin_int64
    }

    function <=(other:Int32):Bit {
        return value <= other.value->builtin_int64
    }

    @override
    function <=(other:Int64):Bit {
        return value <= other.value
    }

    function abs():Int64 {
        if self < 0 {
            return -self
        }
        return self
    }

    function min(other:Int8):Int64 {
        if value < other.value->builtin_int64 {
            return value
        }
        return other.value->builtin_int64
    }

    function min(other:Int16):Int64 {
        if value < other.value->builtin_int64 {
            return value
        }
        return other.value->builtin_int64
    }

    function min(other:Int32):Int64 {
        if value < other.value->builtin_int64 {
            return value
        }
        return other.value->builtin_int64
    }

    function min(other:Int64):Int64 {
        if value < other.value {
            return value
        }
        return other.value
    }





    function max(other:Int8):Int64 {
        if value > other.value->builtin_int64 {
            return value
        }
        return other.value->builtin_int64
    }

    function max(other:Int16):Int64 {
        if value > other.value->builtin_int64 {
            return value
        }
        return other.value->builtin_int64
    }

    function max(other:Int32):Int64 {
        if value > other.value->builtin_int64 {
            return value
        }
        return other.value->builtin_int64
    }

    function max(other:Int64):Int64 {
        if value > other.value {
            return value
        }
        return other.value
    }





    function [](index:Int8):Bit {
        return self && (1 << index) != 0
    }

    function [](index:Int16):Bit {
        return self && (1 << index) != 0
    }

    function [](index:Int32):Bit {
        return self && (1 << index) != 0
    }

    function [](index:Int64):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt8):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt16):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt32):Bit {
        return self && (1 << index) != 0
    }

    function [](index:UInt64):Bit {
        return self && (1 << index) != 0
    }

    @override
    function hash():Int {
        return Int(value)
    }

    @class
    function parse(str:String, radix:Int):Int64? {
        if str.startsWith("-") {
            def abs := Panda.parse(str[1..], radix)
            if abs = null {
                return null
            }
            return -(abs.convert()->Int64)
        }
        else {
            def result := Panda.parse(str, radix)
            if result = null {
                return null
            }
            return result.convert()->Int64
        }
    }

    function convert():Int8 {
        return Int8(value->builtin_int8)
    }

    function convert():Int16 {
        return Int16(value->builtin_int16)
    }

    function convert():Int32 {
        return Int32(value->builtin_int32)
    }

    function convert():UInt8 {
        return UInt8(value->builtin_uint8)
    }

    function convert():UInt16 {
        return UInt16(value->builtin_uint16)
    }

    function convert():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    function convert():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    function convert():Real32 {
        return Real32(value->builtin_float32)
    }

    function convert():Real64 {
        return Real64(value->builtin_float64)
    }

    @override
    function convert():String {
        constant max := 20
        def chars := Pointer<Char8>.alloc(max)
        var index := max - 1
        var value := self
        if value >= 0 {
            do {
                chars[index] := Char8((value % 10 + 48).convert())
                value := (value // 10)
                index -= 1
            }
            while value > 0
            index += 1
        }
        else {
            do {
                chars[index] := Char8((48 - value % 10).convert())
                value := (value // 10)
                index -= 1
            }
            while value < 0
            chars[index] := "-"
        }
        def size := max - index
        for i in 0 .. size {
            chars[i] := chars[i + index]
        }
        return String(chars, size)
    }

    @override
    function format(fmt:String):String {
        return Panda.format(value < 0, abs().convert(), 0xFFFFFFFFFFFFFFFF, fmt)
    }
}
