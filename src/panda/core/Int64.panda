package panda.core

class Int64 : Value {
    @$implicit
    init(value:builtin_int64) {
        self.value := value
    }

    function +(other:Int64):Int64 {
        return Int64(value + other.value)
    }

    function -(other:Int64):Int64 {
        return Int64(value - other.value)
    }

    function *(other:Int64):Int64 {
        return Int64(value * other.value)
    }

    function //(other:Int64):Int64 {
        return Int64(value // other.value)
    }

    function -():Int64 {
        return Int64(-value)
    }

    function !!():Int64 {
        return Int64(!!value)
    }

    function ||(other:Int64):Int64 {
        return Int64(value || other.value)
    }

    function &&(other:Int64):Int64 {
        return Int64(value && other.value)
    }

    function ~~(other:Int64):Int64 {
        return Int64(value ~~ other.value)
    }

    function <<(other:Int64):Int64 {
        return Int64(value << other.value)
    }

    function >>(other:Int64):Int64 {
        return Int64(value >> other.value)
    }

    function =(other:Int64):Bit {
        return value = other.value
    }

    function !=(other:Int64):Bit {
        return value != other.value
    }

    function >(other:Int64):Bit {
        return value > other.value
    }

    function <(other:Int64):Bit {
        return value < other.value
    }

    function >=(other:Int64):Bit {
        return value >= other.value
    }

    function <=(other:Int64):Bit {
        return value <= other.value
    }

    function [](index:Int64):Bit {
        return (value >> index.value && 1) != 0
    }

    @private
    def value:builtin_int64
}