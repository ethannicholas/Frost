package panda.core

uses panda.unsafe.Pointer

@final
class MutableString {
    @private
    constant DEFAULT_SIZE := 32

    @private
    var data:Pointer<Char8>

    @private
    var length:Int

    @private
    var maxLength:Int

    init() {
        length := 0
        maxLength := DEFAULT_SIZE
        data := Pointer<Char8>.alloc(maxLength)
    }

    init(s:String) {
        length := 0
        maxLength := length + DEFAULT_SIZE
        data := Pointer<Char8>.alloc(maxLength)
        append(s)
    }

    @override
    @private
    method cleanup() {
        data.destroy()
    }

    method append(c:Char8) {
        ensureCapacity(length + 1)
        data[length] := c
        length += 1
    }

    method append(s:String) {
        ensureCapacity(length + s._length)
        for i in 0 .. s._length {
            data[length + i] := s.data[i]
        }
        length += s._length
    }

    method append(chars:Pointer<Char8>, offset:Int, count:Int) {
        ensureCapacity(length + count)
        for i in 0 .. count {
            data[length + i] := chars[offset + i]
        }
        length += count
    }

    method append(o:Object) {
        append(o.convert()->String)
    }

    @private
    method ensureCapacity(newSize:Int) {
        if maxLength >= newSize {
            return
        }
        while maxLength < newSize {
            maxLength *= 2
        }
        data := data.realloc(maxLength)
    }

    method clear() {
        if valid() {
            data := data.realloc(DEFAULT_SIZE)
        }
        else {
            data := Pointer<Char8>.alloc(DEFAULT_SIZE)
        }
        length := 0
        maxLength := DEFAULT_SIZE
    }

    ================================================================================================
    Returns an immutable copy of this `MutableString`. Typically it is better to use [finish()] for
    performance reasons, as that does not make a copy.
    ================================================================================================
    @override
    function convert():String {
        def result := Pointer<Char8>.alloc(length)
        for i in 0 .. length {
            result[i] := data[i]
        }
        return String(result, length)
    }

    ================================================================================================
    Invalidates this `MutableString` and returns its contents as an immutable `String`. This is
    generally preferable to [convert()], as it does not copy the string's contents. Interacting with
    a `MutableString` after `finish`ing it, without first issuing a [clear()], violates its
    preconditions.
    ================================================================================================
    method finish():String {
        def result := String(data, length)
        maxLength := -1
        return result
    }

    function valid():Bit {
        return maxLength >= 0
    }
}