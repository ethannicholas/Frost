-- This file was autogenerated by 'writeints', do not modify
package panda.core

class Int8 : Value {
    constant MIN:Int8 := -128

    constant MAX:Int8 := 127

    @private
    def value:builtin_int8

    @$implicit
    init(value:builtin_int8) {
        self.value := value
    }

    function +(other:Int8):Int32 {
        return value->builtin_int32 + other.value->builtin_int32
    }

    function +(other:Int16):Int32 {
        return value->builtin_int32 + other.value->builtin_int32
    }

    function +(other:Int32):Int32 {
        return value->builtin_int32 + other.value
    }

    function +(other:Int64):Int64 {
        return value->builtin_int64 + other.value
    }

    function -(other:Int8):Int32 {
        return value->builtin_int32 - other.value->builtin_int32
    }

    function -(other:Int16):Int32 {
        return value->builtin_int32 - other.value->builtin_int32
    }

    function -(other:Int32):Int32 {
        return value->builtin_int32 - other.value
    }

    function -(other:Int64):Int64 {
        return value->builtin_int64 - other.value
    }

    function -():Int8 {
        return Int8(-value)
    }

    function *(other:Int8):Int32 {
        return value->builtin_int32 * other.value->builtin_int32
    }

    function *(other:Int16):Int32 {
        return value->builtin_int32 * other.value->builtin_int32
    }

    function *(other:Int32):Int32 {
        return value->builtin_int32 * other.value
    }

    function *(other:Int64):Int64 {
        return value->builtin_int64 * other.value
    }

    function //(other:Int8):Int32 {
        return value->builtin_int32 // other.value->builtin_int32
    }

    function //(other:Int16):Int32 {
        return value->builtin_int32 // other.value->builtin_int32
    }

    function //(other:Int32):Int32 {
        return value->builtin_int32 // other.value
    }

    function //(other:Int64):Int64 {
        return value->builtin_int64 // other.value
    }

    function %(other:Int8):Int32 {
        return value->builtin_int32 % other.value->builtin_int32
    }

    function %(other:Int16):Int32 {
        return value->builtin_int32 % other.value->builtin_int32
    }

    function %(other:Int32):Int32 {
        return value->builtin_int32 % other.value
    }

    function %(other:Int64):Int64 {
        return value->builtin_int64 % other.value
    }

    function !!():Int8 {
        return Int8(!!value)
    }

    function &&(other:Int8):Int32 {
        return value->builtin_int32 && other.value->builtin_int32
    }

    function &&(other:Int16):Int32 {
        return value->builtin_int32 && other.value->builtin_int32
    }

    function &&(other:Int32):Int32 {
        return value->builtin_int32 && other.value
    }

    function &&(other:Int64):Int64 {
        return value->builtin_int64 && other.value
    }

    function ||(other:Int8):Int32 {
        return value->builtin_int32 || other.value->builtin_int32
    }

    function ||(other:Int16):Int32 {
        return value->builtin_int32 || other.value->builtin_int32
    }

    function ||(other:Int32):Int32 {
        return value->builtin_int32 || other.value
    }

    function ||(other:Int64):Int64 {
        return value->builtin_int64 || other.value
    }

    function ~~(other:Int8):Int32 {
        return value->builtin_int32 ~~ other.value->builtin_int32
    }

    function ~~(other:Int16):Int32 {
        return value->builtin_int32 ~~ other.value->builtin_int32
    }

    function ~~(other:Int32):Int32 {
        return value->builtin_int32 ~~ other.value
    }

    function ~~(other:Int64):Int64 {
        return value->builtin_int64 ~~ other.value
    }

    function <<(other:Int8):Int32 {
        return value->builtin_int32 << other.value->builtin_int32
    }

    function <<(other:Int16):Int32 {
        return value->builtin_int32 << other.value->builtin_int32
    }

    function <<(other:Int32):Int32 {
        return value->builtin_int32 << other.value
    }

    function <<(other:Int64):Int64 {
        return value->builtin_int64 << other.value
    }

    function >>(other:Int8):Int32 {
        return value->builtin_int32 >> other.value->builtin_int32
    }

    function >>(other:Int16):Int32 {
        return value->builtin_int32 >> other.value->builtin_int32
    }

    function >>(other:Int32):Int32 {
        return value->builtin_int32 >> other.value
    }

    function >>(other:Int64):Int64 {
        return value->builtin_int64 >> other.value
    }

    function =(other:Int8):Bit {
        return value = other.value
    }

    function =(other:Int16):Bit {
        return value->builtin_int16 = other.value
    }

    function =(other:Int32):Bit {
        return value->builtin_int32 = other.value
    }

    function =(other:Int64):Bit {
        return value->builtin_int64 = other.value
    }

    function !=(other:Int8):Bit {
        return value != other.value
    }

    function !=(other:Int16):Bit {
        return value->builtin_int16 != other.value
    }

    function !=(other:Int32):Bit {
        return value->builtin_int32 != other.value
    }

    function !=(other:Int64):Bit {
        return value->builtin_int64 != other.value
    }

    function <(other:Int8):Bit {
        return value < other.value
    }

    function <(other:Int16):Bit {
        return value->builtin_int16 < other.value
    }

    function <(other:Int32):Bit {
        return value->builtin_int32 < other.value
    }

    function <(other:Int64):Bit {
        return value->builtin_int64 < other.value
    }

    function >(other:Int8):Bit {
        return value > other.value
    }

    function >(other:Int16):Bit {
        return value->builtin_int16 > other.value
    }

    function >(other:Int32):Bit {
        return value->builtin_int32 > other.value
    }

    function >(other:Int64):Bit {
        return value->builtin_int64 > other.value
    }

    function >=(other:Int8):Bit {
        return value >= other.value
    }

    function >=(other:Int16):Bit {
        return value->builtin_int16 >= other.value
    }

    function >=(other:Int32):Bit {
        return value->builtin_int32 >= other.value
    }

    function >=(other:Int64):Bit {
        return value->builtin_int64 >= other.value
    }

    function <=(other:Int8):Bit {
        return value <= other.value
    }

    function <=(other:Int16):Bit {
        return value->builtin_int16 <= other.value
    }

    function <=(other:Int32):Bit {
        return value->builtin_int32 <= other.value
    }

    function <=(other:Int64):Bit {
        return value->builtin_int64 <= other.value
    }

    function max(other:Int8):Int8 {
        if value > other.value {
            return value
        }
        return other.value
    }

    function max(other:Int16):Int16 {
        if value->builtin_int16 > other.value {
            return value->builtin_int16
        }
        return other.value
    }

    function max(other:Int32):Int32 {
        if value->builtin_int32 > other.value {
            return value->builtin_int32
        }
        return other.value
    }

    function max(other:Int64):Int64 {
        if value->builtin_int64 > other.value {
            return value->builtin_int64
        }
        return other.value
    }

    @override
    function =(other:Object):Bit {
        -- FIXME need to check other's class
        return value = (other->Int8).value
    }

    function convert():Int16 {
        return Int16(value->builtin_int16)
    }

    function convert():Int32 {
        return Int32(value->builtin_int32)
    }

    function convert():Int64 {
        return Int64(value->builtin_int64)
    }

    @override
    function convert():String {
        constant max := 4
        def chars := Pointer<Char8>.alloc(max)
        var index := max - 1
        var value := self
        if value >= 0 {
            do {
                chars[index] := Char8((value % 10 + 48).value->builtin_int8)
                value := (value // 10).convert()->Int8
                index -= 1
            }
            while value > 0
            index += 1
        }
        else {
            do {
                chars[index] := Char8((48 - value % 10).value->builtin_int8)
                value := (value // 10).convert()->Int8
                index -= 1
            }
            while value < 0
            chars[index] := Char8(45) -- "-"
        }
        def size := max - index
        def result := Pointer<Char8>.alloc(size)
        for i in index .. max {
            result[i - index] := chars[i]
        }
        chars.destroy()
        return String(result, size)
    }
}
