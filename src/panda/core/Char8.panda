package panda.core

uses panda.unsafe.Pointer

====================================================================================================
Depending on context, represents either a Unicode codepoint in the range 0 to 255 or a single byte
of a UTF-8 encoded string. For ASCII characters (0 to 127), there is no difference between the two
interpretations.
====================================================================================================
@final
class Char8 : Value, Key<Char8> {
    init(value:UInt8) {
        self.value := value.value
    }

    @override
    function =(other:Char8):Bit {
        return value = other.value
    }

    @override
    function !=(other:Char8):Bit {
        return value != other.value
    }

    function isWhitespace():Bit {
        return value = 10 | value = 13 | value = 9 | value = 32
    }

    @override
    function hash():Int {
        return convert()
    }

    function convert():Int8 {
        return Int8(value->builtin_int8)
    }

    function convert():Int16 {
        return Int16(value->builtin_int16 && 0xFF)
    }

    function convert():Int32 {
        return Int32(value->builtin_int32 && 0xFF)
    }

    function convert():Int64 {
        return Int64(value->builtin_int64 && 0xFF)
    }

    function convert():UInt8 {
        return UInt8(value)
    }

    function convert():UInt16 {
        return UInt16(value->builtin_uint16)
    }

    function convert():UInt32 {
        return UInt32(value->builtin_uint32)
    }

    function convert():UInt64 {
        return UInt64(value->builtin_uint64)
    }

    ================================================================================================
    Interprets this character as a Unicode codepoint and converts it to a string. Note that if this
    `Char8` represents part of a multi-byte UTF-8 sequence (e.g. it came from [String.utf8]),
    interpreting it as a Unicode codepoint in its own right is incorrect and will lead to mangled
    strings.
    ================================================================================================
    @override
    function convert():String {
        -- FIXME change to < 0x80 when uints are in
        if value > 0 {
            def data := Pointer<Char8>.alloc(1)
            data[0] := self
            return String(data, 1)
        }
        def data := Pointer<Char8>.alloc(2)
        data[0] := Char8(UInt8((value->builtin_uint16 >> 6 || 0b11000000)->builtin_uint8))
        data[1] := Char8(UInt8((value->builtin_uint16 && 0b111111 || 0b10000000)->builtin_uint8))
        return String(data, 2)
    }

    @private
    def value:builtin_uint8
}