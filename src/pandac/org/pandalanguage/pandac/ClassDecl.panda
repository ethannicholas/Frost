package org.pandalanguage.pandac

class ClassDecl : Symbol {
    class Kind {
        constant CLASS     := 5011
        constant INTERFACE := 5012
    }

    class GenericParameter : Symbol {
        def owner:String

        def bound:org.pandalanguage.pandac.Type -- FIXME unnecessary qualification

        init(offset:Int, owner:String, name:String, bound:org.pandalanguage.pandac.Type) { -- FIXME qualification
            self.owner := owner
            self.bound := bound
            super.init(Symbol.Kind.GENERIC_PARAMETER, offset, name)
        }

        @override
        function convert():String {
            return "\{owner}.\{name}:\{bound}"
        }
    }

    def source:File

    def aliases:MapView<String, String>

    def doccomment:String?

    def annotations:Annotations

    def classKind:Int

    def rawSuper:Type?

    def rawInterfaces:Array<Type>

    def parameters:List<GenericParameter>

    def fields := Array<FieldDecl>()

    def methods := Array<MethodDecl>()

    def classes := Array<ClassDecl>()

    def owner:ClassDecl? := null

    def symbolTable:SymbolTable

    -- true if we have added all of the parent symboltables to this one
    var symbolTableResolved := false

    var external := true

    def virtualMethods := Array<MethodDecl>()

    var resolved:Bit

    init(source:File, offset:Int, aliases:MapView<String, String>, doccomment:String?,
            annotations:Annotations, kind:Int, name:String, rawSuper:Type?,
            rawInterfaces:Array<Type>, parameters:Array<GenericParameter>, parent:SymbolTable) {
        super.init(Symbol.Kind.CLASS, offset, name)
        self.source := source
        self.aliases := HashMap<String, String>(aliases)
        self.doccomment := doccomment
        self.annotations := annotations
        self.classKind := kind
        self.rawSuper := rawSuper
        self.rawInterfaces := rawInterfaces
        self.parameters := parameters
        self.symbolTable := SymbolTable(parent)
        self.resolved := false
        for p in parameters {
            symbolTable.add(p)
        }
    }

    function type():Type {
        return Type(name, Type.Kind.CLASS, -1, true)
    }

    function typeWithParameters():Type {
        if parameters.get_count() = 0 {
            return type()
        }
        def subtypes := Array<Type>()
        subtypes.add(type())
        def name := MutableString(self.name)
        name.append("<")
        var separator := ""
        for p in parameters {
            def t := Type(self.name + "." + p.name, Type.Kind.GENERIC_PARAMETER, -1, true)
            subtypes.add(t)
            name.append(separator)
            name.append(t.name)
            separator := ", "
        }
        name.append(">")
        return Type(name.convert(), Type.Kind.GENERIC, -1, subtypes, true)
    }

    function isSpecialization():Bit {
        return name.contains("<")
    }

    @override
    function convert():String {
        def result := MutableString("class \{name}")
        if rawSuper != Type.Void() {
            result.append(":\{rawSuper}")
        }
        if rawInterfaces.get_count() > 0 {
            result.append(" (")
            var separator := ""
            for intf in rawInterfaces {
                result.append("\{separator}\{intf}")
                separator := ", "
            }
            result.append(")")
        }
        result.append(" {\n")
        for f in fields {
            result.append("\{f}\n")
        }
        for m in methods {
            result.append("\{m}\n")
        }
        result.append("}")
        return result.convert()
    }
}