package org.pandalanguage.pandac

@final
class ClassDecl {
    choice Kind {
        CLASS
        INTERFACE
        CHOICE
    }

    ================================================================================================
    Field which holds the numeric value of choice instances.
    ================================================================================================
    constant RAW_VALUE_NAME := "$rawValue"

    ================================================================================================
    Placeholder field for the data associated with choice entries. The CodeGenerator will make this
    field big enough to hold the biggest choice entry.
    ================================================================================================
    constant CHOICE_DATA_NAME := "$data"

    class GenericParameter : Symbol {
        def owner:String

        def bound:Type

        init(position:Position, owner:String, name:String, bound:Type) {
            self.owner := owner
            self.bound := bound
            super.init(Symbol.Kind.GENERIC_CLASS_PARAMETER, position, name)
        }

        @override
        function convert():String {
            return "\{owner}.\{name}:\{bound}"
        }
    }

    class Resolution {
        @weak
        def value:ClassDecl?

        init(value:ClassDecl?) {
            self.value := value
        }
    }

    def source:File

    def position:Position

    def name:String

    def type:Type

    ================================================================================================
    Maps simple class names to fully-qualified class names. This is populated from "uses" statements
    which were in effect when this class was parsed as well as built-in implicit aliases.
    ================================================================================================
    def aliases:MapView<String, String>

    def doccomment:String?

    def annotations:Annotations

    def classKind:Kind

    ================================================================================================
    All declared superclasses / superinterfaces as listed in the source code. These are always
    unresolved; the resolved supertypes are used to populate rawSuper and rawInterfaces.
    ================================================================================================
    def declaredSupers:Array<Type>

    ================================================================================================
    "Raw" in the sense that it has not yet been remapped. For example, the rawSuper of HashMap is
    Map<HashMap.K, HashMap.V>, which is then remapped to figure out the supertype of a particular
    instantiation of HashMap.

    This remains null until the class is resolved.
    ================================================================================================
    def rawSuper:Type? := null

    ================================================================================================
    Comments from rawSuper apply.
    ================================================================================================
    def rawInterfaces := Array<Type>()

    def parameters:List<GenericParameter>

    def fields := Array<FieldDecl>()

    def methods := Array<MethodDecl>()

    def classes := Array<ClassDecl>()

    def choiceCases := Array<ChoiceCase>()

    @weak
    def owner:ClassDecl? := null

    def symbolTable:SymbolTable

    -- true if we have added all of the parent symboltables to this one
    var symbolTableResolved := false

    var external := true

    def virtualMethods := Array<MethodDecl>()

    def classResolutionCache := HashMap<String, Resolution>()

    var resolved:Compiler.Resolution

    @pre(!type.isClassLiteral)
    init(source:File, position:Position, aliases:MapView<String, String>, doccomment:String?,
            annotations:Annotations, kind:Kind, type:Type, declaredSupers:ListView<Type>,
            parameters:Array<GenericParameter>, parent:SymbolTable) {
        self.position := position
        self.name := type.name
        self.type := type
        self.source := source
        self.aliases := HashMap<String, String>(aliases)
        self.doccomment := doccomment
        self.annotations := annotations
        self.classKind := kind
        self.declaredSupers := Array<Type>(declaredSupers)
        self.parameters := parameters
        self.symbolTable := SymbolTable(parent)
        self.resolved := Compiler.Resolution.UNRESOLVED
        symbolTable.compiler.currentClass.push(self)
        for p in parameters {
            symbolTable.add(p)
        }
        assert symbolTable.compiler.currentClass[0] == self
        symbolTable.compiler.currentClass.pop()
    }

    init(source:File, position:Position, aliases:MapView<String, String>, doccomment:String?,
            annotations:Annotations, kind:Kind, name:String, declaredSupers:ListView<Type>,
            parameters:Array<GenericParameter>, parent:SymbolTable) {
        self.init(source, position, aliases, doccomment, annotations, kind,
                Type(name, Type.Kind.CLASS, Position(), true), declaredSupers, parameters, parent)
    }

    function simpleName():String {
        def index := name.lastIndexOf(".")
        if index == null {
            return name
        }
        return name[name.next(index)..]
    }

    function typeWithParameters():Type {
        if parameters.count = 0 {
            return type
        }
        def finalParameters := Array<Type>()
        for p in parameters {
            finalParameters.add(Type(p))
        }
        return Type.generic(type, finalParameters)
    }

    function isSpecialization():Bit {
        return name.contains("<")
    }

    @override
    function convert():String {
        def result := MutableString("\{annotations}class \{name}")
        var separator := " : "
        if rawSuper !== null {
            result.append("\{separator}\{rawSuper}")
            separator := ", "
        }
        for intf in rawInterfaces {
            result.append("\{separator}\{intf}")
            separator := ", "
        }
        result.append(" {\n")
        for cl in classes {
            result.append("\{cl}\n")
        }
        for f in fields {
            result.append("\{f}\n")
        }
        for m in methods {
            result.append("\{m}\n")
        }
        result.append("}")
        return result.finish()
    }
}