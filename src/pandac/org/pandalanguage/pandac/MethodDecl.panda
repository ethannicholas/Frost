package org.pandalanguage.pandac

@final
class MethodDecl : Symbol {
    choice Kind {
        METHOD
        FUNCTION
        INIT
    }

    class Parameter {
        def name:String

        def type:Type

        init(name:String, type:org.pandalanguage.pandac.Type) {
            self.name := name
            self.type := type
        }

        @override
        function convert():String {
            return "\{name}:\{type}"
        }
    }

    @weak
    def owner:ClassDecl

    def doccomment:String?

    def annotations:Annotations

    def methodKind:Kind

    def parameters:Array<Parameter>

    def returnType:Type

    def body:ImmutableArray<ASTNode>?

    -- only set for @inline methods
    def compiledBody:ImmutableArray<IRNode>? := null

    var resolved:Bit

    var overrideKnown := false

    @weak
    var overridden:MethodDecl? := null

    init(owner:ClassDecl, position:Position, doccomment:String?, annotations:Annotations,
            methodKind:Kind, name:String, parameters:Array<Parameter>, returnType:Type,
            body:ImmutableArray<ASTNode>?) {
        super.init(Symbol.Kind.METHOD, position, name)
        self.owner := owner
        self.doccomment := doccomment
        self.annotations := annotations
        self.methodKind := methodKind
        self.parameters := parameters
        self.returnType := returnType
        self.body := body
        self.resolved := false
    }

    @override
    function get_heritable():Bit {
        return methodKind != Kind.INIT
    }

    function isVirtual():Bit {
        return !annotations.isClass() & methodKind != Kind.INIT & !annotations.isFinal()
    }

    function isInstance():Bit {
        return !annotations.isClass()
    }

    function matches(other:MethodDecl):Bit {
        assert resolved & other.resolved
        if name != other.name {
            return false
        }
        if returnType != other.returnType {
            return false
        }
        if parameters.get_count() != other.parameters.get_count() {
            return false
        }
        for i in 0 .. parameters.get_count() {
            if parameters[i].type != other.parameters[i].type {
                return false
            }
        }
        return true
    }

    function type():Type {
        def paramTypes := Array<Type>(parameters.get_count()) -- FIXME use map
        for p in parameters {
            paramTypes.add(p.type)
        }
        def kind:Type.Kind
        if methodKind = Kind.FUNCTION {
            kind := Type.Kind.FUNCTION
        }
        else {
            kind := Type.Kind.METHOD
        }
        return Type.methodType(position, kind, paramTypes, returnType)
    }

    function signature():String {
        def result := MutableString("\{name}(")
        var separator := ""
        for p in parameters {
            result.append(separator)
            result.append(p)
            separator := ", "
        }
        result.append(")")
        if returnType != Type.Void() {
            result.append(":\{returnType}")
        }
        return result.finish()
    }

    function declaration():String {
        match methodKind {
            when Kind.METHOD:
                return("method \{owner.name}.\{signature()}")
            when Kind.FUNCTION:
                return("function \{owner.name}.\{signature()}")
            when Kind.INIT:
                return("\{owner.name}.\{signature()}")
        }
    }

    @override
    function convert():String {
        if body != null {
            return "\{signature()} \{body}"
        }
        return signature()
    }
}