package org.pandalanguage.pandac.statement

uses org.pandalanguage.pandac.ASTNode
uses org.pandalanguage.pandac.Compiler
uses org.pandalanguage.pandac.Compiler.TypeContext
uses org.pandalanguage.pandac.IR
uses org.pandalanguage.pandac.Position
uses org.pandalanguage.pandac.expression.Binary
uses org.pandalanguage.pandac.expression.Call
uses org.pandalanguage.pandac.lvalue.LValue
uses org.pandalanguage.pandac.parser.Token

class Assignment {
    @class
    method compile(compiler:Compiler, position:Position, rawLeft:ASTNode, op:Token.Kind,
            rawRight:ASTNode) {
        if !Compiler.isAssignment(op) {
            compiler.error(position, "not a statement")
            return
        }
        if op = Token.Kind.ASSIGNMENT {
            match rawLeft {
                when ASTNode.BINARY(position, base, op, index) {
                    if op = Token.Kind.LBRACKET {
                        def args := Array<ASTNode>()
                        def compiledBase := compiler.compileExpression(base, TypeContext.NON_VOID)
                        if compiledBase == null {
                            return
                        }
                        args.add(index)
                        args.add(rawRight)
                        Call.compile(compiler, position, compiledBase, "[]:=", args,
                                TypeContext.UNSPECIFIED)
                        return
                    }
                }
            }
        }
        def left := LValue.compile(compiler, rawLeft)
        if left == null {
            return
        }
        def right:IR.Value?
        if op = Token.Kind.ASSIGNMENT {
            right := compiler.compileExpression(rawRight, TypeContext.TYPE(left.type()))
        }
        else {
            right := Binary.compile(compiler, position,
                    ASTNode.IR_WRAPPER(position, left.compileLoad()),
                    Compiler.removeAssignment(op),
                    rawRight,
                    TypeContext.TYPE(left.type()))
        }
        if right == null {
            return
        }
        left.compileStore(right)
    }
}