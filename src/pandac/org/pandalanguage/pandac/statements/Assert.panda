package org.pandalanguage.pandac.statements

uses org.pandalanguage.pandac.ASTNode
uses org.pandalanguage.pandac.Compiler
uses org.pandalanguage.pandac.Compiler.AutoUnrefs
uses org.pandalanguage.pandac.Compiler.EnclosingContext
uses org.pandalanguage.pandac.Compiler.TypeContext
uses org.pandalanguage.pandac.IR
uses org.pandalanguage.pandac.MethodDecl
uses org.pandalanguage.pandac.MethodRef
uses org.pandalanguage.pandac.Methods
uses org.pandalanguage.pandac.Position
uses org.pandalanguage.pandac.Type

class Assert {
    @class
    method compileFail(compiler:Compiler, position:Position, msg:ASTNode?) {
        {
            def unrefs := AutoUnrefs(compiler)
            def args := Array<ASTNode>()
            args.add(ASTNode.STRING(position, compiler.currentClass[0].source.name))
            args.add(ASTNode.INT(position, position.line.convert()))
            def panda := compiler.getClass(Type.Panda())
            def m:MethodDecl
            if msg !== null {
                m := compiler.getSymbolTable(panda)["assertionFailure"]->Methods.methods[0]
                args.add(msg)
            }
            else {
                m := compiler.getSymbolTable(panda)["assertionFailure"]->Methods.methods[1]
            }
            if !compiler.resolve(m) {
                return
            }
            Call.compile(compiler, position, null, MethodRef(compiler, Type.Panda(), m), args,
                    TypeContext.UNSPECIFIED)
        }
        compiler.ir.add(IR.Statement.UNREACHABLE(position))
    }

    @class
    method compile(compiler:Compiler, position:Position, test:ASTNode, msg:ASTNode?) {
        def ir := compiler.ir
        def compiledTest := compiler.compileExpression(test, TypeContext.TYPE(Type.Bit()))
        if compiledTest == null {
            return
        }
        def success := ir.newBlock("assert success")
        def failure := ir.newBlock("assert failure")
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, compiler.extractBuiltinBit(position,
                compiledTest), success, failure))
        ir.setCurrentBlock(failure)
        compileFail(compiler, position, msg)
        ir.setCurrentBlock(success)
    }
}