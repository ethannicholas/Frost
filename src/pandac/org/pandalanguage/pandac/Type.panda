package org.pandalanguage.pandac

@final
class Type : Symbol (Key<Type>) {
    class Kind {
        constant CLASS := 10
        constant NULLABLE := 11
        constant BUILTIN_INT := 12
        constant BUILTIN_UINT := 13
        constant VOID := 14
        constant INT_LITERAL := 15
        constant INVALID := 16
        constant UNRESOLVED := 17
        constant BIT_LITERAL := 18
        constant BUILTIN_BIT := 19
        constant BUILTIN_FLOAT := 20
        constant GENERIC := 21
        constant GENERIC_PARAMETER := 22
        constant NULL := 23
        constant FUNCTION := 24
        constant METHOD := 25
    }

    def resolved:Bit

    def typeKind:Int

    def subtypes:ImmutableArray<Type>

    init(name:String, typeKind:Int, offset:Int) {
        init(name, typeKind, offset, false)
    }

    init(name:String, typeKind:Int, offset:Int, resolved:Bit) {
        assert !name.endsWith("?")
        self.typeKind := typeKind
        self.offset := offset
        self.resolved := resolved
        self.subtypes := ImmutableArray<Type>()
        super.init(Symbol.Kind.TYPE, offset, name)
    }

    init(name:String, typeKind:Int, offset:Int, subtypes:ListView<Type>, resolved:Bit) {
        assert (typeKind = Kind.NULLABLE) = name.endsWith("?"),
                "invalid type: name=\{name}, nullable=\{typeKind = Kind.NULLABLE}"
        assert (typeKind = Kind.GENERIC) = name.endsWith(">"),
                "invalid type: name=\{name}, generic=\{typeKind = Kind.GENERIC}"
        self.typeKind := typeKind
        self.offset := offset
        self.resolved := resolved
        self.subtypes := ImmutableArray<Type>(subtypes)
        super.init(Symbol.Kind.TYPE, offset, name)
    }

    init(subtypes:ListView<Type>) {
        self.typeKind := Kind.UNRESOLVED
        self.subtypes := ImmutableArray<Type>(subtypes)
        def name := MutableString("unresolved<")
        var separator := ""
        self.resolved := true
        for t in subtypes {
            name.append(separator)
            name.append(t)
            separator := "|"
            self.resolved &= t.resolved
        }
        name.append(">")
        super.init(Symbol.Kind.TYPE, offset, name.convert())
    }

    function size():Int {
        assert typeKind = Kind.BUILTIN_INT | typeKind = Kind.BUILTIN_UINT, "not a number: \{self}"
        return offset
    }

    @override
    function =(other:Type):Bit {
        return name = other.name
    }

    @override
    function !=(other:Type):Bit {
        return name != other.name
    }

    @class
    method Void():Type {
        return Type("void", Kind.VOID, -1, true)
    }

    @class
    method Null():Type {
        return Type("null", Kind.NULL, -1, true)
    }

    @class
    method Object():Type {
        return Type("panda.core.Object", Kind.CLASS, -1, true)
    }

    @class
    method Any():Type {
        def subtypes := Array<Type>()
        subtypes.add(Object())
        return Type("panda.core.Object?", Kind.NULLABLE, -1, subtypes, true)
    }

    @class
    method Class():Type {
        return Type("panda.core.Class", Kind.CLASS, -1, true)
    }

    @class
    method Value():Type {
        return Type("panda.core.Value", Kind.CLASS, -1, true)
    }

    @class
    method StringType():Type {
        return Type("panda.core.String", Kind.CLASS, -1, true)
    }

    @class
    method Int64():Type {
        return Type("panda.core.Int64", Kind.CLASS, -1, true)
    }

    @class
    method Bit():Type {
        return Type("panda.core.Bit", Kind.CLASS, -1, true)
    }

    @class
    method IntLiteral():Type {
        return Type("$int_literal", Kind.INT_LITERAL, -1, true)
    }

    @class
    method BitLiteral():Type {
        return Type("$bit_literal", Kind.BIT_LITERAL, -1, true)
    }

    @class
    method BuiltinBit():Type {
        return Type("builtin_bit", Kind.BUILTIN_BIT, -1, true)
    }

    @class
    method Iterator():Type {
        return Type("panda.collections.Iterator", Kind.CLASS, -1, true)
    }

    @class
    method Iterable():Type {
        return Type("panda.collections.Iterable", Kind.CLASS, -1, true)
    }

    @class
    method Panda():Type {
        return Type("panda.core.Panda", Kind.CLASS, -1, true)
    }

    @class
    method RangeOf(t:Type):Type {
        def children := Array<Type>() -- FIXME literal
        children.add(Type(Compiler.RANGE_NAME, Kind.CLASS, -1, true))
        children.add(t)
        return Type("\{Compiler.RANGE_NAME}<\{t}>", Kind.GENERIC, t.offset, children, t.resolved)
    }

    @class
    method Invalid():Type {
        return Type("<invalid>", Kind.INVALID, -1, true)
    }

    function isNumber():Bit {
        return name.startsWith("panda.core.Int") | name.startsWith("panda.core.UInt")
    }

    function isBuiltinNumber():Bit {
        return typeKind = Kind.BUILTIN_INT | typeKind = Kind.BUILTIN_UINT |
                typeKind = Kind.INT_LITERAL
    }

    function isClass():Bit {
        match typeKind {
            when Kind.CLASS, Kind.NULLABLE, Kind.GENERIC:
                return true
            otherwise:
                return false
        }
    }

    function isMethod():Bit {
        return typeKind = Kind.METHOD | typeKind = Kind.FUNCTION
    }

    function isPointer():Bit {
        return name.startsWith("panda.unsafe.Pointer")
    }

    function isRange():Bit {
        if typeKind = Kind.NULLABLE {
            return subtypes[0].isRange()
        }
        return typeKind = Kind.GENERIC & subtypes[0].name = Compiler.RANGE_NAME
    }

    function nullable():Type {
        assert typeKind != Kind.NULLABLE
        def subtypes := Array<Type>()
        subtypes.add(self)
        return Type("\{name}?", Kind.NULLABLE, -1, subtypes, true)
    }

    -- returns the narrowest type that can hold an instance of either type
    function union(other:Type):Type {
        if self = other {
            return self
        }
        if self = Null() {
            if other.typeKind = Kind.NULLABLE {
                return other
            }
            return other.nullable()
        }
        if other = Null() {
            if typeKind = Kind.NULLABLE {
                return self
            }
            return nullable()
        }
        if self = IntLiteral() & other.isNumber() {
            return other
        }
        if isNumber() & other = IntLiteral() {
            return self
        }
        -- FIXME not implemented
        return Type.Any()
    }

    method remap(types:HashMap<String, Type>):Type {
        if types.get_count() = 0 {
            return self
        }
        match typeKind {
            when Kind.GENERIC_PARAMETER:
                def found := types[name]
                if found != null {
                    return found
                }
                return self
            when Kind.GENERIC:
                def remapped := Array<Type>()
                def name := MutableString(subtypes[0].name)
                name.append("<")
                var separator := ""
                for i in 0 .. subtypes.get_count() {
                    def child := subtypes[i].remap(types)
                    remapped.add(child)
                    if i > 0 {
                        name.append(separator)
                        name.append(child.name)
                        separator := ", "
                    }
                }
                name.append(">")
                return Type(name.convert(), Kind.GENERIC, offset, remapped, resolved)
            when Kind.NULLABLE:
                return subtypes[0].remap(types).nullable()
            when Kind.METHOD, Kind.FUNCTION:
                def remapped := Array<Type>()
                def name := MutableString("(")
                var separator := ""
                assert subtypes.get_count() >= 1
                for i in 0 .. subtypes.get_count() - 1 {
                    def child := subtypes[i].remap(types)
                    name.append(separator)
                    name.append(child.name)
                    remapped.add(child)
                    separator := ", "
                }
                if typeKind = Kind.FUNCTION {
                    name.append(")=>(")
                }
                else {
                    name.append(")=&>(")
                }
                if subtypes[subtypes.get_count() - 1] != Type.Void() {
                    def child := subtypes[subtypes.get_count() - 1].remap(types)
                    name.append(child.name)
                    remapped.add(child)
                }
                else {
                    remapped.add(Type.Void())
                }
                name.append(")")
                return Type(name.convert(), typeKind, offset, remapped, resolved)
            otherwise: return self
        }
    }

    @override
    function hash():Int {
        return name.hash()
    }

    @override
    function convert():String {
        return name
    }
}