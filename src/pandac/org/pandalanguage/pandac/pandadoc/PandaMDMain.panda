package org.pandalanguage.pandac.pandadoc

uses org.pandalanguage.pandac.ClassDecl
uses org.pandalanguage.pandac.CodeGenerator
uses org.pandalanguage.pandac.Compiler
uses org.pandalanguage.pandac.Compiler.Error
uses org.pandalanguage.pandac.Compiler.Settings
uses org.pandalanguage.pandac.Config
uses org.pandalanguage.pandac.IRNode
uses org.pandalanguage.pandac.MethodDecl

constant HEADER :=
    "<html>" +
    "  <head>\n" +
    "    <link rel=\"stylesheet\" type=\"text/css\" href=\"panda-main.css\" />\n" +
    "    <link rel=\"stylesheet\" type=\"text/css\" href=\"pandadoc.css\" />\n" +
    "    <link rel=\"stylesheet\" type=\"text/css\" href=\"pandacode-light.css\" />\n" +
    "  </head>\n" +
    "  <body>\n" +
    "    <div id=\"main\">" +
    "      <!--TOCBEGIN--><!--TOCEND-->" +
    "      <div id=\"content\">"

constant FOOTER :=
    "      </div>" +
    "    </div>" +
    "  </body>" +
    "</html>"

@private
class DummyCodeGenerator : CodeGenerator {
    @override
    method setCompiler(compiler:Compiler) {
    }

    @override
    method start(cl:ClassDecl) {
    }

    @override
    method writeDeclaration(m:MethodDecl) {
    }

    @override
    method write(m:MethodDecl, body:ImmutableArray<IRNode>) {
    }

    @override
    method end(cl:ClassDecl) {
    }

    @override
    method finish() {
    }
}

method main(args:ListView<String>) {
    if args.get_count() != 3 {
        Console.errorStream().printLine("usage: pandamd <input.md> <output.html>")
        System.exit(1)
    }
    def input := File(args[1])
    def output := File(args[2])
    output.parent().createDirectories()
    def imports := Array<File>() -- FIXME literal
    imports.add(File(Config.pandaSourceDir()))
    def settings := Settings(File(Config.pandaSourceDir()), imports, 0, 0)
    def compiler := Compiler(MessageQueue<Error>(), DummyCodeGenerator(), settings)
    def resolve := LinkResolver(compiler, "api/").resolve
    output.write(HEADER + Markdown(resolve).process(input.readFully()) + FOOTER)
}
