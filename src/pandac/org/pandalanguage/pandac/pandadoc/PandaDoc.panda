package org.pandalanguage.pandac.pandadoc

uses org.pandalanguage.pandac.Annotations
uses org.pandalanguage.pandac.ClassDecl
uses org.pandalanguage.pandac.CodeGenerator
uses org.pandalanguage.pandac.Compiler
uses org.pandalanguage.pandac.FieldDecl
uses org.pandalanguage.pandac.MethodDecl
uses org.pandalanguage.pandac.Pair
uses org.pandalanguage.pandac.Type

class PandaDoc {
    def outDir:File

    def tocFile:File

    def apiRelativePath:String

    @weak
    var compiler:Compiler?

    var out:XMLWriter

    def classes := Array<ClassDecl>()

    var returns:String?

    var params := HashMap<String, String>()

    var currentClass:ClassDecl?

    var haveSees := false

    def tableOfContents := TableOfContentsNode("", "index.html")

    init(compiler:Compiler, outDir:File, tocFile:File, apiRelativePath:String) {
        self.compiler := compiler
        self.outDir := outDir
        self.tocFile := tocFile
        self.apiRelativePath := apiRelativePath
    }

    function getRelativePath(cl:ClassDecl, extension:String):String {
        return cl.name.replace(".", "/").replace("<", ".LT").replace(">", ".GT")
                .replace("?", ".Q").replace(",", ".C").replace(" ", "") + extension
    }

    function getPath(cl:ClassDecl, extension:String):File {
        return outDir.resolve(getRelativePath(cl, extension))
    }

    function simpleName(t:Type):String {
        match t.typeKind {
            when Type.Kind.CLASS, Type.Kind.GENERIC_PARAMETER:
                def index := t.name.lastIndexOf(".")
                if index == null {
                    return t.name
                }
                return t.name[t.name.next(index)..]
            when Type.Kind.NULLABLE:
                return simpleName(t.subtypes[0]) + "?"
            when Type.Kind.GENERIC:
                def simpleNames := Array<String>() -- FIXME use map
                for s in t.subtypes {
                    simpleNames.add(simpleName(s))
                }
                return simpleNames[0] + "<" + simpleNames[1..].join() + ">"
            when Type.Kind.METHOD, Type.Kind.FUNCTION, Type.Kind.IMMUTABLE_METHOD,
                    Type.Kind.IMMUTABLE_FUNCTION:
                def result := MutableString("(")
                var separator := ""
                for p in t.subtypes[0 .. t.subtypes.count - 1] {
                    result.append(separator)
                    result.append(simpleName(p))
                    separator := ", "
                }
                match t.typeKind {
                    when Type.Kind.METHOD:
                        result.append(")=&>(")
                    when Type.Kind.FUNCTION:
                        result.append(")=>(")
                    when Type.Kind.IMMUTABLE_METHOD:
                        result.append(")=&>*(")
                    when Type.Kind.IMMUTABLE_FUNCTION:
                        result.append(")=>*(")
                }
                def returnType := t.subtypes[t.subtypes.count - 1]
                if returnType != Type.Void() {
                    result.append(simpleName(returnType))
                }
                result.append(")")
                return result.finish()
            otherwise:
                return t.name
        }
    }

    function escape(s:String):String {
        return s.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")
    }

    method write(t:Type) {
        if !t.resolved {
            Console.printLine("unresolved type: \{t}")
        }
        out.open("type")
        out.write("name", escape(t.name))
        out.write("simpleName", escape(simpleName(t)))
        if t.isClass {
            def cl := compiler.getClass(t)
            if cl !== null {
                if cl.isSpecialization() {
                    -- link to base
                    out.write("url", linkTo(compiler.getClass(t.subtypes[0])))
                }
                else {
                    out.write("url", linkTo(cl))
                }
            }
        }
        out.close("type")
    }

    method write(a:Annotations) {
        out.open("annotations")
        if a.isPrivate {
            out.write("annotation", "@private")
        }
        if a.isProtected {
            out.write("annotation", "@protected")
        }
        if a.isPackage {
            out.write("annotation", "@package")
        }
        if a.isClass {
            out.write("annotation", "@class")
        }
        if a.isOverride {
            out.write("annotation", "@override")
        }
        if a.isFinal {
            out.write("annotation", "@final")
        }
        if a.isWeak {
            out.write("annotation", "@weak")
        }
        if a.expressions !== null {
            for expr in a.expressions {
                match expr {
                    when Annotations.Expression.PRE(text, _):
                        out.write("annotation", "@pre(\{escape(text)})")
                    when Annotations.Expression.PRE_OR(text, _):
                        out.write("annotation", "@preOr(\{escape(text)})")
                    when Annotations.Expression.POST(text, _):
                        out.write("annotation", "@post(\{escape(text)})")
                    when Annotations.Expression.POST_AND(text, _):
                        out.write("annotation", "@postAnd(\{escape(text)})")
                }
            }
        }
        out.close("annotations")
    }

    ================================================================================================
    Given a documentation comment string, splits it into the main text and tags. For instance, given
    `"This is a doccomment @param foo a Foo @returns a Bar", returns `[("", "This is a doccomment"),
    ("param", "foo a Foo"), ("returns", "a Bar")]`.
    ================================================================================================
    function splitDoc(text:String):ListView<Pair<String, String>> {
        -- figure out how many spaces are at the start of each line and remove them
        def lines := Array<String>(text.split(/\r?\n/))
        if lines[0] = "" {
            lines.removeIndex(0)
        }
        var spaces := Int.MAX
        for line in lines {
            if line.trimmed != "" {
                spaces := spaces.min(line.parse(/( *).*/)[0].byteLength)
            }
        }
        for i in 0 .. lines.count { -- FIXME use map
            if lines[i].trimmed != "" {
                lines[i] := lines[i][spaces..]
            }
        }

        def result := Array<Pair<String, String>>()
        def split := lines.join("\n").split(/(?m)^(?=[ \t]*@\w+)/)
        for raw in split {
            def s := raw.trimmed
            if !s.startsWith("@") {
                result.add(Pair<String, String>("", s))
            }
            else {
                def parsed := s.parse(/(?s)@(\w*)\s*(.*)/)
                if parsed !== null {
                result.add(Pair<String, String>(parsed[0], parsed[1])) }
            }
        }
        return result
    }

    function getMarkdown():Markdown {
        return Markdown(LinkResolver(compiler, apiRelativePath, currentClass).resolve)
    }

    method writeDoc(doccomment:String) {
        def summary:String
        def index := doccomment.indexOf(".")
        if index !== null {
            summary := doccomment.substring(...index)
        }
        else {
            summary := doccomment
        }
        def md := getMarkdown()
        out.open("doc")
        def oldLevel := out.out.level
        -- the indentation from the IndentedOutputStream will screw up any <pre> blocks in the
        -- doccomment, so we need to temporarily zero it out
        out.out.level := 0
        def processedSummary := stripParagraph(md.process(summary))
        out.write("summary", processedSummary)
        out.write("description", md.process(doccomment))
        out.out.level := oldLevel
        out.close("doc")
    }

    method writeSee(s:String) {
        if !haveSees {
            out.open("seeAlsos")
            haveSees := true
        }
        out.write("seeAlso", stripParagraph(getMarkdown().process("[\{s}]")))
    }

    method finishSees() {
        if haveSees {
            out.close("seeAlsos")
            haveSees := false
        }
    }

    function visible(cl:ClassDecl):Bit {
        return !cl.annotations.isPrivate & !cl.annotations.isPackage
    }

    function visible(f:FieldDecl):Bit {
        return !f.annotations.isPrivate & !f.annotations.isSynthetic
    }

    function visible(m:MethodDecl):Bit {
        if m.signature = "cleanup()" & currentClass.name != "panda.core.Object" {
            return false
        }
        if m.name.startsWith("get_") | m.name.startsWith("set_") {
            return false
        }
        return !m.annotations.isPrivate & !m.annotations.isSynthetic
    }

    method writeDoc(f:FieldDecl) {
        if f.doccomment !== null {
            def split := splitDoc(f.doccomment)
            writeDoc(split[0].second)
            for tag in split[1..] {
                match tag.first {
                    when "see":
                        writeSee(tag.second)
                    otherwise:
                        compiler.error(f.position, "tag '@\{tag.first}' is not supported on fields")
                }
            }
            finishSees()
        }
    }

    method write(cl:ClassDecl) {
        if !visible(cl) {
            return
        }
        out.open("class")
        write(cl.type)
        if cl.doccomment !== null {
            writeDoc(cl.doccomment)
        }
        out.close("class")
    }


    method write(f:FieldDecl) {
        if !visible(f) {
            return
        }
        compiler.resolve(f)
        if f.resolved != Compiler.Resolution.RESOLVED {
            return
        }
        out.open("field")
        out.write("name", f.name)
        def kind:String
        match f.fieldKind {
            when FieldDecl.Kind.VAR:
                kind := "var"
            when FieldDecl.Kind.DEF:
                kind := "def"
            when FieldDecl.Kind.CONSTANT:
                kind := "constant"
            when FieldDecl.Kind.PROPERTY:
                kind := "property"
        }
        out.write("kind", kind)
        write(f.annotations)
        write(f.type)
        writeDoc(f)
        out.close("field")
    }

    method getDocComment(m:MethodDecl):String? {
        if m.doccomment !== null & m.doccomment.trimmed = "@inherit" {
            def overridden := compiler.getOverriddenMethod(m)
            if overridden == null {
                compiler.error(m.position, "method specifies '@inherit', but no matching method " +
                        "found among its ancestors")
                return null
            }
            def result := getDocComment(overridden)
            if result == null {
                compiler.error(m.position, "method specifies '@inherit', but " +
                        "\{overridden.declaration} does not have any documentation")
                return null
            }
            return result
        }
        return m.doccomment
    }

    function stripParagraph(s:String):String {
        def parsed := s.parse(/(?s)<p>(.*)<\/p>\s*/)
        if parsed !== null {
            return parsed[0]
        }
        return s
    }

    method writeDoc(m:MethodDecl) {
        def c := getDocComment(m)
        if c == null {
            return
        }
        def split := splitDoc(c)
        writeDoc(split[0].second)
        for tag in split[1..] {
            match tag.first {
                when "param":
                    def split := tag.second.parse(/(?s)(\S+)\s+(.+)/)
                    if split == null {
                        compiler.error(m.position, "invalid '@param' contents '\{tag.second}'")
                        continue
                    }
                    params[split[0]] := stripParagraph(getMarkdown().process(split[1]))
                when "returns":
                    returns := stripParagraph(getMarkdown().process(tag.second))
                when "see":
                    writeSee(tag.second)
                otherwise:
                    compiler.error(m.position, "tag '@\{tag.first}' is not supported on methods")
            }
        }
        finishSees()
    }

    method write(m:MethodDecl) {
        returns := null
        params.clear()
        if !visible(m) {
            return
        }
        compiler.resolve(m)
        if m.resolved != Compiler.Resolution.RESOLVED {
            return
        }
        def tag:String
        match m.methodKind {
            when MethodDecl.Kind.METHOD:
                tag := "method"
            when MethodDecl.Kind.FUNCTION:
                tag := "function"
            when MethodDecl.Kind.INIT:
                tag := "init"
        }
        out.open(tag)
        out.write("name", escape(m.name))
        writeDoc(m)
        def annotations := m.annotations
        if m.owner.annotations.isFinal {
            annotations.flags &&= !!Annotations.Flag.FINAL
        }
        write(annotations)
        out.open("params")
        for p in m.parameters {
            out.open("param")
            out.write("name", p.name)
            write(p.type)
            def desc := params[p.name]
            if desc !== null {
                out.write("description", desc)
            }
            out.close("param")
        }
        out.close("params")
        if m.returnType != Type.Void() {
            out.open("return")
            write(m.returnType)
            if returns !== null {
                out.write("description", returns)
            }
            out.close("return")
        }
        out.close(tag)
    }

    method writeAncestors(cl:ClassDecl) {
        if cl.classKind != ClassDecl.Kind.CLASS {
            return
        }
        out.open("ancestors")
        var ancestor := cl.rawSuper
        while ancestor !== null {
            write(ancestor)
            def ancestorClass := compiler.getClass(ancestor)
            if ancestorClass == null {
                return
            }
            ancestor := ancestorClass.rawSuper
        }
        out.close("ancestors")
    }

    function linkTo(cl:ClassDecl):String {
        return LinkResolver(compiler, apiRelativePath, currentClass).linkTo(cl)
    }

    function linkTo(m:MethodDecl):String {
        return LinkResolver(compiler, apiRelativePath, currentClass).linkTo(m)
    }

    function linkTo(f:FieldDecl):String {
        return LinkResolver(compiler, apiRelativePath, currentClass).linkTo(f)
    }

    method writeInheritedFields(cl:ClassDecl) {
        def fields := Array<FieldDecl>()
        var ancestor := cl.rawSuper
        while ancestor !== null {
            def ancestorClass := compiler.getClass(ancestor)
            if ancestorClass == null {
                return
            }
            for f in ancestorClass.fields {
                if visible(f) {
                    compiler.resolve(f)
                    fields.add(f)
                }
            }
            ancestor := ancestorClass.rawSuper
        }
        fields[..] := fields[.. by -1]

        if fields.count > 0 {
            out.open("inheritedFields")
            for f in fields {
                out.open("field")
                out.write("name", f.name)
                out.write("link", linkTo(f))
                out.close("field")
            }
            out.close("inheritedFields")
        }
    }

    method addInheritedMethods(t:Type, methods:Array<MethodDecl>,
            overridden:HashSet<String>) {
        def cl := compiler.getClass(t)
        if cl == null {
            return
        }
        for m in cl.methods {
            var base := compiler.getOverriddenMethod(m)
            if base == null {
                base := m
            }
            if m.methodKind != MethodDecl.Kind.INIT & visible(m) &
                    !overridden.contains(base.signature) {
                compiler.resolve(m)
                if visible(m) {
                    methods.add(m)
                }
                overridden.add(base.signature)
            }
        }
        if cl.rawSuper !== null {
            addInheritedMethods(cl.rawSuper, methods, overridden)
        }
        for intf in cl.rawInterfaces {
            addInheritedMethods(intf, methods, overridden)
        }
    }

    function simpleSignature(m:MethodDecl):String {
        def result := MutableString("\{m.name}(")
        var separator := ""
        for p in m.parameters {
            result.append(separator)
            result.append(simpleName(p.type))
            separator := ", "
        }
        result.append(")")
        if m.returnType != Type.Void() {
            result.append(":\{simpleName(m.returnType)}")
        }
        return result.finish()
    }

    method writeInheritedMethods(cl:ClassDecl) {
        def methods := Array<MethodDecl>()
        def overridden := HashSet<String>()
        for m in cl.methods {
            def o := compiler.getOverriddenMethod(m)
            if o !== null {
                overridden.add(o.signature)
            }
            else {
                overridden.add(m.signature)
            }
        }
        addInheritedMethods(cl.type, methods, overridden)
        methods[..] := methods[.. by -1]

        if methods.count > 0 {
            out.open("inheritedMethods")
            for m in methods {
                out.open("method")
                out.write("name", escape(simpleSignature(m)))
                out.write("link", linkTo(m))
                out.close("method")
            }
            out.close("inheritedMethods")
        }
    }

    method writeDoc(cl:ClassDecl) {
        if cl.doccomment !== null {
            def split := splitDoc(cl.doccomment)
            writeDoc(split[0].second)
            for tag in split[1..] {
                match tag.first {
                    when "see":
                        writeSee(tag.second)
                    otherwise:
                        compiler.error(cl.position,
                                "tag '@\{tag.first}' is not supported on classes")
                }
            }
            finishSees()
        }
    }

    method addTableOfContentsEntry(s:String) {
        var name := ""
        var current := tableOfContents
        for component in s.split(".") {
            if name != "" {
                name += "."
            }
            name += component
            var child := current.children[component]
            if child == null {
                def url:String
                if compiler.getClass(name) !== null {
                    url := name.replace(".", "/") + ".html"
                }
                else {
                    url := name.replace(".", "/") + "/index.html"
                }
                child := TableOfContentsNode(name, url)
                current.children[component] := child
            }
            current := child
        }
    }

    method add(cl:ClassDecl) {
        if visible(cl) {
            self.currentClass := cl
            classes.add(cl)
            addTableOfContentsEntry(cl.name)
        }
    }

    method process(cl:ClassDecl) {
        compiler.currentClass.push(cl)
        self.currentClass := cl
        def dest := getPath(cl, ".xml")
        dest.parent().createDirectories()
        out := XMLWriter(dest.openOutputStream())
        out.open("class")
        out.write("name", cl.name)
        var simple := simpleName(cl.type)
        if cl.parameters.count != 0 {
            var separator := "&lt;"
            for p in cl.parameters {
                simple += separator
                simple += p.name
                separator := ", "
            }
            simple += "&gt;"
        }
        out.write("simpleName", simple)
        match cl.classKind {
            when ClassDecl.Kind.CLASS:
                out.write("kind", "class")
            when ClassDecl.Kind.INTERFACE:
                out.write("kind", "interface")
            when ClassDecl.Kind.CHOICE:
                out.write("kind", "choice")
                for cc in cl.choiceCases {
                    compiler.resolve(cc)
                    out.open("case")
                    out.write("name", cc.name)
                    if cc.doccomment !== null {
                        writeDoc(cc.doccomment)
                    }
                    if cc.fields.count > 0 {
                        out.open("fields")
                        for f in cc.fields {
                            write(f)
                        }
                        out.close("fields")
                    }
                    out.close("case")
                }
        }
        var base := cl
        while base.owner !== null {
            base := base.owner
        }
        out.write("source", "../" * (cl.name.find(".").count() + 1) + "source/" +
                base.name.replace(".", "/") + ".html")
        writeDoc(cl)
        writeAncestors(cl)
        if cl.rawInterfaces.count > 0 {
            out.open("interfaces")
            cl.rawInterfaces.apply(self.write) -- FIXME shouldn't need 'self.'
            out.close("interfaces")
        }
        writeInheritedFields(cl)
        writeInheritedMethods(cl)
        cl.classes.apply(self.write) -- FIXME shouldn't need 'self.'
        cl.fields.apply(self.write) -- FIXME shouldn't need 'self.'
        cl.methods.apply(self.write) -- FIXME shouldn't need 'self.'
        out.close("class")
        compiler.currentClass.pop(cl)
        out := XMLWriter(MemoryOutputStream())
    }

    method writePackage(node:TableOfContentsNode) {
        out.open("package")
        out.write("name", node.name)
        out.open("contents")
        for c in node.children.values() {
            def cl := compiler.getClass(c.name)
            if cl == null {
                writePackage(c)
            }
            else {
                out.open("class")
                write(cl.type)
                if cl.doccomment !== null {
                    writeDoc(cl.doccomment)
                }
                out.close("class")
            }
        }
        out.close("contents")
        out.close("package")
    }

    method writePackages(node:TableOfContentsNode) {
        if compiler.getClass(node.name) == null {
            def dest := outDir.resolve(node.name.replace(".", "/")).resolve("index.xml")
            Console.printLine(dest)
            out := XMLWriter(dest.openOutputStream())
            writePackage(node)
        }
        for c in node.children.values() {
            writePackages(c)
        }
    }

    method finish() {
--        classes.apply(process)
        for cl in classes {
            process(cl)
        }
        writePackages(tableOfContents)
        out := XMLWriter(tocFile.openOutputStream())
        tableOfContents.write(apiRelativePath, out)
        out := XMLWriter(MemoryOutputStream())
    }
}