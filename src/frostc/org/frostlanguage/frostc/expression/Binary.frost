package org.frostlanguage.frostc.expression

uses org.frostlanguage.frostc.ASTNode
uses org.frostlanguage.frostc.Compiler
uses org.frostlanguage.frostc.Compiler.TypeContext
uses org.frostlanguage.frostc.IR
uses org.frostlanguage.frostc.MethodDecl
uses org.frostlanguage.frostc.MethodRef
uses org.frostlanguage.frostc.Methods
uses org.frostlanguage.frostc.Pair
uses org.frostlanguage.frostc.Position
uses org.frostlanguage.frostc.Symbol
uses org.frostlanguage.frostc.Type
uses org.frostlanguage.frostc.parser.Token

class Binary {
    @class
    method findOverloadedOperator(compiler:Compiler, left:Type, op:Token.Kind, right:ASTNode,
            type:TypeContext):Pair<ListView<MethodRef>, Int>? {
        if !left.isClass {
            return null
        }
        def leftCl := compiler.getClass(left)
        if leftCl == null {
            return null
        }
        def target := IR.Value.REF(IR.Statement.ID(-1), left) -- fake target, just used for matching
        var methods := compiler.getSymbolTable(leftCl)[Compiler.operatorName(op)]
        if methods !== null {
            def args := [right]
            -- look for left.op(right)
            match methods.kind {
                when Symbol.Kind.METHOD {
                    if !methods->MethodDecl.annotations.isClass | left.isClassLiteral {
                        def list := Array<MethodDecl>()
                        list.add(methods->MethodDecl)
                        def result := Call.findBestMethod(compiler, Position(), target, list, args,
                                type)
                        if result !== null {
                            return result
                        }
                    }
                }
                when Symbol.Kind.METHODS {
                    def result := Call.findBestMethod(compiler, Position(), target,
                            methods->Methods.methods.filter(
                                    m => m.annotations.isClass = left.isClassLiteral), args, type)
                    if result !== null {
                        return result
                    }
                }
                otherwise {
                    assert false
                }
            }
        }

        -- look for RightClass.op(left, right)
        def rightType := compiler.preferredType(right)
        if rightType == null {
            return null
        }
        if !rightType.isClass {
            return null
        }
        def rightCl := compiler.getClass(rightType)
        if rightCl == null {
            return null
        }
        methods := compiler.getSymbolTable(rightCl)[Compiler.operatorName(op)]
        if methods == null {
            return null
        }
        def args := [ASTNode.IR_WRAPPER(Position(), target), right]
        match methods.kind {
            when Symbol.Kind.METHOD {
                if methods->MethodDecl.annotations.isClass {
                    def list := Array<MethodDecl>()
                    list.add(methods->MethodDecl)
                    def result := Call.findBestMethod(compiler, Position(), null, list, args, type)
                    if result !== null {
                        return result
                    }
                }
            }
            when Symbol.Kind.METHODS {
                def result := Call.findBestMethod(compiler, Position(), null,
                        methods->Methods.methods.filter(m => m.annotations.isClass), args, type)
                if result !== null {
                    return result
                }
            }
            otherwise {
                assert false
            }
        }
        return null
    }

    @class
    method findOverloadedOperator(compiler:Compiler, left:ASTNode, op:Token.Kind, right:ASTNode,
            type:TypeContext):Pair<ListView<MethodRef>, Int>? {
        def leftTypes := compiler.possibleTypes(left)
        if leftTypes !== null {
            def best:Pair<ListView<MethodRef>, Int>? := null
            for t in leftTypes {
                def compilerCost := compiler.coercionCost(left, t)
                assert compilerCost !== null,
                        "failed compiler cast \{left}->\{t} at \{left.position()}"
                def ops := findOverloadedOperator(compiler, t, op, right, type)
                if ops !== null {
                    def cost := ops.second + compilerCost.second
                    if best == null | cost < best.second {
                        best := Pair<ListView<MethodRef>, Int>(ops.first, cost)
                    }
                    else if cost = best.second {
                        def a := Array<MethodRef>()
                        a.addAll(best.first)
                        outer: for op in ops.first {
                            for old in best.first {
                                if old.value == op.value {
                                    continue outer
                                }
                            }
                            a.add(op)
                        }
                        best := Pair<ListView<MethodRef>, Int>(a, cost)
                    }
                }
            }
            return best
        }
        return null
    }

    @class
    method foldInts(compiler:Compiler, left:ASTNode, op:Token.Kind, right:ASTNode):ASTNode? {
        def l:Int64
        def r:Int64
        -- ensure both values fit into a signed Int64
        match left {
            when ASTNode.INT(_, int) {
                if int > Int64.MAX.convert() {
                    return null
                }
                l := int.convert()
            }
            otherwise {
                return null
            }
        }
        match right {
            when ASTNode.INT(_, int) {
                if int > Int64.MAX.convert() {
                    return null
                }
                r := int.convert()
            }
            otherwise {
                return null
            }
        }
        match op {
            when Token.Kind.ADD {
                def v := (l + r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.SUB {
                def v := (l - r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.MUL {
                def v := (l * r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.INTDIV {
                if r = 0 {
                    compiler.error(right.position(), "division by 0")
                    return null
                }
                def v := (l // r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.REM {
                if r = 0 {
                    compiler.error(right.position(), "division by 0")
                    return null
                }
                def v := (l % r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.EQ {
                return ASTNode.BIT(left.position(), l = r)
            }
            when Token.Kind.NEQ {
                return ASTNode.BIT(left.position(), l != r)
            }
            when Token.Kind.LT {
                return ASTNode.BIT(left.position(), l < r)
            }
            when Token.Kind.GT {
                return ASTNode.BIT(left.position(), l > r)
            }
            when Token.Kind.LTEQ {
                return ASTNode.BIT(left.position(), l <= r)
            }
            when Token.Kind.GTEQ {
                return ASTNode.BIT(left.position(), l >= r)
            }
            when Token.Kind.BITWISEAND {
                def v := (l && r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.BITWISEOR {
                def v := (l || r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.BITWISEXOR {
                def v := (l ~~ r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.SHIFTLEFT {
                def v := (l << r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
            when Token.Kind.SHIFTRIGHT {
                def v := (l >> r).convert()->UInt64
                return ASTNode.INT(left.position(), v)
            }
        }
        compiler.error(left.position(), "'\{Compiler.operatorName(op)}' cannot operate on " +
                "'frost.core.Int64', 'frost.core.Int64'")
        return null
    }

    @class
    function foldStrings(compiler:Compiler, left:ASTNode, op:Token.Kind, right:ASTNode):ASTNode? {
        -- FIXME this doesn't work for longer concatenations like "A" + "B" + "C" + "D"; will only
        -- fold the innermost pair
        if op != Token.Kind.ADD {
            return null
        }
        match left {
            when ASTNode.STRING(position, s1) {
                match right {
                    when ASTNode.STRING(_, s2) {
                        return ASTNode.STRING(position, s1 + s2)
                    }
                }
            }
        }
        return null
    }

    @class
    function fold(compiler:Compiler, left:ASTNode, op:Token.Kind, right:ASTNode):ASTNode? {
        match left {
            when ASTNode.INT {
                return foldInts(compiler, left, op, right)
            }
            when ASTNode.STRING {
                return foldStrings(compiler, left, op, right)
            }
            otherwise {
                return null
            }
        }
    }

    @class
    method compile(compiler:Compiler, position:Position, left:ASTNode, op:Token.Kind, right:ASTNode,
            type:TypeContext):IR.Value? {
        def folded := fold(compiler, left, op, right)
        if folded !== null {
            return compiler.compileExpression(folded, type)
        }
        match op {
            when Token.Kind.CAST {
                def target := compiler.scanner.convertType(right)
                return compiler.coerce(position, compiler.compileCast(position, left, target), type)
            }
            when Token.Kind.IDENTITY, Token.Kind.NIDENTITY {
                return compiler.compileIdentityComparison(position, left, op, right, type)
            }
            otherwise {
                def matches := findOverloadedOperator(compiler, left, op, right, type)
                if matches !== null {
                    if matches.first.count > 1 {
                        compiler.reportAmbiguousMatch(position, matches.first, [left, right], type)
                        return null
                    }
                    def m := matches.first[0].value
                    if m.annotations.isClass {
                        if m.parameters.count = 2 {
                            return Call.compile(compiler, position, IR.Value.METHOD(null, m),
                                    [left, right], type)
                        }
                        assert m.parameters.count = 1
                        return Call.compile(compiler, position, IR.Value.METHOD(null, m), [right],
                                type)
                    }
                    if m.owner.name = "frost.core.Bit" {
                        if m.name = "&" {
                            return And.compile(compiler, position, left, right, type)
                        }
                        if m.name = "|" {
                            return Or.compile(compiler, position, left, right, type)
                        }
                    }
                    def found := compiler.findType(compiler.possibleTypes(left), m.owner)
                    assert found !== null
                    def target := compiler.compileExpression(left, TypeContext.TYPE(found))
                    if target == null {
                        return null
                    }
                    return Call.compile(compiler, position, IR.Value.METHOD(target, m), [right],
                            type)
                }
                def compiledLeft := compiler.compileExpression(left, TypeContext.NON_VOID)
                if compiledLeft == null {
                    return null
                }
                def compiledRight := compiler.compileExpression(right,
                        TypeContext.TYPE(compiledLeft.type()))
                if compiledRight == null {
                    return null
                }
                if (compiledLeft.type() = Type.BuiltinBit() |
                        compiledLeft.type().isBuiltinNumber) {
                    def resultType := compiler.preferredType(ASTNode.BINARY(position, left, op,
                             right))
                    if resultType !== null {
                        def result := compiler.ir.add(IR.Statement.BINARY(position, compiledLeft,
                                op, compiledRight, resultType))
                        return compiler.coerce(position, IR.Value.REF(result, resultType), type)
                    }
                }
                compiler.error(position, "no match for '\{Compiler.operatorName(op)}' on " +
                        "'\{compiledLeft.type()}', '\{compiledRight.type()}'" +
                        type.description())
                return null
            }
        }
    }
}