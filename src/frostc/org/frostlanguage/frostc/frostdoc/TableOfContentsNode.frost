package org.frostlanguage.frostc.frostdoc

class TableOfContentsNode {
    def name:String

    def url:String

    def children := HashMap<String, TableOfContentsNode>()

    init(name:String, url:String) {
        self.name := name
        self.url := url
    }

    @private
    @class
    function greaterThan(a:String, b:String):Bit {
        -- FIXME add API to String to handle proper Unicode sorting
        for i in 0 .. a.length.min(b.length) {
            if a[i] > b[i] {
                return true
            }
            if a[i] < b[i] {
                return false
            }
        }
        return a.length > b.length
    }

    method write(apiRelativePath:String, out:XMLWriter) {
        out.open("entry")
        if name !== null {
            var index := name.lastIndexOf(".")
            if index !== null {
                index := name.next(index)
            }
            else {
                index := name.start
            }
            out.write("name", name)
            out.write("simpleName", name[index..])
            out.write("url", apiRelativePath + url)
        }
        if children.count != 0 {
            out.open("contents")
            def list := children.values.all()
            list.sortInPlace((a, b) => greaterThan(a.name, b.name))
            for child in list {
                child.write(apiRelativePath, out)
            }
            out.close("contents")
        }
        out.close("entry")
    }
}
