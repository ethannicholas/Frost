package org.frostlang.frostc

====================================================================================================
A compiler backend, responsible for producing the compiler's output artifacts.
====================================================================================================
interface Backend {
    ================================================================================================
    Called by the compiler prior to writing anything.
    ================================================================================================
    method setCompiler(compiler:Compiler)

    ================================================================================================
    Begin writing a class. This will be called prior to writing any of the class' methods. The
    compiler will not call `startClass()` again without first calling `endClass()`.
    ================================================================================================
    method start(cl:ClassDecl)

    ================================================================================================
    Informs the code generator that this class is complete and no more methods will be written.
    ================================================================================================
    method end(cl:ClassDecl)

    ================================================================================================
    Writes the declaration (i.e. no method body) of a method.
    ================================================================================================
    method writeSignature(s:Code.Signature)

    ================================================================================================
    Reserves a global slot. The order in which globals are written is important, as the
    GLOBAL_POINTER instruction references them by the order in which they were sent to the backend.
    `writeGlobal` may or may not be followed by a call to `writeGlobalValue` which gives the global
    its value; if it is not, this global has external linkage and is merely a declaration.
    ================================================================================================
    method writeGlobal(g:Code.Global)

    ================================================================================================
    Either writes a new global with a value, or adds a value to a global previously written with
    `writeGlobal`.
    ================================================================================================
    method writeGlobalValue(g:Code.Global, value:Code.Value)

    ================================================================================================
    Writes a method definition. The `MethodDecl` is only defined for methods which were declared
    via the normal `method` or `function` channels, and will be `null` for synthetic methods.

    linkOnce is `true` if the method is a specialization and therefore might be defined multiple
    times in different compilation units.
    ================================================================================================
    method writeMethod(m:MethodDecl?, s:Code.Signature, code:Code, linkOnce:Bit)

    ================================================================================================
    Informs the code generator that the entire compilation is complete and nothing more will be
    written.
    ================================================================================================
    method finish()
}