package org.frostlang.frostc

uses org.frostlang.frostc.parser.Token
uses org.frostlang.frostc.parser.Token.Kind -- FIXME shouldn't need

choice ASTNode {
    ANNOTATION             (Position, String, String? -* expr text *-, ASTNode? -* expr *-)
    ARRAY                  (Position, FixedArray<ASTNode>)
    ASSERT                 (Position, ASTNode, ASTNode?)
    AT_PRE                 (Position, ASTNode -* expression *-)
    AT_RETURN              (Position)
    BINARY                 (Position, ASTNode, Token.Kind, ASTNode)
    BIT                    (Position, Bit)
    BLOCK                  (Position, FixedArray<ASTNode>)
    BREAK                  (Position, String?)
    CALL                   (Position, ASTNode, FixedArray<ASTNode>)
    CHOICE_CASE            (Position,
                            ASTNode?             -* Doccomment (STRING) *-,
                            String               -* name *-,
                            FixedArray<ASTNode>? -* field TYPEs *-)
    CHOICE_FIELD_REFERENCE (Position, ASTNode -* base *-, ChoiceCase, Int -* field index *-)
    CLASS                  (Position,
                            ASTNode?             -* Doccomment (STRING) *-,
                            FixedArray<ASTNode>  -* ANNOTATIONs *-,
                            ClassDecl.Kind,
                            String,
                            FixedArray<ASTNode>? -* Generics (TYPED_IDENTIFIERs) *-,
                            FixedArray<ASTNode>? -* Supertypes (TYPEs)) *-,
                            FixedArray<ASTNode>  -* Members *-)
    CONTINUE               (Position, String?)
    DECLARATION            (Position, ASTNode -* target *-, ASTNode? -* initializer *-)
    DO                     (Position, String?, FixedArray<ASTNode>, ASTNode)
    DOT                    (Position, ASTNode, String)
    DOT_GENERICS           (Position, ASTNode, String, FixedArray<ASTNode>)
    FIELD                  (Position,
                            ASTNode?             -* Doccomment (STRING) *-,
                            FixedArray<ASTNode>  -* ANNOTATIONs *-,
                            ASTNode              -* VAR *-)
    FILE                   (FixedArray<ASTNode>)
    FOR                    (Position, String?, ASTNode, ASTNode, FixedArray<ASTNode>)
    GENERIC_TYPE           (Position, String, FixedArray<ASTNode> -* types *-)
    IDENTIFIER             (Position, String)
    IDENTIFIER_GENERICS    (Position, String, FixedArray<ASTNode>)
    IF                     (Position, ASTNode, FixedArray<ASTNode> -* ifTrue *-,
                            ASTNode? -* ifFalse *-)
    INT                    (Position, UInt64)
    IR_WRAPPER             (Position, IR.Value)
    LOOP                   (Position, String?, FixedArray<ASTNode>)
    MATCH                  (Position,
                            ASTNode              -* value *-,
                            FixedArray<ASTNode>  -* whens *-,
                            FixedArray<ASTNode>? -* otherwise *-)
    METHOD                 (Position,
                            ASTNode?                 -* Doccomment (STRING) *-,
                            FixedArray<ASTNode>  -* ANNOTATIONs *-,
                            MethodDecl.Kind,
                            String               -* name *-,
                            FixedArray<ASTNode>? -* Generics (TYPED_IDENTIFIERs) *-,
                            FixedArray<ASTNode>  -* PARAMETERs *-,
                            ASTNode?                 -* return type *-,
                            FixedArray<ASTNode>? -* statements *-)
    METHOD_TYPE            (Position, Token.Kind -* yield type *-,
                            FixedArray<ASTNode> -* arg types *-, ASTNode? -* return type *-)
    NULL                   (Position)
    NULLABLE_TYPE          (Position, ASTNode -* type *-)
    PACKAGE                (Position, String)
    PARAMETER              (Position, String, ASTNode -* type *-)
    PREFIX                 (Position, Token.Kind, ASTNode)
    RANGE                  (Position, ASTNode?, Bit, ASTNode?, ASTNode?)
    REAL                   (Position, Real64)
    REGEX                  (Position, String)
    RETURN                 (Position, ASTNode?)
    SELF                   (Position)
    STRING                 (Position, String)
    SUPER                  (Position)
    TRY                    (Position, FixedArray<ASTNode> -* block *-, ASTNode? -* identifier *-,
                            FixedArray<ASTNode> -* fail block *-)
    TUPLE                  (Position, FixedArray<ASTNode>)
    TUPLE_TYPE             (Position, FixedArray<ASTNode>)
    TYPE                   (Position, String)
    TYPED_LAMBDA           (Position, FixedArray<ASTNode> -* PARAMETERs *-, ASTNode -* body *-)
    TYPED_IDENTIFIER       (Position, String, ASTNode?)
    UNTYPED_LAMBDA         (Position, FixedArray<ASTNode> -* IDENTIFIERs *-, ASTNode -* body *-)
    USES                   (Position, String)
    VAR                    (Position, Variable.Kind, FixedArray<ASTNode> -* DECLARATIONs *-)
    WHEN                   (Position,
                            FixedArray<ASTNode> -* tests *-,
                            FixedArray<ASTNode> -* statements *-)
    WHILE                  (Position, String?, ASTNode, FixedArray<ASTNode>)

    function position():Position {
        match self {
            when ANNOTATION(position, _, _, _) {
                return position
            }
            when ARRAY(position, _) {
                return position
            }
            when ASSERT(position, _, _) {
                return position
            }
            when AT_PRE(position, _) {
                return position
            }
            when AT_RETURN(position) {
                return position
            }
            when BINARY(position, _, _, _) {
                return position
            }
            when BIT(position, _) {
                return position
            }
            when BLOCK(position, _) {
                return position
            }
            when BREAK(position, _) {
                return position
            }
            when CALL(position, _, _) {
                return position
            }
            when CHOICE_CASE(position, _, _, _) {
                return position
            }
            when CHOICE_FIELD_REFERENCE(position, _, _, _) {
                return position
            }
            when CLASS(position, _, _, _, _, _, _, _) {
                return position
            }
            when CONTINUE(position, _) {
                return position
            }
            when DECLARATION(position, _, _) {
                return position
            }
            when DO(position, _, _, _) {
                return position
            }
            when DOT(position, _, _) {
                return position
            }
            when DOT_GENERICS(position, _, _, _) {
                return position
            }
            when FIELD(position, _, _, _) {
                return position
            }
            when FILE(_) {
                return Position()
            }
            when FOR(position, _, _, _, _) {
                return position
            }
            when GENERIC_TYPE(position, _, _) {
                return position
            }
            when IDENTIFIER(position, _) {
                return position
            }
            when IDENTIFIER_GENERICS(position, _, _) {
                return position
            }
            when IF(position, _, _, _) {
                return position
            }
            when INT(position, _) {
                return position
            }
            when IR_WRAPPER(position, _) {
                return position
            }
            when LOOP(position, _, _) {
                return position
            }
            when MATCH(position, _, _, _) {
                return position
            }
            when METHOD(position, _, _, _, _, _, _, _, _) {
                return position
            }
            when METHOD_TYPE(position, _, _, _) {
                return position
            }
            when NULL(position) {
                return position
            }
            when NULLABLE_TYPE(position, _) {
                return position
            }
            when PACKAGE(position, _) {
                return position
            }
            when PARAMETER(position, _, _) {
                return position
            }
            when PREFIX(position, _, _) {
                return position
            }
            when RANGE(position, _, _, _, _) {
                return position
            }
            when REAL(position, _) {
                return position
            }
            when REGEX(position, _) {
                return position
            }
            when RETURN(position, _) {
                return position
            }
            when SELF(position) {
                return position
            }
            when STRING(position, _) {
                return position
            }
            when SUPER(position) {
                return position
            }
            when TUPLE(position, _) {
                return position
            }
            when TUPLE_TYPE(position, _) {
                return position
            }
            when TYPE(position, _) {
                return position
            }
            when TYPED_IDENTIFIER(position, _, _) {
                return position
            }
            when TYPED_LAMBDA(position, _, _) {
                return position
            }
            when UNTYPED_LAMBDA(position, _, _) {
                return position
            }
            when USES(position, _) {
                return position
            }
            when TRY(position, _, _, _) {
                return position
            }
            when VAR(position, _, _) {
                return position
            }
            when WHEN(position, _, _) {
                return position
            }
            when WHILE(position, _, _, _) {
                return position
            }
            otherwise {
                assert false
            }
        }
    }

    @override
    function convert():String {
        match self {
            when ANNOTATION(_, name, _, expr) {
                if expr !== null {
                    return "\{name}(\{expr})"
                }
                return name
            }
            when ARRAY(_, elements) {
                return elements.convert()
            }
            when ASSERT(_, test, msg) {
                if msg == null {
                    return "assert \{test}"
                }
                return "assert \{test}, \{msg}"
            }
            when AT_PRE(_, expr) {
                return "@pre(\{expr})"
            }
            when AT_RETURN(_) {
                return "@return"
            }
            when BINARY(_, left, op, right) {
                return "(\{left} \{op} \{right})"
            }
            when BIT(_, value) {
                return value.convert()
            }
            when BLOCK(_, statements) {
                def result := MutableString("{\n")
                for s in statements {
                    result.append(s + "\n")
                }
                result.append("}")
                return result.finish()
            }
            when BREAK(_, label) {
                if label !== null {
                    return "break \{label}"
                }
                return "break"
            }
            when CALL(_, target, args) {
                return "\{target}(\{args.join()})"
            }
            when CHOICE_CASE(_, dc, name, fields) {
                def result := MutableString()
                if dc !== null {
                    result.append(dc + "\n")
                }
                result.append("\{name}(\{fields.join()})")
                return result.finish()
            }
            when CHOICE_FIELD_REFERENCE(_, base, ce, index) {
                return "\{base}.\{ce}(\{index})"
            }
            when CLASS(_, dc, annotations, kind, name, generics, supertypes, members) {
                def result := MutableString()
                if dc !== null {
                    result.append(dc + "\n")
                }
                for a in annotations {
                    result.append(a + "\n")
                }
                match kind {
                    when ClassDecl.Kind.CLASS     { result.append("class ") }
                    when ClassDecl.Kind.INTERFACE { result.append("interface ") }
                    when ClassDecl.Kind.CHOICE    { result.append("choice ") }
                }
                result.append(name)
                if generics !== null {
                    result.append("<\{generics.join()}>")
                }
                if supertypes !== null {
                    result.append(": \{supertypes.join()}")
                }
                result.append(" {\n")
                for m in members {
                    result.append(m + "\n")
                }
                result.append("}")
                return result.finish()
            }
            when CONTINUE(_, label) {
                if label !== null {
                    return "continue \{label}"
                }
                return "continue"
            }
            when DECLARATION(_, target, value) {
                if value !== null {
                    return "\{target} := \{value}"
                }
                return target.convert()
            }
            when DO(_, label, statements, test) {
                def result := MutableString()
                if label !== null {
                    result.append("\{label}:")
                }
                result.append("do {\n")
                for s in statements {
                    result.append(s + "\n")
                }
                result.append("}\nwhile \{test}")
                return result.finish()
            }
            when DOT(_, base, field) {
                return "\{base}.\{field}"
            }
            when DOT_GENERICS(_, base, field, types) {
                return "\{base}.\{field}<\{types.join(" ")}>"
            }
            when FIELD(_, dc, annotations, decl) {
                def result := MutableString()
                if dc !== null {
                    result.append(dc + "\n")
                }
                for a in annotations {
                    result.append(a + "\n")
                }
                result.append(decl)
                return result.finish()
            }
            when FILE(entries) {
                def result := MutableString()
                for e in entries {
                    result.append(e + "\n")
                }
                return result.finish()
            }
            when FOR(_, label, target, list, statements) {
                def result := MutableString()
                if label !== null {
                    result.append(label + ": ")
                }
                result.append("for \{target} in \{list} {\n")
                for s in statements {
                    result.append(s + "\n")
                }
                result.append("}")
                return result.finish()
            }
            when GENERIC_TYPE(_, name, subtypes) {
                return "\{name}<\{subtypes.join()}>"
            }
            when IDENTIFIER(_, name) {
                return name
            }
            when IDENTIFIER_GENERICS(_, name, types) {
                return "IDENTIFIER_GENERICS(\{name}<\{types.join()}>)"
            }
            when IF(_, test, ifTrue, ifFalse) {
                def result := MutableString("if \{test} {\n")
                for s in ifTrue {
                    result.append(s + "\n")
                }
                result.append("}")
                if ifFalse !== null {
                    result.append("\nelse \{ifFalse}")
                }
                return result.finish()
            }
            when INT(_, value) {
                return value.convert()
            }
            when IR_WRAPPER(_, value) {
                return value.convert()
            }
            when LOOP(_, label, statements) {
                def result := MutableString()
                if label !== null {
                    result.append("\{label}:")
                }
                result.append("loop {\n")
                for s in statements {
                    result.append(s + "\n")
                }
                result.append("}")
                return result.finish()
            }
            when MATCH(_, value, whens, other) {
                def result := MutableString("match \{value} {\n")
                for w in whens {
                    result.append(w + "\n")
                }
                if other !== null {
                    result.append(other + "\n")
                }
                result.append("}")
                return result.finish()
            }
            when METHOD(_, dc, annotations, kind, name, generics, parameters, returnType,
                    statements) {
                def result := MutableString()
                if dc !== null {
                    result.append(dc + "\n")
                }
                for a in annotations {
                    result.append(a + "\n")
                }
                match kind {
                    when MethodDecl.Kind.METHOD    { result.append("method ") }
                    when MethodDecl.Kind.FUNCTION  { result.append("function ") }
                    when MethodDecl.Kind.INIT      { -* do nothing *- }
                }
                result.append(name)
                if generics !== null {
                    result.append("<\{generics.join()}>")
                }
                result.append("(\{parameters.join()})")
                if returnType !== null {
                    result.append(":\{returnType}")
                }
                if statements !== null {
                    result.append(" {\n")
                    for s in statements {
                        result.append(s + "\n")
                    }
                    result.append("}")
                }
                return result.finish()
            }
            when METHOD_TYPE(_, kind, paramTypes, returnType) {
                def yield:String
                match kind {
                    when Token.Kind.YIELDS {
                        yield := "=>"
                    }
                    when Token.Kind.YIELDS_METHOD {
                        yield := "=&>"
                    }
                    when Token.Kind.YIELDS_IMMUTABLE {
                        yield := "=>*"
                    }
                    when Token.Kind.YIELDS_METHOD_IMMUTABLE {
                        yield := "=&>*"
                    }
                }
                def partial := "(\{paramTypes.join()})\{yield}"
                if returnType !== null {
                    return "\{partial}(\{returnType})"
                }
                return "\{partial}()"
            }
            when NULL {
                return "null"
            }
            when NULLABLE_TYPE(_, base) {
                return base + "?"
            }
            when PACKAGE(_, name) {
                return name
            }
            when PARAMETER(_, name, type) {
                return "\{name}:\{type}"
            }
            when PREFIX(_, kind, base) {
                return "\{kind}\{base}"
            }
            when RANGE(_, start, inclusive, end, step) {
                def result := MutableString()
                if start !== null {
                    result.append(start)
                }
                if inclusive {
                    result.append("...")
                }
                else {
                    result.append("..")
                }
                if end !== null {
                    result.append(end)
                }
                if step !== null {
                    result.append(" by " + step)
                }
                return result.finish()
            }
            when REAL(_, value) {
                return value.convert()
            }
            when REGEX(_, src) {
                return "/\{src}/"
            }
            when RETURN(_, value) {
                if value !== null {
                    return "return \{value}"
                }
                return "return"
            }
            when SELF {
                return "self"
            }
            when STRING(_, str) {
                return str.format("frost")
            }
            when SUPER {
                return "super"
            }
            when TUPLE(_, arguments) {
                return "(\{arguments.join()})"
            }
            when TUPLE_TYPE(_, parameters) {
                return "(\{parameters.join()})"
            }
            when TRY(_, block, error, failBlock) {
                def result := MutableString("try {\n")
                block.apply(result.append)
                if error !== null {
                    result.append("}\nfail(\{error}) {\n")
                }
                else {
                    result.append("}\nfail {\n")
                }
                failBlock.apply(result.append)
                result.append("}")
                return result.finish()
            }
            when TYPE(_, name) {
                return name
            }
            when TYPED_IDENTIFIER(_, name, type) {
                if type !== null {
                    return "\{name}:\{type}"
                }
                return name
            }
            when TYPED_LAMBDA(_, parameters, body) {
                return "(\{parameters.join()})=>\{body}"
            }
            when UNTYPED_LAMBDA(_, parameters, body) {
                return "(\{parameters.join()})=>\{body}"
            }
            when USES(_, name) {
                return name
            }
            when VAR(_, kind, decls) {
                def result := MutableString()
                match kind {
                    when Variable.Kind.VAR      { result.append("var ") }
                    when Variable.Kind.DEF      { result.append("def ") }
                    when Variable.Kind.CONSTANT { result.append("constant ") }
                    when Variable.Kind.PROPERTY { result.append("property ") }
                }
                result.append(decls.join())
                return result.finish()
            }
            when WHEN(_, tests, statements) {
                def result := MutableString("when ")
                var separator := ""
                for t in tests {
                    result.append("\{separator}\{t}")
                }
                result.append(":")
                for s in statements {
                    result.append("\n" + s)
                }
                return result.finish()
            }
            when WHILE(_, label, test, statements) {
                def result := MutableString()
                if label !== null {
                    result.append("\{label}:")
                }
                result.append("while \{test} {\n")
                for s in statements {
                    result.append(s + "\n")
                }
                result.append("}")
                return result.finish()
            }
            otherwise {
                assert false, "unsupported ASTNode: \{$rawValue}"
            }
        }
    }
}