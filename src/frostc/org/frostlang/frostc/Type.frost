package org.frostlang.frostc

@final
class Type : Symbol, HashKey<Type> {
    choice Kind {
        CLASS
        NULLABLE
        BUILTIN_INT
        BUILTIN_UINT
        VOID
        INT_LITERAL
        INVALID
        BIT_LITERAL
        BUILTIN_BIT
        BUILTIN_FLOAT
        TUPLE
        GENERIC
        GENERIC_CLASS_PARAMETER
        GENERIC_METHOD_PARAMETER
        NULL
        FUNCTION
        METHOD
        IMMUTABLE_FUNCTION
        IMMUTABLE_METHOD
        REAL_LITERAL
    }

    var resolved:Bit

    def typeKind:Kind

    @private
    def _subtypes:FixedArray<Type>?

    property hasSubtypes:Bit

    property subtypes:FixedArray<Type>

    -- @priority from methods (0 if not a method / no @priority)
    def priority:Int

    @weak
    def genericClassParameter:ClassDecl.GenericParameter?

    @weak
    def genericMethodParameter:MethodDecl.GenericParameter?

    def methodRef:MethodRef?

    property isNumber:Bit

    property size:Int

    property isBuiltinInt:Bit

    property isBuiltinNumber:Bit

    property isSigned:Bit

    property isReal:Bit

    property isChar:Bit

    property isNumeric:Bit

    property isClass:Bit

    property isClassLiteral:Bit

    property isTuple:Bit

    property isMethod:Bit

    property isPointer:Bit

    property isRange:Bit

    property isSteppedRange:Bit

    property isNullable:Bit

    property parameterCount:Int

    property parameterTypes:ListView<Type>

    property returnType:Type

    init(name:String, typeKind:Kind, position:Position) {
        init(name, typeKind, position, false)
    }

    @pre(typeKind != Kind.GENERIC_CLASS_PARAMETER & typeKind != Kind.GENERIC_METHOD_PARAMETER &
            typeKind != Kind.METHOD & typeKind != Kind.FUNCTION &
            typeKind != Kind.IMMUTABLE_METHOD & typeKind != Kind.IMMUTABLE_FUNCTION)
    init(name:String, typeKind:Kind, position:Position, resolved:Bit) {
        self.typeKind := typeKind
        self.position := position
        self.resolved := resolved
        self._subtypes := null
        super.init(Symbol.Kind.TYPE, position, name)
    }

    @pre(typeKind != Kind.GENERIC_CLASS_PARAMETER & typeKind != Kind.GENERIC_METHOD_PARAMETER &
            typeKind != Kind.METHOD & typeKind != Kind.FUNCTION &
            typeKind != Kind.IMMUTABLE_METHOD & typeKind != Kind.IMMUTABLE_FUNCTION)
    init(name:String, typeKind:Kind, size:Int) {
        assert !name.endsWith("?")
        self.typeKind := typeKind
        self.position := Position(-1, size, size)
        self.resolved := true
        self._subtypes := null
        super.init(Symbol.Kind.TYPE, position, name)
    }

    init(name:String, typeKind:Kind, position:Position, subtypes:ListView<Type>, resolved:Bit) {
        init(name, typeKind, position, subtypes, resolved, 0)
    }

    @pre(typeKind != Kind.GENERIC_CLASS_PARAMETER & typeKind != Kind.GENERIC_METHOD_PARAMETER)
    init(name:String, typeKind:Kind, position:Position, subtypes:ListView<Type>, resolved:Bit,
            priority:Int) {
        assert (typeKind = Kind.NULLABLE) = name.endsWith("?"),
                "invalid type: name=\{name}, nullable=\{typeKind = Kind.NULLABLE}"
        assert (typeKind = Kind.GENERIC) = name.endsWith(">"),
                "invalid type: name=\{name}, generic=\{typeKind = Kind.GENERIC}"
        self.typeKind := typeKind
        self.position := position
        self.resolved := resolved
        self.priority := priority
        self._subtypes := FixedArray<Type>(subtypes)
        super.init(Symbol.Kind.TYPE, position, name)
    }

    init(param:ClassDecl.GenericParameter) {
        self.typeKind := Kind.GENERIC_CLASS_PARAMETER
        self.genericClassParameter := param
        self.resolved := true
        self._subtypes := null
        super.init(Symbol.Kind.TYPE, position, "\{param.owner}.\{param.name}")
    }

    init(param:MethodDecl.GenericParameter) {
        self.typeKind := Kind.GENERIC_METHOD_PARAMETER
        self.genericMethodParameter := param
        self.resolved := true
        self._subtypes := null
        super.init(Symbol.Kind.TYPE, position, "\{param.owner}.\{param.name}")
    }

    init(ref:MethodRef) {
        self.typeKind := ref.effectiveType.typeKind
        self._subtypes := ref.effectiveType.subtypes
        self.resolved := ref.effectiveType.resolved
        self.methodRef := ref
        super.init(Symbol.Kind.TYPE, ref.effectiveType.position, ref.effectiveType.name)
    }

    @class
    @pre(arguments.count >= 2)
    function tuple(arguments:ListView<Type>):Type {
        var resolved := true
        def name := MutableString()
        name.append("(")
        var separator := ""
        for a in arguments {
            resolved &= a.resolved
            name.append(separator)
            name.append(a.name)
            separator := ", "
        }
        name.append(")")
        return Type(name.finish(), Kind.TUPLE, arguments[0].position, arguments, resolved)
    }

    @class
    function generic(base:Type, arguments:ListView<Type>):Type {
        var resolved := base.resolved
        def name := MutableString()
        name.append(base.name)
        name.append("<")
        var separator := ""
        for a in arguments {
            resolved &= a.resolved
            name.append(separator)
            name.append(a.name)
            separator := ", "
        }
        name.append(">")
        def subtypes := Array<Type>()
        subtypes.add(base)
        subtypes.addAll(arguments)
        return Type(name.finish(), Kind.GENERIC, base.position, subtypes, resolved)
    }

    @class
    function methodType(compiler:Compiler, position:Position, kind:Type.Kind,
            parameterTypes:ListView<Type>, returnType:Type, priority:Int):Type {
        var resolved := returnType.resolved
        def name := MutableString("(")
        def subtypes := Array<Type>()
        var separator := ""
        for p in parameterTypes {
            subtypes.add(p)
            resolved &= p.resolved
            name.append(separator)
            name.append(p.name)
            separator := ", "
        }
        match kind {
            when Kind.FUNCTION {
                name.append(")=>(")
            }
            when Kind.METHOD {
                name.append(")=&>(")
            }
            when Kind.IMMUTABLE_FUNCTION {
                name.append(")=>*(")
            }
            when Kind.IMMUTABLE_METHOD {
                name.append(")=&>*(")
            }
            otherwise {
                unreachable
            }
        }
        subtypes.add(returnType)
        if returnType != compiler.VOID_TYPE {
            name.append(returnType.name)
        }
        name.append(")")
        return Type(name.finish(), kind, position, FixedArray<Type>.from(subtypes), resolved,
                priority)
    }

    function get_size():Int {
        assert typeKind = Kind.BUILTIN_INT | typeKind = Kind.BUILTIN_UINT |
                typeKind = Kind.BUILTIN_FLOAT, "not a number: \{self}"
        return position.line
    }

    function get_hasSubtypes():Bit {
        return _subtypes !== null
    }

    function get_subtypes():FixedArray<Type> {
        return _subtypes!
    }

    @override
    function =(other:Type):Bit {
        -- FIXME the typeKind comparison shouldn't be necessary - types with the same name should
        -- always be equal. But specialized generic classes are returning a type() which is a CLASS
        -- equal to their specialized name, instead of the actual GENERIC type, which is causing
        -- problems. This isn't a real fix, but rather a quick hack that works around the issue and
        -- lets me keep moving. Need to fix it so they return GENERIC.
        return name = other.name & typeKind = other.typeKind
    }

    @class
    method IntLiteral(value:UInt64):Type {
        return Type("IntegerLiteral(\{value})", Kind.INT_LITERAL, Position(), true)
    }

    @class
    method NegatedIntLiteral(value:UInt64):Type {
        return Type("IntegerLiteral(-\{value})", Kind.INT_LITERAL, Position(), true)
    }

    @class
    method RealLiteral(value:Real64):Type {
        return Type("RealLiteral(\{value})", Kind.REAL_LITERAL, Position(), true)
    }

    @class
    method ClassLiteral(compiler:Compiler, t:Type):Type {
        return generic(compiler.CLASS_TYPE, [t])
    }

    @class
    method WeakOf(compiler:Compiler, t:Type):Type {
        return Type("\{Compiler.WEAK_NAME}<\{t}>", Kind.GENERIC, t.position,
                [compiler.WEAK_TYPE, t], t.resolved)
    }

    @class
    method pointerTo(compiler:Compiler, t:Type):Type {
        return generic(compiler.NEW_POINTER_TYPE, [t])
    }

    @class
    method ArrayOf(compiler:Compiler, t:Type):Type {
        return generic(compiler.ARRAY_TYPE, [t])
    }

    @class
    method ImmutableArrayOf(compiler:Compiler, t:Type):Type {
        return generic(compiler.IMMUTABLE_ARRAY_TYPE, [t])
    }

    @class
    method RangeOf(compiler:Compiler, t:Type):Type {
        return generic(compiler.RANGE_TYPE, [t])
    }

    @class
    method SteppedRangeOf(compiler:Compiler, t:Type):Type {
        def children := Array<Type>() -- FIXME literal
        children.add(t)
        if t.nonnullable() = compiler.CHAR8_TYPE {
            children.add(compiler.INT8_TYPE)
        }
        else if t.nonnullable() = compiler.CHAR16_TYPE {
            children.add(compiler.INT16_TYPE)
        }
        else if t.nonnullable() = compiler.CHAR32_TYPE {
            children.add(compiler.INT32_TYPE)
        }
        else {
            children.add(t.nonnullable())
        }
        return generic(compiler.STEPPED_RANGE_TYPE, children)
    }

    @class
    method SteppedRangeOf(compiler:Compiler, endpoint:Type, step:Type):Type {
        def children := Array<Type>() -- FIXME literal
        children.add(endpoint)
        children.add(step)
        return generic(compiler.STEPPED_RANGE_TYPE, children)
    }

    function get_isNumber():Bit {
        return name.startsWith("frost.core.Int") | name.startsWith("frost.core.UInt") |
                name.startsWith("frost.core.Real") | typeKind = Kind.INT_LITERAL |
                typeKind = Kind.REAL_LITERAL
    }

    function get_isBuiltinInt():Bit {
        return typeKind = Kind.BUILTIN_INT | typeKind = Kind.BUILTIN_UINT |
                typeKind = Kind.INT_LITERAL
    }

    function get_isBuiltinNumber():Bit {
        return typeKind = Kind.BUILTIN_INT | typeKind = Kind.BUILTIN_UINT |
                typeKind = Kind.BUILTIN_FLOAT | typeKind = Kind.INT_LITERAL
    }

    function get_isSigned():Bit {
        return name.startsWith("frost.core.Int")
    }

    function get_isReal():Bit {
        return typeKind = Kind.REAL_LITERAL | name.startsWith("frost.core.Real")
    }

    function get_isChar():Bit {
        return name.startsWith("frost.core.Char")
    }

    function get_isNumeric():Bit {
        return isNumber | isChar
    }

    function get_isClass():Bit {
        match typeKind {
            when Kind.CLASS, Kind.NULLABLE, Kind.GENERIC, Kind.GENERIC_CLASS_PARAMETER,
                    Kind.GENERIC_METHOD_PARAMETER, Kind.METHOD, Kind.FUNCTION,
                    Kind.IMMUTABLE_METHOD, Kind.IMMUTABLE_FUNCTION, Kind.TUPLE {
                return true
            }
            otherwise {
                return false
            }
        }
    }

    function get_isClassLiteral():Bit {
        return typeKind = Kind.GENERIC & subtypes[0].name = "frost.core.Class"
    }

    function get_isTuple():Bit {
        return typeKind = Kind.TUPLE
    }

    function get_isMethod():Bit {
        match typeKind {
            when Kind.METHOD, Kind.FUNCTION, Kind.IMMUTABLE_METHOD, Kind.IMMUTABLE_FUNCTION {
                return true
            }
            otherwise {
                return false
            }
        }
    }

    function get_isPointer():Bit {
        return name.startsWith("frost.unsafe.Pointer")
    }

    function get_isRange():Bit {
        return name.startsWith("frost.core.Range<")
    }

    function get_isSteppedRange():Bit {
        return name.startsWith("frost.core.SteppedRange<")
    }

    function get_isNullable():Bit {
        return typeKind = Kind.NULLABLE
    }

    function nullable():Type {
        if typeKind = Kind.NULLABLE {
            return self
        }
        def subtypes := Array<Type>()
        subtypes.add(self)
        return Type("\{name}?", Kind.NULLABLE, Position(), subtypes, true)
    }

    function nonnullable():Type {
        if typeKind != Kind.NULLABLE {
            return self
        }
        return subtypes[0]
    }

    @pre(typeKind = Kind.FUNCTION | typeKind = Kind.METHOD | typeKind = Kind.IMMUTABLE_FUNCTION |
            typeKind = Kind.IMMUTABLE_METHOD)
    function get_parameterCount():Int {
        return subtypes.count - 1
    }

    function get_parameterTypes():ListView<Type> {
        return subtypes[0 .. subtypes.count - 1]
    }

    @pre((typeKind = Kind.FUNCTION | typeKind = Kind.METHOD | typeKind = Kind.IMMUTABLE_FUNCTION |
            typeKind = Kind.IMMUTABLE_METHOD) & i >= 0 & i < subtypes.count - 1->Int)
    function parameterType(i:Int):Type {
        return subtypes[i]
    }

    @pre(typeKind = Kind.FUNCTION | typeKind = Kind.METHOD | typeKind = Kind.IMMUTABLE_FUNCTION |
            typeKind = Kind.IMMUTABLE_METHOD)
    function get_returnType():Type {
        return subtypes.last
    }

    ================================================================================================
    Returns the narrowest type that can hold an instance of either type
    ================================================================================================
    function union(compiler:Compiler, other:Type):Type {
        if self = other {
            return self
        }
        if self = compiler.NULL_TYPE {
            if other.typeKind = Kind.NULLABLE {
                return other
            }
            return other.nullable()
        }
        if other = compiler.NULL_TYPE {
            if typeKind = Kind.NULLABLE {
                return self
            }
            return nullable()
        }
        if self = compiler.INVALID_TYPE {
            return self
        }
        if other = compiler.INVALID_TYPE {
            return self
        }
        if typeKind = Kind.INT_LITERAL & other.isNumber {
            return other
        }
        if isNumber & other.typeKind = Kind.INT_LITERAL {
            return self
        }
        if isReal {
            if other.typeKind = Kind.INT_LITERAL | other.typeKind = Kind.REAL_LITERAL {
                return self
            }
            if other.isNumber {
                if other.name.endsWith("64") {
                    return compiler.REAL64_TYPE
                }
                return compiler.REAL32_TYPE
            }
        }
        if other.isReal {
            if typeKind = Kind.INT_LITERAL | typeKind = Kind.REAL_LITERAL {
                return other
            }
            if isNumber {
                if name.endsWith("64") {
                    return compiler.REAL64_TYPE
                }
                return compiler.REAL32_TYPE
            }
        }
        if typeKind = Kind.NULLABLE {
            return subtypes[0].union(compiler, other).nullable()
        }
        if other.typeKind = Kind.NULLABLE {
            return union(compiler, other.subtypes[0]).nullable()
        }
        def t1 := compiler.preferredType(self)
        def t2 := compiler.preferredType(other)
        if t1.isClass & t2.isClass {
            def ancestors := HashSet<Type>()
            var t := self
            var cl := compiler.getClass(t1)
            while cl !== null {
                ancestors.add(t)
                if cl.rawSuper !== null {
                    t := compiler.remapType(t, cl.rawSuper)
                    cl := compiler.getClass(t)
                }
                else {
                    cl := null
                }
            }
            t := other
            cl := compiler.getClass(t2)
            while cl !== null {
                if ancestors.contains(t) {
                    return t
                }
                if cl.rawSuper !== null {
                    t := compiler.remapType(t, cl.rawSuper)
                    cl := compiler.getClass(t)
                }
                else {
                    cl := null
                }
            }
        }
        return compiler.OBJECT_TYPE
    }

    ================================================================================================
    Returns the widest type that could be coerced to either type.
    ================================================================================================
    function intersection(compiler:Compiler, other:Type):Type? {
        if compiler.coercionCost(self, other) !== null {
            return self
        }
        if compiler.coercionCost(other, self) !== null {
            return other
        }
        return null
    }

    @pre(typeKind != Kind.INVALID)
    @post(@return.typeKind != Kind.INVALID)
    method remap(compiler:Compiler, types:HashMap<String, Type>):Type {
        if types.count = 0 {
            return self
        }
        match typeKind {
            when Kind.GENERIC_CLASS_PARAMETER, Kind.GENERIC_METHOD_PARAMETER {
                def found := types[name]
                if found !== null {
                    return found
                }
                return self
            }
            when Kind.GENERIC {
                def base := subtypes[0].remap(compiler, types)
                def remappedArgs := Array<Type>()
                for i in 1 .. subtypes.count {
                    remappedArgs.add(subtypes[i].remap(compiler, types))
                }
                return generic(base, remappedArgs)
            }
            when Kind.NULLABLE {
                return subtypes[0].remap(compiler, types).nullable()
            }
            when Kind.METHOD, Kind.FUNCTION, Kind.IMMUTABLE_METHOD, Kind.IMMUTABLE_FUNCTION {
                def parameters := Array<Type>()
                assert subtypes.count >= 1
                for i in 0 .. subtypes.count - 1 {
                    parameters.add(subtypes[i].remap(compiler, types))
                }
                return methodType(compiler, position, typeKind, parameters,
                        subtypes[subtypes.count - 1].remap(compiler, types), priority)
            }
            when Kind.TUPLE {
                def remappedArgs := Array<Type>()
                for a in subtypes {
                    remappedArgs.add(a.remap(compiler, types))
                }
                return tuple(remappedArgs)
            }
            otherwise {
                 return self
            }
        }
    }

    @override
    function get_hash():Int {
        return name.hash
    }

    @override
    function get_asString():String {
        return name
    }
}