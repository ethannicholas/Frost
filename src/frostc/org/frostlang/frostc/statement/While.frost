package org.frostlang.frostc.statement

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.AutoContext
uses org.frostlang.frostc.Compiler.AutoScope
uses org.frostlang.frostc.Compiler.AutoUnrefs
uses org.frostlang.frostc.Compiler.EnclosingContext
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Type

class While {
    @class
    method compile(compiler:Compiler, position:MethodPosition, label:String?, test:ASTNode,
            statements:FixedArray<ASTNode>) {
        def ir := compiler.ir
        def bodyBlock := ir.newBlock("loop body")
        def endBlock := ir.newBlock("loop end")
        {
            def auto := AutoContext(compiler, EnclosingContext.LOOP(label, endBlock, bodyBlock))
            def scope := AutoScope(compiler)
            ir.add(IR.Statement.BRANCH(position, bodyBlock))
            ir.setCurrentBlock(bodyBlock)
            If.compile(compiler, position, test, statements,
                    ASTNode.BREAK(position.asPosition, null))
        }
        if !ir.currentBlockFinished {
            ir.add(IR.Statement.BRANCH(position, bodyBlock))
        }
        ir.setCurrentBlock(endBlock)
    }
}