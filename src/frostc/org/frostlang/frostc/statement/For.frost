package org.frostlang.frostc.statement

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.AutoContext
uses org.frostlang.frostc.Compiler.AutoScope
uses org.frostlang.frostc.Compiler.AutoUnrefs
uses org.frostlang.frostc.Compiler.EnclosingContext
uses org.frostlang.frostc.Compiler.Target
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.Compiler.VariableLValue
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Pair
uses org.frostlang.frostc.Position
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.Variable
uses org.frostlang.frostc.expression.Call
uses org.frostlang.frostc.lvalue.VariableLValue

class For {
    @private
    @class
    method checkSteppedRangeTypes(compiler:Compiler, position:MethodPosition, type:Type):Bit {
        if type.typeKind = Type.Kind.NULLABLE {
            return checkSteppedRangeTypes(compiler, position, type.subtypes[0])
        }
        if type.isSteppedRange {
            def type1 := type.subtypes[1].nonnullable()
            def type2 := type.subtypes[2]
            if type1 = type2 {
                return true
            }
            if type1.isChar & type2.name.startsWith("frost.core.Int") &
                    type1.name.endsWith(type2.name["frost.core.Int".length..]) {
                return true
            }
            compiler.error(position, "for loop cannot iterate over '\{type}'; endpoint and step " +
                    "types are not compatible")
            return false
        }
        return true
    }

    @private
    @class
    function signed(compiler:Compiler, type:Type):Type {
        match type.nonnullable() {
            when compiler.UINT8_TYPE  { return compiler.INT8_TYPE }
            when compiler.UINT16_TYPE { return compiler.INT16_TYPE }
            when compiler.UINT32_TYPE { return compiler.INT32_TYPE }
            when compiler.UINT64_TYPE { return compiler.INT64_TYPE }
            otherwise                 { return type }
        }
    }

    @private
    @class
    function unsigned(compiler:Compiler, type:Type):Type {
        match type.nonnullable() {
            when compiler.INT8_TYPE  { return compiler.UINT8_TYPE }
            when compiler.INT16_TYPE { return compiler.UINT16_TYPE }
            when compiler.INT32_TYPE { return compiler.UINT32_TYPE }
            when compiler.INT64_TYPE { return compiler.UINT64_TYPE }
            otherwise                { return type }
        }
    }

    @private
    @class
    function arg(a:IR.Value):ListView<ASTNode> {
        return [ASTNode.IR_WRAPPER(Position(), a)]
    }

    @private
    @class
    function getIndexType(compiler:Compiler, raw:Type):Type {
        if raw.typeKind = Type.Kind.NULLABLE {
            return getIndexType(compiler, raw.nonnullable())
        }
        if raw = compiler.CHAR8_TYPE {
            return compiler.UINT8_TYPE
        }
        else if raw = compiler.CHAR16_TYPE {
            return compiler.UINT16_TYPE
        }
        else if raw = compiler.CHAR32_TYPE {
            return compiler.INT32_TYPE
        }
        else {
            return raw
        }
    }

    @private
    @class
    method convertIndex(compiler:Compiler, position:MethodPosition, index:IR.Value,
            rawIndexType:Type):IR.Value {
        if index.type() = rawIndexType {
            return index
        }
        def rawIndexClass := compiler.getClass(rawIndexType)
        assert rawIndexClass !== null
        def create := compiler.ir.add(IR.Statement.CREATE_STRUCT(position, rawIndexClass,
                FixedArray<IR.Value>.from([compiler.extractBuiltinInt(position, index)])))
        return IR.Value.REF(create, rawIndexType)
    }

    @private
    @class
    method compileSimpleRangeFor(compiler:Compiler, position:MethodPosition, label:String?,
            index:Variable, range:IR.Value, statements:ListView<ASTNode>) {
        def ir := compiler.ir
        assert range.type().typeKind = Type.Kind.GENERIC
        assert range.type().subtypes.count = 2
        assert range.type().subtypes[0].name = Compiler.RANGE_NAME
        def indexSlot:Int
        match index.storage {
            when Variable.Storage.LOCAL(slot) {
                indexSlot := slot
            }
            otherwise {
                unreachable
            }
        }
        def rawIndexType := index.type
        def indexType := getIndexType(compiler, rawIndexType)

        def rangeClass := compiler.getClass(range.type())
        if rangeClass == null {
            return
        }
        def rangeFields := compiler.instanceFields(rangeClass)

        -- extract start value from range
        def start := compiler.convert(compiler.coerce(position, IR.Value.REF(ir.add(
                IR.Statement.EXTRACT_FIELD(position, range, rangeFields[0])),
                range.type().subtypes[1]), rawIndexType), indexType)
        if start == null {
            return
        }

        -- store start value
        ir.add(IR.Statement.STORE(position, convertIndex(compiler, position, start, rawIndexType),
                IR.Value.LOCAL(indexSlot, rawIndexType)))

        -- extract end value from range
        def end := compiler.convert(compiler.coerce(position, IR.Value.REF(ir.add(
                IR.Statement.EXTRACT_FIELD(position, range, rangeFields[1])),
                range.type().subtypes[1]), rawIndexType), indexType)
        if end == null {
            return
        }

        -- extract inclusive / exclusive from range
        def inclusive := compiler.extractBuiltinBit(position, IR.Value.REF(ir.add(
                IR.Statement.EXTRACT_FIELD(position, range, rangeFields[2])), compiler.BIT_TYPE))

        def step := compiler.compileExpression(ASTNode.INT(position.asPosition, 1),
                TypeContext.TYPE(indexType, false))
        if step == null {
            return
        }
        def stepComparison:IR.Value?
        if step.type() = compiler.INT64_TYPE {
            stepComparison := compiler.convert(step, compiler.UINT64_TYPE)
            if stepComparison == null {
                return
            }
        }
        else {
            stepComparison := step
        }

        -- start block
        def loopStart := ir.newBlock("loopStart")
        def loopEnd := ir.newBlock("loopEnd")
        def loopTest := ir.newBlock("loopTest")
        def entryInclusive := ir.newBlock("entryInclusive")
        def entryExclusive := ir.newBlock("entryExclusive")
        def context := AutoContext(compiler, EnclosingContext.LOOP(label, loopEnd, loopTest))
        {
            def scope := AutoScope(compiler)
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, inclusive, entryInclusive,
                    entryExclusive))
            ir.setCurrentBlock(entryInclusive)
            def lte := Call.compile(compiler, position, start, "<=", arg(end),
                    TypeContext.TYPE(compiler.BIT_TYPE, false))
            assert lte !== null
            def entryInclusiveTest := compiler.extractBuiltinBit(position, lte)
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, entryInclusiveTest, loopStart,
                    loopEnd))
            ir.setCurrentBlock(entryExclusive)
            def lt := Call.compile(compiler, position, start, "<", arg(end),
                    TypeContext.TYPE(compiler.BIT_TYPE, false))
            assert lt !== null
            def entryExclusiveTest := compiler.extractBuiltinBit(position, lt)
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, entryExclusiveTest, loopStart,
                    loopEnd))
            ir.setCurrentBlock(loopStart)
            for s in statements {
                compiler.compileStatement(s)
            }
        }
        if !ir.currentBlockFinished {
            ir.add(IR.Statement.BRANCH(position, loopTest))
        }
        ir.setCurrentBlock(loopTest)
        def loopInc := ir.newBlock("loopInc")
        -- perform the test by subtracting index from end and then comparing to step, to avoid
        -- overflows near the maximum value
        def indexLoad := compiler.convert(IR.Value.REF(ir.add(IR.Statement.LOAD(position,
                IR.Value.LOCAL(indexSlot, rawIndexType))), rawIndexType), indexType)
        assert indexLoad !== null
        -- always use unsigned comparison to avoid overflow; we know both the delta and the step are
        -- the same sign
        def sub := Call.compile(compiler, position, end, "-", arg(indexLoad), TypeContext.NON_VOID)
        assert sub !== null
        def delta := compiler.convert(sub, unsigned(compiler, indexType))
        assert delta !== null

        def inclusiveTest := ir.newBlock("inclusiveTest")
        def exclusiveTest := ir.newBlock("exclusiveTest")
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, inclusive, inclusiveTest, exclusiveTest))

        -- inclusive test
        ir.setCurrentBlock(inclusiveTest)
        def gte := Call.compile(compiler, position, delta, ">=", arg(stepComparison),
                TypeContext.TYPE(compiler.BIT_TYPE, false))
        assert gte !== null
        def inclusiveTestBit := compiler.extractBuiltinBit(position, gte)
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, inclusiveTestBit, loopInc, loopEnd))

        -- exclusive test
        ir.setCurrentBlock(exclusiveTest)
        def gt := Call.compile(compiler, position, delta, ">", arg(stepComparison),
                TypeContext.TYPE(compiler.BIT_TYPE, false))
        assert gt !== null
        def exclusiveTestBit := compiler.extractBuiltinBit(position, gt)
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, exclusiveTestBit, loopInc, loopEnd))

        ir.setCurrentBlock(loopInc)
        def add := Call.compile(compiler, position, indexLoad, "+", arg(step), TypeContext.NON_VOID)
        assert add !== null
        def inc := compiler.convert(add, indexType)
        assert inc !== null
        ir.add(IR.Statement.STORE(position, convertIndex(compiler, position, inc, rawIndexType),
                IR.Value.LOCAL(indexSlot, rawIndexType)))

        ir.add(IR.Statement.BRANCH(position, loopStart))

        ir.setCurrentBlock(loopEnd)
    }

    @private
    @class
    method compileSteppedRangeFor(compiler:Compiler, position:MethodPosition, label:String?,
            index:Variable, range:IR.Value, statements:ListView<ASTNode>) {
        -- I am acutely aware of how horrific this looks.
        --
        -- There's no easy way to produce clean output here, since we have to handle different step
        -- values, different loop directions, and both inclusive and exclusive ranges, all of which
        -- could potentially be determined at runtime. It gets even uglier when you consider the
        -- difficulty of handling the extremes of the numeric types. You can't just add 1 and then
        -- check to see if it's in range when the limit is MAX_INT, because you'll overflow and end
        -- up with an infinite loop. You also can't just check for being equal to the limit before
        -- adding the step, because with a step bigger than 1 (or smaller than -1) you might need to
        -- stop before actually hitting the end. So you instead check the difference between the
        -- current index and the limit, but even there you need to be careful because it could
        -- overflow in a signed test, and... ugh, it's surprisingly messy and results in a ton of
        -- code.
        --
        -- Fortunately, we can just write incredibly-awful-but-straightforward code and let LLVM
        -- optimize it to something sensible if it turns out the values are known at compile time.
        -- This works remarkably well, because LLVM is awesome.
        def ir := compiler.ir
        assert range.type().typeKind = Type.Kind.GENERIC
        assert range.type().subtypes.count = 3
        assert range.type().subtypes[0].name = Compiler.STEPPED_RANGE_NAME
        def indexSlot:Int
        match index.storage {
            when Variable.Storage.LOCAL(slot) {
                indexSlot := slot
            }
            otherwise {
                unreachable
            }
        }
        def rawIndexType := index.type
        def indexType := getIndexType(compiler, rawIndexType)
        assert indexType.typeKind != Type.Kind.NULLABLE
        def stepType := range.type().subtypes[2]
        def rangeClass := compiler.getClass(range.type())
        if rangeClass == null {
            return
        }
        def rangeFields := compiler.instanceFields(rangeClass)

        -- extract start value from range
        def start := compiler.convert(compiler.coerce(position, IR.Value.REF(ir.add(
                IR.Statement.EXTRACT_FIELD(position, range, rangeFields[0])),
                range.type().subtypes[1]), rawIndexType), indexType)
        if start == null {
            return
        }

        -- store start value
        ir.add(IR.Statement.STORE(position, convertIndex(compiler, position, start, rawIndexType),
                IR.Value.LOCAL(indexSlot, rawIndexType)))

        -- extract end value from range
        def end := compiler.convert(compiler.coerce(position, IR.Value.REF(ir.add(
                IR.Statement.EXTRACT_FIELD(position, range, rangeFields[1])),
                range.type().subtypes[1]), rawIndexType), indexType)
        if end == null {
            return
        }

        -- extract step value from range
        def step := IR.Value.REF(ir.add(IR.Statement.EXTRACT_FIELD(position, range,
                rangeFields[2])), stepType)
        def stepComparison:IR.Value?
        if step.type() = compiler.INT64_TYPE {
            stepComparison := compiler.convert(step, compiler.UINT64_TYPE)
            assert stepComparison !== null
        }
        else {
            stepComparison := step
        }
        def convertedNegStep := compiler.convert(step, signed(compiler, step.type()))
        assert convertedNegStep !== null
        def negStep := compiler.convert(Call.compile(compiler, position, convertedNegStep, "-", [],
                TypeContext.NON_VOID), stepType)
        assert negStep !== null
        def negStepComparison:IR.Value?
        if step.type() = compiler.INT64_TYPE {
            negStepComparison := compiler.convert(negStep, compiler.UINT64_TYPE)
            assert negStepComparison !== null
        }
        else {
            negStepComparison := negStep
        }

        -- extract inclusive / exclusive from range
        def inclusive := compiler.extractBuiltinBit(position, IR.Value.REF(ir.add(
                IR.Statement.EXTRACT_FIELD(position, range, rangeFields[3])), compiler.BIT_TYPE))

        -- start block
        def loopStart := ir.newBlock("loopStart")
        def loopEnd := ir.newBlock("loopEnd")
        def loopTest := ir.newBlock("loopTest")
        def forwardEntry := ir.newBlock("forwardEntry")
        def backwardEntry := ir.newBlock("backwardEntry")
        def direction:IR.Value
        def context := AutoContext(compiler, EnclosingContext.LOOP(label, loopEnd, loopTest))
        {
            def scope := AutoScope(compiler)
            if stepType.name.startsWith("frost.core.Int") |
                    stepType.name.startsWith("frost.core.Real") {
                def comparison := Call.compile(compiler, position, step, ">=",
                        [ASTNode.INT(position.asPosition, 0)],
                        TypeContext.TYPE(compiler.BIT_TYPE, false))
                assert comparison !== null
                direction := compiler.extractBuiltinBit(position, comparison)
            }
            else {
                assert stepType.name.startsWith("frost.core.UInt")
                direction := IR.Value.BIT(true, compiler.BUILTIN_BIT_TYPE)
            }
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, direction, forwardEntry, backwardEntry))
            ir.setCurrentBlock(forwardEntry)
            def forwardEntryInclusive := ir.newBlock("forwardEntryInclusive")
            def forwardEntryExclusive := ir.newBlock("forwardEntryExclusive")
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, inclusive, forwardEntryInclusive,
                    forwardEntryExclusive))
            ir.setCurrentBlock(forwardEntryInclusive)
            def lte := Call.compile(compiler, position, start, "<=", arg(end),
                    TypeContext.TYPE(compiler.BIT_TYPE, false))
            assert lte !== null
            def forwardEntryInclusiveTest := compiler.extractBuiltinBit(position, lte)
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, forwardEntryInclusiveTest, loopStart,
                    loopEnd))
            ir.setCurrentBlock(forwardEntryExclusive)
            def lt := Call.compile(compiler, position, start, "<", arg(end),
                    TypeContext.TYPE(compiler.BIT_TYPE, false))
            assert lt !== null
            def forwardEntryExclusiveTest := compiler.extractBuiltinBit(position, lt)
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, forwardEntryExclusiveTest, loopStart,
                    loopEnd))
            ir.setCurrentBlock(backwardEntry)
            def backwardEntryInclusive := ir.newBlock("backwardEntryInclusive")
            def backwardEntryExclusive := ir.newBlock("backwardEntryExclusive")
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, inclusive, backwardEntryInclusive,
                    backwardEntryExclusive))
            ir.setCurrentBlock(backwardEntryInclusive)
            def gte := Call.compile(compiler, position, start, ">=", arg(end),
                    TypeContext.TYPE(compiler.BIT_TYPE, false))
            assert gte !== null
            def backwardEntryInclusiveTest := compiler.extractBuiltinBit(position, gte)
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, backwardEntryInclusiveTest, loopStart,
                    loopEnd))
            ir.setCurrentBlock(backwardEntryExclusive)
            def gt := Call.compile(compiler, position, start, ">", arg(end),
                        TypeContext.TYPE(compiler.BIT_TYPE, false))
            assert gt !== null
            def backwardEntryExclusiveTest := compiler.extractBuiltinBit(position, gt)
            ir.add(IR.Statement.CONDITIONAL_BRANCH(position, backwardEntryExclusiveTest, loopStart,
                    loopEnd))
            ir.setCurrentBlock(loopStart)
            for s in statements {
                compiler.compileStatement(s)
            }
        }
        if !ir.currentBlockFinished {
            ir.add(IR.Statement.BRANCH(position, loopTest))
        }
        ir.setCurrentBlock(loopTest)
        def loopInc := ir.newBlock("loopInc")
        -- beginning of loop test, load index and determine direction
        def indexLoad := compiler.convert(IR.Value.REF(ir.add(IR.Statement.LOAD(position,
                IR.Value.LOCAL(indexSlot, rawIndexType))), rawIndexType), indexType)
        assert indexLoad !== null
        def forwardTest := ir.newBlock("forwardTest")
        def backwardTest := ir.newBlock("backwardTest")
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, direction, forwardTest, backwardTest))

        -- forward loop; perform the test by subtracting index from end and then comparing to step,
        -- to avoid overflows near the maximum value
        ir.setCurrentBlock(forwardTest)
        -- always use unsigned comparison to avoid overflow; we know both the delta and the step are
        -- the same sign
        def forwardDelta := compiler.convert(Call.compile(compiler, position, end, "-",
                arg(indexLoad), TypeContext.NON_VOID), unsigned(compiler, indexType))
        assert forwardDelta !== null

        -- forward loop; determine inclusive / exclusive
        def forwardInclusiveTest := ir.newBlock("forwardInclusiveTest")
        def forwardExclusiveTest := ir.newBlock("forwardExclusiveTest")
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, inclusive, forwardInclusiveTest,
                forwardExclusiveTest))

        -- forward inclusive test
        ir.setCurrentBlock(forwardInclusiveTest)
        def gte1 := Call.compile(compiler, position, forwardDelta, ">=", arg(stepComparison),
                TypeContext.TYPE(compiler.BIT_TYPE, false))
        assert gte1 !== null
        def forwardInclusiveTestBit := compiler.extractBuiltinBit(position, gte1)
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, forwardInclusiveTestBit, loopInc, loopEnd))

        -- forward exclusive test
        ir.setCurrentBlock(forwardExclusiveTest)
        def gt1 := Call.compile(compiler, position, forwardDelta, ">", arg(stepComparison),
                TypeContext.TYPE(compiler.BIT_TYPE, false))
        assert gt1 !== null
        def forwardExclusiveTestBit := compiler.extractBuiltinBit(position, gt1)
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, forwardExclusiveTestBit, loopInc, loopEnd))

        -- backward loop; perform the test by subtracting end from index and then comparing to
        -- -step, to avoid overflows near the minimum value
        ir.setCurrentBlock(backwardTest)
        def sub := Call.compile(compiler, position, indexLoad, "-", arg(end), TypeContext.NON_VOID)
        assert sub !== null
        def backwardDelta := compiler.convert(sub, unsigned(compiler, indexType))
        assert backwardDelta !== null

        -- backward loop; determine inclusive / exclusive
        def backwardInclusiveTest := ir.newBlock("backwardInclusiveTest")
        def backwardExclusiveTest := ir.newBlock("backwardExclusiveTest")
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, inclusive, backwardInclusiveTest,
                backwardExclusiveTest))

        -- backward inclusive test
        ir.setCurrentBlock(backwardInclusiveTest)
        def gte2 := Call.compile(compiler, position, backwardDelta, ">=", arg(negStepComparison),
                TypeContext.TYPE(compiler.BIT_TYPE, false))
        assert gte2 !== null
        def backwardInclusiveTestBit := compiler.extractBuiltinBit(position, gte2)
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, backwardInclusiveTestBit, loopInc,
                loopEnd))

        -- backward exclusive test
        ir.setCurrentBlock(backwardExclusiveTest)
        def gt2 := Call.compile(compiler, position, backwardDelta, ">", arg(negStepComparison),
                TypeContext.TYPE(compiler.BIT_TYPE, false))
        assert gt2 !== null
        def backwardExclusiveTestBit := compiler.extractBuiltinBit(position, gt2)
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, backwardExclusiveTestBit, loopInc,
                loopEnd))

        ir.setCurrentBlock(loopInc)
        def inc := compiler.convert(Call.compile(compiler, position, indexLoad, "+", arg(step),
                TypeContext.NON_VOID), indexType)
        assert inc !== null
        ir.add(IR.Statement.STORE(position, convertIndex(compiler, position, inc, rawIndexType),
                IR.Value.LOCAL(indexSlot, rawIndexType)))
        ir.add(IR.Statement.BRANCH(position, loopStart))

        ir.setCurrentBlock(loopEnd)
    }

    @private
    @class
    method compileRangeFor(compiler:Compiler, position:MethodPosition, label:String?,
            astTarget:ASTNode, list:IR.Value, statements:ListView<ASTNode>) {
        def ir := compiler.ir
        def listType := list.type()
        assert listType.isRange | listType.isSteppedRange
        if listType.subtypes[1].isNullable {
            compiler.error(position, "'for' loop cannot operate on nullable range '\{listType}'; " +
                    "loop ranges must specify both start and end")
        }
        if !checkSteppedRangeTypes(compiler, position, list.type()) {
            return
        }
        def elementType:Type
        if listType.typeKind = Type.Kind.NULLABLE {
            assert list.type().subtypes[0].typeKind = Type.Kind.GENERIC
            elementType := list.type().subtypes[0].subtypes[1]
        }
        else {
            assert listType.typeKind = Type.Kind.GENERIC
            elementType := list.type().subtypes[1]
        }
        if !elementType.isNumeric {
            compiler.error(position, "for loop expected a numeric range, but found " +
                    "'\{list.type()}'")
            return
        }
        def scope := AutoScope(compiler)
        def target := compiler.compileTarget(astTarget, Variable.Kind.DEF, null,
                elementType.nonnullable())
        if target == null {
            return
        }
        compiler.createScopes(target)
        match target {
            when Target.VARIABLE(v, _) {
                if listType.isRange {
                    compileSimpleRangeFor(compiler, position, label, v, list, statements)
                }
                else {
                    compileSteppedRangeFor(compiler, position, label, v, list, statements)
                }
            }
            otherwise {
                assert false
            }
        }
    }

    @private
    @class
    method compileRangeFor(compiler:Compiler, position:MethodPosition, label:String?,
            astTarget:ASTNode, rawList:ASTNode, statements:ListView<ASTNode>) {
        def ir := compiler.ir
        def list:IR.Value?
        match astTarget {
            when ASTNode.TYPED_IDENTIFIER(position, _, type) {
                def t := compiler.resolve(compiler.scanner.convertType(type))
                if t == null {
                    return
                }
                if t.typeKind = Type.Kind.NULLABLE {
                    compiler.error(position, "for loop variable cannot have nullable type '\{t}'")
                    return
                }
                if !t.isNumeric {
                    compiler.error(position, "for loop variable cannot have non-numeric type " +
                            "'\{t}'")
                    return
                }
                match rawList {
                    when ASTNode.RANGE(_, _, _, _, step) {
                        def type:Type
                        if step !== null {
                            type := Type.SteppedRangeOf(compiler, t)
                        }
                        else {
                            type := Type.RangeOf(compiler, t)
                        }
                        list := compiler.compileExpression(rawList, TypeContext.TYPE(type, false))
                    }
                    otherwise {
                        unreachable -- shouldn't end up here otherwise
                    }
                }
            }
            otherwise {
                def preferred := compiler.preferredType(rawList)
                var type := TypeContext.NON_VOID
                if preferred !== null & preferred.isRange {
                    type := TypeContext.TYPE(Type.RangeOf(compiler,
                            preferred.subtypes[1].nonnullable()), false)
                }
                else if preferred !== null & preferred.isSteppedRange {
                    type := TypeContext.TYPE(Type.SteppedRangeOf(compiler,
                            preferred.subtypes[1].nonnullable(), preferred.subtypes[2]), false)
                }
                list := compiler.compileExpression(rawList, type)
            }
        }
        if list == null {
            return
        }
        compileRangeFor(compiler, position, label, astTarget, list, statements)
    }

    @private
    @class
    method compileIteratorFor(compiler:Compiler, position:MethodPosition, label:String?,
            target:ASTNode, iterator:IR.Value, statements:ListView<ASTNode>) {
        def ir := compiler.ir
        def testBlock := ir.newBlock("testBlock")
        def bodyBlock := ir.newBlock("bodyBlock")
        def endBlock := ir.newBlock("endBlock")
        def context := AutoContext(compiler, EnclosingContext.LOOP(label, endBlock, testBlock))
        assert iterator.type().typeKind = Type.Kind.GENERIC &
                iterator.type().subtypes[0] = compiler.ITERATOR_TYPE
        ir.add(IR.Statement.BRANCH(position, testBlock))
        ir.setCurrentBlock(testBlock)
        def compiledTest := Call.compile(compiler, position, iterator, "get_done", Array<ASTNode>(),
                TypeContext.TYPE(compiler.BIT_TYPE, false))
        if compiledTest == null {
            return
        }
        ir.add(IR.Statement.CONDITIONAL_BRANCH(position, compiler.extractBuiltinBit(position,
                compiledTest), endBlock, bodyBlock))
        ir.setCurrentBlock(bodyBlock)
        {
            def scope := AutoScope(compiler)
            def compiledTarget:Target?
            {
                def unrefs := AutoUnrefs(compiler)
                compiledTarget := compiler.compileTarget(target, Variable.Kind.DEF, null,
                        iterator.type().subtypes[1])
                if compiledTarget == null {
                    return
                }
            }
            compiler.createScopes(compiledTarget)
            def next:IR.Value?
            next := Call.compile(compiler, position, iterator, "next", Array<ASTNode>(),
                    TypeContext.UNSPECIFIED)
            if next == null {
                return
            }
            compiler.compileStore(position, compiledTarget, next)
            for s in statements {
                compiler.compileStatement(s)
            }
        }
        if !ir.currentBlockFinished {
            ir.add(IR.Statement.BRANCH(position, testBlock))
        }
        ir.setCurrentBlock(endBlock)
    }

    @class
    method compile(compiler:Compiler, position:MethodPosition, label:String?, rawTarget:ASTNode,
            rawList:ASTNode, statements:ListView<ASTNode>) {
        match rawList {
            when ASTNode.RANGE {
                -- need to resolve unresolved range in terms of its target, as for i:Int8 in 0 .. 10
                -- and for i:Int64 in 0 .. 10 result in different kinds of ranges
                compileRangeFor(compiler, position, label, rawTarget, rawList, statements)
                return
            }
        }
        def list := compiler.compileExpression(rawList)
        if list == null {
            return
        }
        if list.type().isRange | list.type().isSteppedRange {
            -- it's a range, but not an unresolved one
            compileRangeFor(compiler, position, label, rawTarget, list, statements)
        }
        else {
            def listPosition := MethodPosition(rawList.position(), position.methodIndex)
            for intf in compiler.allInterfaces(list.type()) {
                if intf.typeKind = Type.Kind.GENERIC & intf.subtypes[0] = compiler.ITERATOR_TYPE {
                    def iterator := compiler.coerce(listPosition, list, intf)
                    if iterator == null {
                        return
                    }
                    compileIteratorFor(compiler, position, label, rawTarget, iterator, statements)
                    return
                }
                if intf.typeKind = Type.Kind.GENERIC & intf.subtypes[0] = compiler.ITERABLE_TYPE {
                    def iterable := compiler.coerce(listPosition, list, intf)
                    if iterable == null {
                        return
                    }
                    def iterator := Call.compile(compiler, position, iterable, "get_iterator",
                            Array<ASTNode>(), TypeContext.NON_VOID)
                    assert iterator !== null,
                            "call to get_interator failed on \{iterable} at \{position}"
                    compileIteratorFor(compiler, position, label, rawTarget, iterator, statements)
                    return
                }
            }
            compiler.error(rawList.position(), "expected a range, Iterable, or Iterator, but " +
                    "found '\{list.type()}'")
        }
    }
}