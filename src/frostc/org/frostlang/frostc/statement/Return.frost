package org.frostlang.frostc.statement

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.AutoContext
uses org.frostlang.frostc.Compiler.AutoScope
uses org.frostlang.frostc.Compiler.AutoUnrefs
uses org.frostlang.frostc.Compiler.EnclosingContext
uses org.frostlang.frostc.Compiler.FieldLValue
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.FieldDecl
uses org.frostlang.frostc.MethodDecl
uses org.frostlang.frostc.Position
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.Variable
uses org.frostlang.frostc.lvalue.FieldLValue

class Return {
    @class
    method compile(compiler:Compiler, position:Position, value:ASTNode?) {
        def ir := compiler.ir
        def currentClass := compiler.currentClass[0]
        def currentMethod := compiler.currentMethod[0]
        if currentMethod.name = "cleanup" & currentMethod.parameters.count = 0 &
                currentMethod.owner.name != Compiler.WEAK_NAME {
            -- call super cleanup
            if currentClass.rawSuper !== null & !compiler.isValue(currentClass) {
                def supertype := compiler.remapType(currentClass.type, currentClass.rawSuper)
                compiler.compileStatement(ASTNode.CALL(position, ASTNode.DOT(position,
                        ASTNode.SUPER(position), "cleanup"), FixedArray<ASTNode>()))
            }
            -- unref fields
            assert !compiler.inFieldCleanup
            compiler.inFieldCleanup := true
            for f in currentMethod.owner.fields {
                if compiler.resolve(f) & !f.annotations.isClass &
                        f.fieldKind != FieldDecl.Kind.PROPERTY & compiler.isRefCounted(f.type) {
                    def load := FieldLValue(compiler, position,
                            compiler.compileExpression(ASTNode.IDENTIFIER(position,
                                    Compiler.FORCE_SELF_NAME), TypeContext.UNSPECIFIED),
                            f).compileLoad()
                    if load == null {
                        return
                    }
                    compiler.compileUnref(load)
                }
            }
            assert compiler.inFieldCleanup
            compiler.inFieldCleanup := false
        }
        if value !== null {
            if currentMethod.returnType = Type.Void() {
                compiler.error(position, "cannot return a value from a method with no return type")
                return
            }
            def compiled := compiler.compileExpression(value,
                    TypeContext.TYPE(currentMethod.returnType, false))
            if compiled == null {
                return
            }
            if compiler.isRefCounted(compiled.type()) {
                compiler.compileRef(compiled)
            }
            compiler.leaveAllScopes()
            if compiler.returnVar !== null {
                def returnSlot:Int
                match compiler.returnVar.storage {
                    when Variable.Storage.LOCAL(slot) {
                        returnSlot := slot
                    }
                }
                ir.add(IR.Statement.STORE(position, compiled, IR.Value.LOCAL(returnSlot,
                        compiled.type())))
                ir.add(IR.Statement.BRANCH(position, compiler.postconditionEntryBlock))
            }
            else {
                ir.add(IR.Statement.RETURN(position, compiled))
            }
        }
        else {
            if currentMethod.returnType != Type.Void() {
                if currentMethod.methodKind = MethodDecl.Kind.INIT {
                    compile(compiler, position, ASTNode.SELF(position))
                    return
                }
                compiler.error(position, "expected a return value of type " +
                        "'\{currentMethod.returnType}'")
            }
            compiler.leaveAllScopes()
            if compiler.postconditionEntryBlock !== null {
                ir.add(IR.Statement.BRANCH(position, compiler.postconditionEntryBlock))
            }
            else {
                ir.add(IR.Statement.RETURN(position, null))
            }
        }
    }
}