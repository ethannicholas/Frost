package org.frostlang.frostc.statement

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.ChoiceCase
uses org.frostlang.frostc.ClassDecl
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.AutoScope
uses org.frostlang.frostc.Compiler.AutoUnrefs
uses org.frostlang.frostc.Compiler.EnclosingContext
uses org.frostlang.frostc.Compiler.Target
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.Compiler.VariableLValue
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.Pair
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Position
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.Variable
uses org.frostlang.frostc.expression.Call
uses org.frostlang.frostc.expression.Dot
uses org.frostlang.frostc.lvalue.VariableLValue
uses org.frostlang.frostc.parser.Token

class Match {
    @private
    @class
    method checkChoiceMatch(compiler:Compiler, position:MethodPosition, cc:ChoiceCase?,
            choiceClass:ClassDecl?, value:IR.Value, testCount:Int, argCount:Int):Bit {
        if cc == null {
            return false
        }
        if choiceClass == null {
            compiler.error(position, "cannot match choice case '\{cc}' against '\{value.type()}'")
            return false
        }
        if cc.owner !== choiceClass {
            compiler.error(position, "cannot match choice case '\{cc}' against " +
                    "'\{choiceClass.name}'")
            return false
        }
        if testCount != 1 {
            compiler.error(position, "destructuring choice 'when' cannot be used together with " +
                    "other 'when' comparisons")
            return false
        }
        if argCount != cc.fields.count {
            compiler.error(position, "choice '\{cc}' requires \{cc.fields.count}" +
                    " argument\{cc.fields.count = 1:|s}, but found \{argCount}")
            return false
        }
        return true
    }

    @private
    @class
    method destructureChoiceCase(compiler:Compiler, ir:IR, position:MethodPosition, value:IR.Value,
            cc:ChoiceCase, args:FixedArray<ASTNode>) {
        for i in 0 .. args.count {
            def ptr := ir.add(IR.Statement.GET_CHOICE_FIELD_POINTER(position, value, cc, i))
            def load := ir.add(IR.Statement.LOAD(position, IR.Value.REF(ptr, cc.fields[i])))
            def text := compiler.getText(args[i])
            if text !== null & text = "_" {
                continue
            }
            def target:Target?
            {
                def unrefs := AutoUnrefs(compiler)
                target := compiler.compileTarget(args[i], Variable.Kind.DEF,
                        ASTNode.IR_WRAPPER(position.asPosition, IR.Value.REF(load, cc.fields[i])),
                                null)
                if target == null {
                    return
                }
                compiler.compileStore(position, target, IR.Value.REF(load, cc.fields[i]))
            }
            compiler.createScopes(target)
        }    
    }

    @private
    @class
    @pre(whens.count > 0 | other !== null)
    method compileIfChain(compiler:Compiler, position:MethodPosition, value:IR.Value,
            choiceClass:ClassDecl?, choiceTag:IR.Value?, whens:FixedArray<ASTNode>,
            other:FixedArray<ASTNode>?) {
        function getPosition(node:ASTNode):MethodPosition {
            return MethodPosition(node.position(), compiler.currentMethodIndex)
        }
        def ir := compiler.ir
        def end := ir.newBlock("match end")
        var nextBlock := ir.currentBlock.id
        for i in 0 .. whens.count {
            def w := whens[i]
            match w {
                when ASTNode.WHEN(position, tests, statements) {
                    {
                        def auto := AutoScope(compiler)
                        var testSuccess := ir.newBlock("test success")
                        for j in 0 .. tests.count {
                            if nextBlock != ir.currentBlock.id {
                                ir.setCurrentBlock(nextBlock)
                            }
                            if j < tests.count - 1->Int | i < whens.count - 1->Int | other !== null {
                                nextBlock := ir.newBlock("match")
                            }
                            else {
                                nextBlock := end
                            }
                            def t := tests[j]
                            match t {
                                when ASTNode.CALL(callPos, base, args) {
                                    def position := getPosition(t)
                                    def cc := compiler.getChoiceCase(base)
                                    if cc !== null {
                                        if checkChoiceMatch(compiler, getPosition(base), cc[1],
                                                choiceClass, value, tests.count, args.count) {
                                            def testBit:IR.Value
                                            {
                                                def unrefs := AutoUnrefs(compiler)
                                                def eqArgs := [ASTNode.INT(base.position(),
                                                        cc[1].tag.asUInt64)]
                                                def test := Call.compile(compiler,
                                                        getPosition(base), choiceTag, "=", eqArgs,
                                                        TypeContext.TYPE(compiler.BIT_TYPE, false))
                                                assert test !== null
                                                testBit := compiler.extractBuiltinBit(position,
                                                        test)
                                            }
                                            ir.add(IR.Statement.CONDITIONAL_BRANCH(position,
                                                    testBit, testSuccess, nextBlock))
                                            ir.setCurrentBlock(testSuccess)
                                            destructureChoiceCase(compiler, ir, position, value,
                                                    cc[1], args)
                                        }
                                        continue
                                    }
                                }
                            }
                            def testBit:IR.Value
                            {
                                def unrefs := AutoUnrefs(compiler)
                                def test:IR.Value?
                                def cc := compiler.getChoiceCase(t)
                                if cc !== null {
                                    if choiceTag == null {
                                        compiler.error(position, "'\{value.type()}' is not an " +
                                                "instance of '\{cc[1].owner.name}'")
                                        return
                                    }
                                    def args := [ASTNode.INT(t.position(),
                                            cc[1].tag.asUInt64)]
                                    test := Call.compile(compiler, getPosition(t), choiceTag, "=",
                                            args, TypeContext.TYPE(compiler.BIT_TYPE, false))
                                    if test == null {
                                        return
                                    }
                                }
                                else {
                                    test := Call.compile(compiler, getPosition(t), value, "=", [t],
                                            TypeContext.TYPE(compiler.BIT_TYPE, false))
                                    if test == null {
                                        return
                                    }
                                }
                                testBit := compiler.extractBuiltinBit(getPosition(t), test)
                            }
                            ir.add(IR.Statement.CONDITIONAL_BRANCH(getPosition(t),
                                    testBit, testSuccess, nextBlock))
                        }
                        ir.setCurrentBlock(testSuccess)
                        for s in statements {
                            compiler.compileStatement(s)
                        }
                    }
                    if !ir.currentBlockFinished {
                        ir.add(IR.Statement.BRANCH(getPosition(w), end))
                    }
                }
                otherwise {
                    unreachable
                }
            }
        }
        if other !== null {
            {
                def scope := AutoScope(compiler)
                ir.setCurrentBlock(nextBlock)
                for s in other {
                    compiler.compileStatement(s)
                }
            }
            if !ir.currentBlockFinished {
                ir.add(IR.Statement.BRANCH(position, end))
            }
        }
        ir.setCurrentBlock(end)
    }

    @private
    @class
    @pre(whens.count > 0 | other !== null)
    method compileSwitch(compiler:Compiler, position:MethodPosition, value:IR.Value,
            choiceClass:ClassDecl?, choiceTag:IR.Value?, whens:FixedArray<ASTNode>,
            other:FixedArray<ASTNode>?) {
        function getPosition(node:ASTNode):MethodPosition {
            return MethodPosition(node.position(), compiler.currentMethodIndex)
        }
        def ir := compiler.ir
        def startBlock := ir.currentBlock.id
        def end := ir.newBlock("match end")
        def cases := Array<(UInt64, IR.Block.ID)>()
        def hitCases := IdentitySet<ChoiceCase>()
        for i in 0 .. whens.count {
            def w := whens[i]
            match w {
                when ASTNode.WHEN(position, tests, statements) {
                    {
                        def auto := AutoScope(compiler)
                        def block := ir.newBlock("match \{w}")
                        ir.setCurrentBlock(block)
                        for t in tests {
                            match t {
                                when ASTNode.CALL(callPos, base, args) {
                                    def position := getPosition(t)
                                    def cc := compiler.getChoiceCase(base)
                                    if cc !== null {
                                        if checkChoiceMatch(compiler, getPosition(base), cc[1],
                                                choiceClass, value, tests.count, args.count) {
                                            if !hitCases.contains(cc[1]) {
                                                hitCases.add(cc[1])
                                            }
                                            else {
                                                compiler.error(position, "duplicate 'when' test " +
                                                        "'\{cc[1].name}'")
                                            }
                                            cases.add((cc[1].tag.asUInt64, block))
                                            destructureChoiceCase(compiler, ir, position, value,
                                                    cc[1], args)
                                        }
                                        continue
                                    }
                                }
                            }
                            def testBit:IR.Value
                            {
                                def unrefs := AutoUnrefs(compiler)
                                def test:IR.Value?
                                def cc := compiler.getChoiceCase(t)
                                if cc !== null {
                                    if choiceTag == null {
                                        compiler.error(position, "'\{value.type()}' is not an " +
                                                "instance of '\{cc[1].owner.name}'")
                                        return
                                    }
                                    cases.add((cc[1].tag.asUInt64, block))
                                }
                                else {
                                    def v := compiler.compileExpression(t)
                                    if v == null {
                                        return
                                    }
                                    var found := false
                                    match v {
                                        when IR.Value.REF(id, t) {
                                            if t.isInt {
                                                match ir.statements[id] {
                                                    when IR.Statement.CREATE_STRUCT(_, _, args) {
                                                        assert args.count = 1
                                                        match args[0] {
                                                            when IR.Value.INT(i, _) {
                                                                cases.add((i, block))
                                                                found := true
                                                            }
                                                            otherwise {
                                                                unreachable
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    if !found {
                                        compiler.error(position, "expected match case to be " +
                                                "a constant integer")                                    
                                    }
                                }
                            }
                        }
                        for s in statements {
                            compiler.compileStatement(s)
                        }
                    }
                    if !ir.currentBlockFinished {
                        ir.add(IR.Statement.BRANCH(getPosition(w), end))
                    }
                }
                otherwise {
                    unreachable
                }
            }
        }
        def otherBlock:IR.Block.ID := end
        if other !== null {
            {
                def scope := AutoScope(compiler)
                otherBlock := ir.newBlock("otherwise")
                ir.setCurrentBlock(otherBlock)
                for s in other {
                    compiler.compileStatement(s)
                }
            }
            if !ir.currentBlockFinished {
                ir.add(IR.Statement.BRANCH(position, end))
            }
        }
        else if hitCases.count > 0 & hitCases.count = choiceClass!.choiceCases.count {
            -- Exhaustive. Doesn't really matter where the (unreachable) otherBlock is
            -- directed to, so long as it doesn't make the analyzer think we can skip past this
            -- switch
            otherBlock := cases[0][1]
        }
        else {
            otherBlock := end
        }
        ir.setCurrentBlock(startBlock)
        ir.add(IR.Statement.SWITCH(position, (choiceTag !== null).choose(choiceTag, value),
                FixedArray<(UInt64, IR.Block.ID)>.from(cases), otherBlock))
        ir.setCurrentBlock(end)        
    }

    @class
    method compile(compiler:Compiler, position:MethodPosition, value:ASTNode,
            whens:FixedArray<ASTNode>, other:FixedArray<ASTNode>?) {
        var compiledValue := compiler.compileExpression(value, TypeContext.NON_VOID)
        if compiledValue == null | (whens.count = 0 & other == null) {
            return
        }
        compiledValue := compiler.coerce(position, compiledValue,
                compiledValue.type().nonnullable())
        def cl := compiler.getClass(compiledValue.type())
        if cl == null {
            return
        }
        def choiceClass:ClassDecl? := null
        def choiceTag:IR.Value?
        if cl.classKind = ClassDecl.Kind.CHOICE {
            choiceTag := Dot.compile(compiler, position, compiledValue, ClassDecl.TAG_NAME)
            choiceClass := cl
        }
        else if compiler.getSymbolTable(cl)["="] == null {
            compiler.error(value.position(), "'match' value does not define the '=' operator")
            return
        }
        else {
            choiceTag := null
        }
        if choiceClass !== null | compiledValue.type().isInt {
            compileSwitch(compiler, position, compiledValue, choiceClass, choiceTag, whens, other)   
        }
        else {
            compileIfChain(compiler, position, compiledValue, choiceClass, choiceTag, whens, other)
        }
    }
}