package org.frostlang.frostc.statement

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.ChoiceCase
uses org.frostlang.frostc.ClassDecl
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.AutoScope
uses org.frostlang.frostc.Compiler.AutoUnrefs
uses org.frostlang.frostc.Compiler.EnclosingContext
uses org.frostlang.frostc.Compiler.Target
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.Compiler.VariableLValue
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.Pair
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Position
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.Variable
uses org.frostlang.frostc.expression.Call
uses org.frostlang.frostc.expression.Dot
uses org.frostlang.frostc.lvalue.VariableLValue
uses org.frostlang.frostc.parser.Token

class Match {
    @private
    @class
    method checkChoiceMatch(compiler:Compiler, position:MethodPosition, cc:ChoiceCase?,
            choiceClass:ClassDecl?, value:IR.Value):Bit {
        if cc == null {
            return false
        }
        if choiceClass == null {
            compiler.error(position, "cannot match choice case '\{cc}' against '\{value.type()}'")
            return false
        }
        if cc.owner !== choiceClass {
            compiler.error(position, "cannot match choice case '\{cc}' against " +
                    "'\{choiceClass.name}'")
            return false
        }
        return true
    }

    @private
    @class
    @pre(whens.count > 0 | other !== null)
    method compileChainedIfMatch(compiler:Compiler, position:MethodPosition, value:IR.Value,
            choiceClass:ClassDecl?, choiceRawValue:IR.Value?, whens:FixedArray<ASTNode>,
            other:FixedArray<ASTNode>?) {
        function getPosition(node:ASTNode):MethodPosition {
            return MethodPosition(node.position(), compiler.currentMethodIndex)
        }
        def ir := compiler.ir
        def end := ir.newBlock("match end")
        var nextBlock := ir.currentBlock.id
        for i in 0 .. whens.count {
            def w := whens[i]
            match w {
                when ASTNode.WHEN(position, tests, statements) {
                    {
                        def auto := AutoScope(compiler)
                        var testSuccess := ir.newBlock("test success")
                        for j in 0 .. tests.count {
                            if nextBlock != ir.currentBlock.id {
                                ir.setCurrentBlock(nextBlock)
                            }
                            if j < tests.count - 1->Int | i < whens.count - 1->Int | other !== null {
                                nextBlock := ir.newBlock("match")
                            }
                            else {
                                nextBlock := end
                            }
                            def t := tests[j]
                            match t {
                                when ASTNode.CALL(callPos, base, args) {
                                    def position := getPosition(t)
                                    def cc := compiler.getChoiceCase(base)
                                    if cc !== null {
                                        if checkChoiceMatch(compiler, getPosition(base), cc.second,
                                                choiceClass, value) {
                                            if tests.count != 1 {
                                                compiler.error(position, "destructuring choice " +
                                                        "'when' cannot be used together with " +
                                                        "other 'when' comparisons")
                                                return
                                            }
                                            if args.count != cc.second.fields.count {
                                                compiler.error(position, "choice '\{cc.second}' " +
                                                        "requires " + cc.second.fields.count +
                                                        " argument\{cc.second.fields.count = 1:|s}, " +
                                                        "but found " + args.count)
                                                return
                                            }
                                            if choiceRawValue == null {
                                                compiler.error(position, "'\{value.type()}' is " +
                                                        "not an instance of " +
                                                        "'\{cc.second.owner.name}'")
                                                return
                                            }
                                            def testBit:IR.Value
                                            {
                                                def unrefs := AutoUnrefs(compiler)
                                                def eqArgs := [ASTNode.INT(base.position(),
                                                        cc.second.rawValue.asUInt64)]
                                                def test := Call.compile(compiler,
                                                        getPosition(base), choiceRawValue, "=",
                                                        eqArgs,
                                                        TypeContext.TYPE(compiler.BIT_TYPE, false))
                                                assert test !== null
                                                testBit := compiler.extractBuiltinBit(position,
                                                        test)
                                            }
                                            ir.add(IR.Statement.CONDITIONAL_BRANCH(position,
                                                    testBit, testSuccess, nextBlock))
                                            ir.setCurrentBlock(testSuccess)
                                            for i in 0 .. args.count {
                                                def ptr := ir.add(
                                                        IR.Statement.GET_CHOICE_FIELD_POINTER(
                                                            position, value, cc.second, i))
                                                def load := ir.add(IR.Statement.LOAD(position,
                                                        IR.Value.REF(ptr, cc.second.fields[i])))
                                                def text := compiler.getText(args[i])
                                                if text !== null & text = "_" {
                                                    continue
                                                }
                                                def target:Target?
                                                {
                                                    def unrefs := AutoUnrefs(compiler)
                                                    target := compiler.compileTarget(args[i],
                                                            Variable.Kind.DEF,
                                                            ASTNode.IR_WRAPPER(callPos,
                                                                    IR.Value.REF(load,
                                                                        cc.second.fields[i])),
                                                                    null)
                                                    if target == null {
                                                        return
                                                    }
                                                    compiler.compileStore(getPosition(args[i]),
                                                            target,
                                                            IR.Value.REF(load, cc.second.fields[i]))
                                                }
                                                compiler.createScopes(target)
                                            }
                                            continue
                                        }
                                    }
                                }
                            }
                            def testBit:IR.Value
                            {
                                def unrefs := AutoUnrefs(compiler)
                                def test:IR.Value?
                                def cc := compiler.getChoiceCase(t)
                                if cc !== null {
                                    if choiceRawValue == null {
                                        compiler.error(position, "'\{value.type()}' is not an " +
                                                "instance of '\{cc.second.owner.name}'")
                                        return
                                    }
                                    def args := [ASTNode.INT(t.position(),
                                            cc.second.rawValue.asUInt64)]
                                    test := Call.compile(compiler, getPosition(t), choiceRawValue,
                                            "=", args, TypeContext.TYPE(compiler.BIT_TYPE, false))
                                    if test == null {
                                        return
                                    }
                                }
                                else {
                                    test := Call.compile(compiler, getPosition(t), value, "=", [t],
                                            TypeContext.TYPE(compiler.BIT_TYPE, false))
                                    if test == null {
                                        return
                                    }
                                }
                                testBit := compiler.extractBuiltinBit(getPosition(t), test)
                            }
                            ir.add(IR.Statement.CONDITIONAL_BRANCH(getPosition(t),
                                    testBit, testSuccess, nextBlock))
                        }
                        ir.setCurrentBlock(testSuccess)
                        for s in statements {
                            compiler.compileStatement(s)
                        }
                    }
                    if !ir.currentBlockFinished {
                        ir.add(IR.Statement.BRANCH(getPosition(w), end))
                    }
                }
                otherwise {
                    unreachable
                }
            }
        }
        if other !== null {
            {
                def scope := AutoScope(compiler)
                ir.setCurrentBlock(nextBlock)
                for s in other {
                    compiler.compileStatement(s)
                }
            }
            if !ir.currentBlockFinished {
                ir.add(IR.Statement.BRANCH(position, end))
            }
        }
        ir.setCurrentBlock(end)
    }

    @class
    method compile(compiler:Compiler, position:MethodPosition, value:ASTNode,
            whens:FixedArray<ASTNode>, other:FixedArray<ASTNode>?) {
        def compiledValue := compiler.compileExpression(value, TypeContext.NON_VOID)
        if compiledValue == null | (whens.count = 0 & other == null) {
            return
        }
        def cl := compiler.getClass(compiledValue.type())
        if cl == null {
            return
        }
        def choiceClass:ClassDecl? := null
        def choiceRawValue:IR.Value?
        if cl.classKind = ClassDecl.Kind.CHOICE {
            choiceRawValue := Dot.compile(compiler, position, compiledValue,
                    ClassDecl.RAW_VALUE_NAME)
            choiceClass := cl
        }
        else if compiler.getSymbolTable(cl)["="] == null {
            compiler.error(value.position(), "'match' value does not define the '=' operator")
            return
        }
        else {
            choiceRawValue := null
        }
        compileChainedIfMatch(compiler, position, compiledValue, choiceClass, choiceRawValue, whens,
                other)
    }
}