package org.frostlang.frostc.statement

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.expression.Binary
uses org.frostlang.frostc.expression.Call
uses org.frostlang.frostc.lvalue.LValue

class Assignment {
    @class
    method compile(compiler:Compiler, position:MethodPosition, rawLeft:ASTNode, op:Binary.Operator,
            rawRight:ASTNode) {
        if !op.isAssignment {
            if op = Binary.Operator.EQ {
                compiler.error(position, "not a statement (did you mean ':='?)")
            }
            else {
                compiler.error(position, "not a statement")
            }
            return
        }
        match rawLeft {
            when ASTNode.TUPLE(_, lvalues) {
                def right := compiler.compileExpression(rawRight, Compiler.TypeContext.NON_VOID)
                if right == null {
                    return
                }
                def rightType := right.type.nonnullable()
                if !rightType.isTuple {
                    compiler.error(rawRight.position,
                            "expected a tuple in destructuring assignment")
                    return
                }
                if lvalues.count != rightType.subtypes.count {
                    compiler.error(position, "expected tuple with \{lvalues.count} " +
                            "elements, but found \{rightType.subtypes.count}")
                    return
                }
                def wrapped := ASTNode.IR_WRAPPER(position.asPosition, right)
                for i in 0 .. lvalues.count {
                    match lvalues[i] {
                        when ASTNode.IDENTIFIER(_, text) {
                            if text = "_" {
                                continue
                            }
                        }
                    }
                    def extract := Binary.compile(compiler, position, wrapped,
                            Binary.Operator.INDEX, ASTNode.INT(position.asPosition, i.asUInt64),
                            Compiler.TypeContext.UNSPECIFIED)
                    if extract !== null {
                        compile(compiler, position, lvalues[i], op,
                                ASTNode.IR_WRAPPER(rawRight.position, extract))
                    }
                }
                return
            }
        }
        if op = Binary.Operator.ASSIGNMENT {
            match rawLeft {
                when ASTNode.BINARY(position, base, op, index) {
                    if op = Binary.Operator.INDEX {
                        def args := Array<ASTNode>()
                        def compiledBase := compiler.compileExpression(base, TypeContext.NON_VOID)
                        if compiledBase == null {
                            return
                        }
                        args.add(index)
                        args.add(rawRight)
                        Call.compile(compiler, MethodPosition(position,
                                compiler.currentMethodIndex), compiledBase, "[]:=", args,
                                TypeContext.UNSPECIFIED)
                        return
                    }
                }
            }
        }
        def left := LValue.compile(compiler, rawLeft)
        if left == null {
            return
        }
        def right:IR.Value?
        if op = Binary.Operator.ASSIGNMENT {
            right := compiler.compileExpression(rawRight, TypeContext.TYPE(left.type(), false))
        }
        else {
            def load := left.compileLoad()
            if load == null {
                return
            }
            right := Binary.compile(compiler, position,
                    ASTNode.IR_WRAPPER(position.asPosition, load), op.removeAssignment(), rawRight,
                    TypeContext.TYPE(left.type(), false))
        }
        if right == null {
            return
        }
        left.compileStore(right, true)
    }
}