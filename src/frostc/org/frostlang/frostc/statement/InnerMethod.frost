package org.frostlang.frostc.statement

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.MethodDecl
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Variable
uses org.frostlang.frostc.expression.Closure

class InnerMethod {
    @class
    method compile(compiler:Compiler, position:MethodPosition, kind:MethodDecl.Kind, name:String,
            rawParameters:FixedArray<ASTNode>, rawReturnType:ASTNode?,
            body:FixedArray<ASTNode>) {
        def methodRef := Closure.compile(compiler, position, kind, name, rawParameters,
                rawReturnType, body, TypeContext.NON_VOID)
        if methodRef == null {
            return
        }
        def basePos := position.asPosition
        def decl := ASTNode.DECLARATION(basePos, ASTNode.IDENTIFIER(basePos, name),
                ASTNode.IR_WRAPPER(basePos, methodRef))
        compiler.compileStatement(ASTNode.VAR(basePos, Variable.Kind.DEF,
                FixedArray<ASTNode>.from([decl])))
    }
}