package org.frostlang.frostc

uses org.frostlang.frostc.Compiler.Expression
uses org.frostlang.frostc.expression.Binary
uses org.frostlang.frostc.parser.Token

@final
class CBackend : Backend {
    constant NO_REFCNT := -999

    class ClassConstant : Immutable {
        def name:String
        def type:String

        init(name:String, type:String) {
            self.name := name
            self.type := type
        }
    }

    constant OBJECT_FIELD_COUNT  := 3
    constant CLASS_POINTER_INDEX := 0
    constant ITABLE_INDEX        := 5
    constant VTABLE_INDEX        := 6

    constant INT_TYPE  := "i64"
    def INT_CLASS := "%frost$core$Int"
    constant SIZE_TYPE := "i64"

    def physicalOut:OutputStream

    def out:OutputStream

    @weak
    def compiler:Compiler?

    def cg:CodeGenerator?

    def types := MemoryOutputStream()

    def globals := MemoryOutputStream()

    def signatures := MemoryOutputStream()

    def methodHeader := MemoryOutputStream()

    def methods := MemoryOutputStream()

    def metadata := MemoryOutputStream()

    def writtenSignatures := HashSet<String>()

    def definedStatements := HashSet<Code.Statement.ID>()

    var varCount := 0

    def structs := HashMap<String, String>()

    def debugTypes := IdentityMap<Type, String>()

    var metadataCount := 0

    var wroteCompileUnit := false

    var fileMetadata := Array<String?>()

    var methodMetadata := Array<String?>()

    var lexicalBlockMetadata := Array<String?>()

    def debugPositions := HashMap<MethodPosition, String>()

    init(out:OutputStream) {
        self.physicalOut := out
        try {
            out.printLine("#include <stdlib.h>")
            out.printLine("#include <inttypes.h>")
            out.printLine("intptr_t frostObjectAlloc(int size, intptr_t cl);")
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    @override
    method setCompiler(compiler:Compiler) {
        self.compiler := compiler
        cg := CodeGenerator(compiler)
    }

    function name(id:Code.Statement.ID):String {
        return "$s\{id.value}"
    }

    method nextVar():String {
        varCount += 1
        return "$tmp\{varCount}"
    }

    method tag(t:Code.PrimitiveType):String {
        match t {
            when Code.PrimitiveType.INT8 {
                 return "1"
            }
            when Code.PrimitiveType.INT16 {
                 return "2"
            }
            when Code.PrimitiveType.INT32 {
                 return "4"
            }
            when Code.PrimitiveType.INT64 {
                 return "8"
            }
            when Code.PrimitiveType.INT {
                 return "i"
            }
            when Code.PrimitiveType.BIT {
                return "b"
            }
            when Code.PrimitiveType.FLOAT32 {
                return "f"
            }
            when Code.PrimitiveType.FLOAT64 {
                return "d"
            }
            when Code.PrimitiveType.ARRAY(count, type) {
                return "A\{count}x\{tag(type)}B"
            }
            when Code.PrimitiveType.STRUCT(types) {
                return "C\{types.map(tag).join("")}D"
            }
            otherwise {
                unreachable, "unsupported type \{t}"
            }
        }    
    }

    method cType(t:Code.PrimitiveType):String {
        match t {
            when Code.PrimitiveType.INT8 {
                 return "int8_t"
            }
            when Code.PrimitiveType.INT16 {
                 return "int16_t"
            }
            when Code.PrimitiveType.INT32 {
                 return "int32_t"
            }
            when Code.PrimitiveType.INT64 {
                 return "int64_t"
            }
            when Code.PrimitiveType.INT {
                 return "intptr_t"
            }
            when Code.PrimitiveType.BIT {
                return "int8_t"
            }
            when Code.PrimitiveType.FLOAT32 {
                return "float"
            }
            when Code.PrimitiveType.FLOAT64 {
                return "double"
            }
            when Code.PrimitiveType.ARRAY(count, type) {
                return "\{cType(type)}[\{count}]"
            }
            when Code.PrimitiveType.STRUCT(fields) {
                def key := t.asString
                var result := structs[key]
                if result == null {
                    try {
                        result := "struct" + tag(t)
                        structs[key] := result
                        def decls := Array<String>()
                        for p in fields.enumeration {
                            match p[1] {
                                when Code.PrimitiveType.ARRAY(count, type) {
                                    decls.add("\{self.cType(type)} f\{p[0]}[\{count}];")
                                }
                                otherwise {
                                    decls.add("\{self.cType(p[1])} f\{p[0]};")
                                }
                            }
                        }
                        types.printLine("typedef struct \{result} {")
                        for d in decls {
                            types.printLine(d)
                        }
                        types.printLine("} \{result};")
                    }
                    fail(error) {
                        unreachable, error.asString
                    }
                }
                return result
            }
            otherwise {
                unreachable, "unsupported type \{t}"
            }
        }
    }

    method cType(s:Code.Signature):String {
        def result := MutableString()
        if s.returnType !== null {
            result.append(cType(s.returnType))
        }
        else {
            result.append("void")
        }
        result.append("(*)(")
        var separator := ""
        for p in s.parameters {
            result.append("\{separator}\{cType(p)}")
            separator := ", "
        }
        result.append(")")
        return result.finish()
    }

    method getReference(v:Code.Value):String {
        match v {
            when Code.Value.BIT(b) {
                return b.choose("1", "0")
            }
            when Code.Value.GLOBAL_POINTER(index) {
                return "(intptr_t) &" + cg.globals[index].name
            }
            when Code.Value.INT(i, t) {
                return "((\{cType(t)}) \{i}u)"
            }
            when Code.Value.REAL(r64, type) {
                match type {
                    when Code.PrimitiveType.FLOAT32 {
                        var s := r64.asString
                        if !s.contains(".") {
                            s += ".0"
                        }
                        return s + "f"
                    }
                }
                return r64.asString

            }
            when Code.Value.METHOD_POINTER(signature) {
                return "(intptr_t) &" + signature.name
            }
            when Code.Value.PARAMETER(idx, _) {
                return "param\{idx}"
            }
            when Code.Value.STATEMENT(id, type) {
                if !definedStatements.contains(id) {
                    def error := methodHeader.printLine("\{cType(type)} \{name(id)};")
                    assert error == null
                    definedStatements.add(id)
                }
                return name(id)
            }
            when Code.Value.ARRAY(_, elements) {
                return "{" + elements.map(getReference).join(", ") + "}"
            }
            when Code.Value.STRUCT(args) {
                def t := Code.PrimitiveType.STRUCT(FixedArray<Code.PrimitiveType>.from(
                        args.map(a:Code.Value => a.type)))
                return "(\{cType(t)}) { " + args.map(getReference).join(", ") + " }"
            }
            when Code.Value.UNDEFINED(t) {
                return "(\{cType(t)}) { }"
            }
            otherwise {
                unreachable, "unsupported value \{v}"
            }
        }
    }

    method getUnsignedReference(v:Code.Value):String {
        def ref := getReference(v)
        match v.type {
            when Code.PrimitiveType.INT8 {
                return "((uint8_t) \{ref})"
            }
            when Code.PrimitiveType.INT16 {
                return "((uint16_t) \{ref})"
            }
            when Code.PrimitiveType.INT32 {
                return "((uint32_t) \{ref})"
            }
            when Code.PrimitiveType.INT64 {
                return "((uint64_t) \{ref})"
            }
            when Code.PrimitiveType.INT {
                return "((unsigned int) \{ref})"
            }
            when Code.PrimitiveType.FLOAT32, Code.PrimitiveType.FLOAT64 {
                return ref
            }
            otherwise {
                unreachable
            }
        }
    }

    method writeSignature(s:Code.Signature) {
        try {
            if writtenSignatures.contains(s.name) {
                return
            }
            writtenSignatures.add(s.name)
            if s.returnType !== null {
                signatures.print(cType(s.returnType))
            }
            else {
                signatures.print("void")
            }
            signatures.print(" \{s.name}(")
            var separator := ""
            for i in 0 .. s.parameters.count {
                signatures.print("\{separator}\{cType(s.parameters[i])} param\{i}")
                separator := ", "
            }
            signatures.printLine(");")
        }
        fail(error) {
            unreachable, error.asString
        }
    }

    method writeCreateStruct(position:MethodPosition, id:Code.Statement.ID, type:Code.PrimitiveType,
            args:FixedArray<Code.Value>) {
        try {
            assert args.count > 0
            out.print("\{name(id)} = (\{cType(type)}) {")
            var separator := ""
            for v in args {
                out.print("\{separator}\{getReference(v)}")
                separator := ", "
            }
            out.printLine("};")

        }
        fail(error) {
            unreachable, error.asString
        }
    }

    @pre((id == null) = (returnType == null))
    method writeDynamicCall(id:Code.Statement.ID?, returnType:Code.PrimitiveType?, m:Code.Value,
            args:ListView<Code.Value>) {
        try {
            if returnType !== null {
                out.print("\{name(id)} = ")
            }
            def ct := cType(Code.Signature(returnType, "<dynamic>",
                    FixedArray<Code.PrimitiveType>.from(args.map(a => a.type)), false))
            out.printLine("((\{ct}) \{getReference(m)})(" +
                    "\{args.map(getReference).join(", ")});")
        }
        fail(error) {
            unreachable
        }
    }

    method define(type:Code.PrimitiveType, id:Code.Statement.ID) {
        if !definedStatements.contains(id) {
            try {
                out.printLine("\{cType(type)} \{name(id)};")
                definedStatements.add(id)
            }
            fail(error) {
                unreachable
            }
        }
    }

    method define(type:Code.PrimitiveType, id:Code.Statement.ID, value:String) {
        try {
            if !definedStatements.contains(id) {
                out.print("\{cType(type)} ")
                definedStatements.add(id)
            }
            out.printLine("\{name(id)} = \{value};")
        }
        fail(error) {
            unreachable
        }
    }

    method writeStatement(s:Code.Statement) {
        try {
            match s {
                when Code.Statement.ADDI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} + \{getReference(right)}")
                }
                when Code.Statement.ADDF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} + \{getReference(right)}")
                }
                when Code.Statement.SUBI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} - \{getReference(right)}")
                }
                when Code.Statement.SUBF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} - \{getReference(right)}")
                }
                when Code.Statement.MULI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} * \{getReference(right)}")
                }
                when Code.Statement.MULF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} * \{getReference(right)}")
                }
                when Code.Statement.DIVS(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} / \{getReference(right)}")
                }
                when Code.Statement.DIVU(position, result, left, right) {
                    define(left.type, result, getUnsignedReference(left) + " / " +
                            getUnsignedReference(right))
                }
                when Code.Statement.DIVF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} / \{getReference(right)}")
                }
                when Code.Statement.REMS(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} % \{getReference(right)}")
                }
                when Code.Statement.REMU(position, result, left, right) {
                    define(left.type, result, getUnsignedReference(left) + " % " +
                            getUnsignedReference(right))
                }
                when Code.Statement.ANDI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} & \{getReference(right)}")
                }
                when Code.Statement.ANDB(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} & \{getReference(right)}")
                }
                when Code.Statement.ORI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} | \{getReference(right)}")
                }
                when Code.Statement.ORB(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} | \{getReference(right)}")
                }
                when Code.Statement.XORI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} ^ \{getReference(right)}")
                }
                when Code.Statement.XORB(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} ^ \{getReference(right)}")
                }
                when Code.Statement.SHRS(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} >> \{getReference(right)}")
                }
                when Code.Statement.SHRU(position, result, left, right) {
                    define(left.type, result, getUnsignedReference(left) + " >> " +
                            getUnsignedReference(right))
                }
                when Code.Statement.SHL(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} << \{getReference(right)}")
                }
                when Code.Statement.EQI(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " == " +
                            getReference(right))
                }
                when Code.Statement.EQF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " == " +
                            getReference(right))
                }
                when Code.Statement.NEQI(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " != " +
                            getReference(right))
                }
                when Code.Statement.NEQF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " != " +
                            getReference(right))
                }
                when Code.Statement.GTS(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " > " +
                            getReference(right))
                }
                when Code.Statement.GTU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " > " +
                            getUnsignedReference(right))
                }
                when Code.Statement.GTF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " > " +
                            getReference(right))
                }
                when Code.Statement.GES(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " >= " +
                            getReference(right))
                }
                when Code.Statement.GEU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " >= " +
                            getUnsignedReference(right))
                }
                when Code.Statement.GEF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " >= " +
                            getReference(right))
                }
                when Code.Statement.LTS(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " < " +
                            getReference(right))
                }
                when Code.Statement.LTU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " < " +
                            getUnsignedReference(right))
                }
                when Code.Statement.LTF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " < " +
                            getReference(right))
                }
                when Code.Statement.LES(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " <= " +
                            getReference(right))
                }
                when Code.Statement.LEU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " <= " +
                            getUnsignedReference(right))
                }
                when Code.Statement.LEF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " <= " +
                            getReference(right))
                }
                when Code.Statement.BRANCH(position, target) {
                    out.printLine("goto \{target};")
                }
                when Code.Statement.COMMENT(_, text) {
                    out.printLine("// \{text}")
                }
                when Code.Statement.CONVERTS(position, result, value, target) {
                    define(target, result, "(\{cType(target)}) \{getReference(value)}")
                }
                when Code.Statement.CONVERTU(position, result, value, target) {
                    define(target, result, "(\{cType(target)}) \{getUnsignedReference(value)}")
                }
                when Code.Statement.CREATE_STRUCT(position, result, type, args) {
                    define(type, result)
                    writeCreateStruct(position, result, type, args)
                }
                when Code.Statement.CONDITIONAL_BRANCH(position, test, ifTrue, ifFalse) {
                    out.printLine("if (\{getReference(test)}) goto \{ifTrue}; else goto " +
                            "\{ifFalse};")
                }
                when Code.Statement.DYNAMIC_CALL(position, result, returnType, m, args) {
                    define(returnType, result)
                    writeDynamicCall(result, returnType, m, args)
                }
                when Code.Statement.DYNAMIC_CALL_VOID(position, m, args) {
                    writeDynamicCall(null, null, m, args)
                }
                when Code.Statement.EXTRACT_FIELD(position, result, target, index) {
                    match target.type {
                        when Code.PrimitiveType.STRUCT(types) {
                            define(types[index], result, "\{getReference(target)}.f\{index}")
                        }
                        otherwise {
                            unreachable
                        }
                    }
                }
                when Code.Statement.HEAP_ALLOC(_, result, type, classConstant) {
                    define(Code.PrimitiveType.INT, result, "frostObjectAlloc(\{type.size}, " +
                            "\{getReference(classConstant)})")
                }
                when Code.Statement.LOAD(position, result, value, type) {
                    define(type, result, "*(\{cType(type)}*) \{getReference(value)}")
                }
                when Code.Statement.NEGS(position, result, value) {
                    define(value.type, result, "-" + getReference(value))
                }
                when Code.Statement.NEGF(position, result, value) {
                    define(value.type, result, "-" + getReference(value))
                }
                when Code.Statement.NOTB(position, result, value) {
                    define(value.type, result, "!" + getReference(value))
                }
                when Code.Statement.NOTI(position, result, value) {
                    define(value.type, result, "~" + getReference(value))
                }
                when Code.Statement.RETURN(position, value) {
                    if value !== null {
                        out.printLine("return \{getReference(value)};")
                    }
                    else {
                        out.printLine("return;")
                    }
                }
                when Code.Statement.STACK_ALLOC(_, result, type) {
                    define(Code.PrimitiveType.INT, result, "(intptr_t) alloca(\{type.size})")
                }
                when Code.Statement.STATIC_CALL(position, result, m, args) {
                    assert m.returnType !== null, "STATIC_CALL to void method \{m} at \{position}"
                    if m.isExternal {
                        writeSignature(m)
                    }
                    define(m.returnType, result, "\{m.name}(\{args.map(getReference).join(", ")});")
                }
                when Code.Statement.STATIC_CALL_VOID(position, m, args) {
                    if m.isExternal {
                        writeSignature(m)
                    }
                    assert m.returnType == null,
                            "STATIC_CALL_VOID to non-void method \{m} at \{position}"
                    out.printLine("\{m.name}(\{args.map(getReference).join(", ")});")
                }
                when Code.Statement.STORE(position, value, dest) {
                    out.printLine("*(\{cType(value.type)}*) \{getReference(dest)} = " +
                                "\{getReference(value)};")
                }
                when Code.Statement.UNREACHABLE(position) {
                    out.printLine("abort(); // unreachable")
                }
                otherwise {
                    unreachable, "unsupported statement \{s}"
                }
            }
        }
        fail(error) {
            unreachable, error.asString
        }
    }

    @pre(methodHeader.asString = "")
    method writeCode(code:Code) {
        try {
            def oldOut := out
            out := MemoryOutputStream()
            for i in 0 .. code.blocks.count {
                def block := code.blocks[i]
                if i != 0 {
                    out.printLine("\{block.id}:;")
                }
                for s in block.statements {
                    writeStatement(s)
                }
            }
            oldOut.print(methodHeader)
            oldOut.print(out)
            out := oldOut
            methodHeader.clear()
        }
        fail(error) {
            unreachable, error.asString
        }
    }

    @override
    method write(m:MethodDecl, ir:IR) {
        write(cg.getSignature(m), cg.convert(m, ir), m.owner.isSpecialization())
    }

    method write(s:Code.Signature, code:Code, linkOnce:Bit) {
        writeSignature(s)
        out := methods
        try {
            if s.returnType !== null {
                out.print(cType(s.returnType))
            }
            else {
                out.print("void")
            }
            if linkOnce {
                out.print(" __attribute__((weak))")
            }
            out.print(" \{s.name}(")
            var separator := ""
            for i in 0 .. s.parameters.count {
                out.print("\{separator}\{cType(s.parameters[i])} param\{i}")
                separator := ", "
            }
            out.print(")")
            out.printLine(" {")
            writeCode(code)
            out.printLine("}")
            definedStatements.clear()
        }
        fail(error) {
            unreachable, error.asString
        }
    }

    @override
    method writeDeclaration(m:MethodDecl) {
    }

    @override
    method start(cl:ClassDecl) {
        try {
            if cl.annotations.isSpecialize {
                return
            }
            cg.getClassConstant(cl)
        }
        fail(error) {
            unreachable, error.asString
        }
    }

    @override
    method end(cl:ClassDecl) {
    }

    method writeGlobalDeclaration(g:Code.Global) {
        try {
            if g.comment !== null {
                globals.printLine("// \{g.comment}")
            }
            if g.isExternal {
                globals.print("extern ")
            }
            if g.isPrivate {
                globals.print("static ")
            }
            def baseType:Code.PrimitiveType
            def count:Int?
            match g.type {
                when Code.PrimitiveType.ARRAY(arrayCount, type) {
                    baseType := type
                    count := arrayCount
                }
                otherwise {
                    baseType := g.type
                    count := null
                }
            }
            globals.print(cType(baseType) + " ")
            if g.isLinkOnce {
                globals.print("__attribute__((weak)) ")
            }
            globals.print(g.name)
            if count !== null {
                globals.print("[\{count}]")
            }
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    method writeGlobalDefinition(g:Code.Global, value:Code.Value) {
        try {
            writeGlobalDeclaration(g)
            globals.printLine(" = \{getReference(value)};")

        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    @override
    method finish() {
        try {
            assert cg.globals.count = cg.globalValues.count
            for g in cg.globals  {
                writeGlobalDeclaration(g)
                globals.printLine(";")
            }
            for g in cg.globals.combine(cg.globalValues).filter(g => g[1] !== null)  {
                writeGlobalDefinition(g[0], g[1])
            }
            for decl in cg.declarations.values.filter(decl => decl.isExternal) {
                writeSignature(decl)
            }
            for (signature, code) in cg.methodShims.values {
                write(signature, code, true)
            }
            physicalOut.print(types)
            physicalOut.print(signatures)
            physicalOut.print(globals)
            physicalOut.print(methods)
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    @override
    method cleanup() {
    }
}