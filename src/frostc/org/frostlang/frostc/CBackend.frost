package org.frostlang.frostc

uses org.frostlang.frostc.Compiler.Expression
uses org.frostlang.frostc.expression.Binary
uses org.frostlang.frostc.parser.Token

class CBackend : Backend {
    constant NO_REFCNT := -999

    constant INT_TYPE  := "i64"

    def physicalOut:OutputStream

    var out:OutputStream?

    @weak
    var compiler:Compiler?

    var cg:CodeGenerator?

    var settings:Compiler.Settings?

    def types := MemoryOutputStream()

    def globalDeclarations := MemoryOutputStream()

    def globalDefinitions := MemoryOutputStream()

    def signatures := MemoryOutputStream()

    def methodHeader := MemoryOutputStream()

    def methods := MemoryOutputStream()

    def metadata := MemoryOutputStream()

    def writtenSignatures := HashSet<String>()

    def definedStatements := HashSet<Code.Statement.ID>()

    var varCount := 0

    def structs := HashMap<String, (String, String)>()

    def externalGlobals := IdentitySet<Code.Global>()

    def debugTypes := IdentityMap<Type, String>()

    var metadataCount := 0

    var wroteCompileUnit := false

    var fileMetadata := Array<String?>()

    var methodMetadata := Array<String?>()

    var lexicalBlockMetadata := Array<String?>()

    def debugPositions := HashMap<MethodPosition, String>()

    init(out:OutputStream) {
        self.physicalOut := out
        try {
            out.printLine("#include <stddef.h>")
            out.printLine("#include <stdlib.h>")
            out.printLine("#include <inttypes.h>")
            out.printLine("intptr_t frostObjectAlloc(int size, intptr_t cl);")
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    @override
    method setCompiler(compiler:Compiler) {
        self.compiler := compiler
        self.cg := compiler.cg
        self.settings := compiler.settings
    }

    function name(id:Code.Statement.ID):String {
        return "$s\{id.value}"
    }

    method nextVar():String {
        varCount += 1
        return "$tmp\{varCount}"
    }

    method tag(t:Code.PrimitiveType):String {
        match t {
            when Code.PrimitiveType.INT8 {
                 return "1"
            }
            when Code.PrimitiveType.INT16 {
                 return "2"
            }
            when Code.PrimitiveType.INT32 {
                 return "4"
            }
            when Code.PrimitiveType.INT64 {
                 return "8"
            }
            when Code.PrimitiveType.INT {
                 return "i"
            }
            when Code.PrimitiveType.BIT {
                return "b"
            }
            when Code.PrimitiveType.FLOAT32 {
                return "f"
            }
            when Code.PrimitiveType.FLOAT64 {
                return "d"
            }
            when Code.PrimitiveType.ARRAY(count, type) {
                return "A\{count}x\{tag(type)}B"
            }
            when Code.PrimitiveType.STRUCT(_, fields) {
                return "C\{fields.map(f => self.tag(f.type)).join("")}D"
            }
            otherwise {
                unreachable, "unsupported type \{t}"
            }
        }    
    }

    function name(field:Code.PrimitiveType.Field):String {
        return "f_" + CodeGenerator.escapeName(field.name)
    }

    method cType(t:Code.PrimitiveType):String {
        match t {
            when Code.PrimitiveType.INT8 {
                 return "int8_t"
            }
            when Code.PrimitiveType.INT16 {
                 return "int16_t"
            }
            when Code.PrimitiveType.INT32 {
                 return "int32_t"
            }
            when Code.PrimitiveType.INT64 {
                 return "int64_t"
            }
            when Code.PrimitiveType.INT {
                 return "intptr_t"
            }
            when Code.PrimitiveType.BIT {
                return "int8_t"
            }
            when Code.PrimitiveType.FLOAT32 {
                return "float"
            }
            when Code.PrimitiveType.FLOAT64 {
                return "double"
            }
            when Code.PrimitiveType.ARRAY(count, type) {
                return "\{cType(type)}[\{count.max(1)}]"
            }
            when Code.PrimitiveType.STRUCT(structName, fields) {
                var result := structs[structName]
                if result == null {
                    try {
                        result := (CodeGenerator.escapeName(structName), fields.toString)
                        structs[structName] := result
                        def decls := Array<String>()
                        for field in fields {
                            match field.type {
                                when Code.PrimitiveType.ARRAY(count, type) {
                                    decls.add(
                                            "\{self.cType(type)} \{name(field)}[\{count.max(1)}];")
                                }
                                otherwise {
                                    decls.add("\{self.cType(field.type)} \{name(field)};")
                                }
                            }
                        }
                        types.printLine("typedef struct \{result[0]} {")
                        for d in decls {
                            types.printLine(d)
                        }
                        types.printLine("} \{result[0]};")
                    }
                    fail(error) {
                        unreachable, error.toString
                    }
                }
                else {
                    assert result[1] = fields.toString, "expected \{result[0]} to be in map " +
                            "with:\n'\{fields}'\n, but was in map with:\n'\{result[1]}'"
                }
                return result[0]
            }
            otherwise {
                unreachable, "unsupported type \{t}"
            }
        }
    }

    method cType(s:Code.Signature):String {
        def result := MutableString()
        if s.returnType !== null {
            result.append(cType(s.returnType))
        }
        else {
            result.append("void")
        }
        result.append("(*)(")
        var separator := ""
        for p in s.parameters {
            result.append("\{separator}\{cType(p)}")
            separator := ", "
        }
        result.append(")")
        return result.finish()
    }

    method getReference(v:Code.Value):String {
        match v {
            when Code.Value.ARRAY(_, elements) {
                return "{" + elements.map(getReference).join(", ") + "}"
            }
            when Code.Value.BIT(b) {
                return b.choose("1", "0")
            }
            when Code.Value.CHARS(s) {
                def result := MutableString('"')
                for c in s.utf8 {
                    if c.asUInt8 >= 32 & c.asUInt8 <= 127 & c != '"' & c != '\\' {
                        result.append(c)
                    }
                    else {
                        result.append("\" \"\\x\{c.asUInt8,0>2:x}\" \"")
                    }
                }
                result.append('"')
                return result.finish()
            }
            when Code.Value.CHOICE_FIELD_OFFSET(cc, index) {
                def struct := Code.PrimitiveType.STRUCT(cc.toString,
                        FixedArray<Code.PrimitiveType.Field>(cc.fields.enumeration.map(
                            f => Code.PrimitiveType.Field("f\{f[0]}",
                                self.cg.primitiveType(f[1]))).all()))
                return "(offsetof(\{cType(cg.struct(cc.owner))}, f_$choiceData) + " +
                        "offsetof(\{cType(struct)}, f_f\{index}))"
            }
            when Code.Value.FIELD_OFFSET(type, index) {
                match type {
                    when Code.PrimitiveType.STRUCT(_, fields) {
                        return "offsetof(\{cType(type)}, " +
                                "f_\{CodeGenerator.escapeName(fields[index].name)})"
                    }
                    otherwise {
                        unreachable
                    }
                }
            }
            when Code.Value.GLOBAL_POINTER(index) {
                return "(intptr_t) &" + cg.globals[index].name
            }
            when Code.Value.INT(i, t) {
                return "((\{cType(t)}) \{i}u)"
            }
            when Code.Value.ITABLE_OFFSET(index) {
                return "(sizeof(void*) * (\{index} + 2))"
            }
            when Code.Value.REAL(r64, type) {
                match type {
                    when Code.PrimitiveType.FLOAT32 {
                        var s := r64.toString
                        if !s.contains(".") {
                            s += ".0"
                        }
                        return s + "f"
                    }
                }
                return r64.toString
            }
            when Code.Value.METHOD_POINTER(signature) {
                return "(intptr_t) &" + signature.name
            }
            when Code.Value.PARAMETER(idx, _) {
                return "param\{idx}"
            }
            when Code.Value.REF(r) {
                return getReference(r.value)
            }
            when Code.Value.SIZE_OF(t) {
                return "sizeof(\{cType(t)})"
            }
            when Code.Value.STATEMENT(id, type) {
                if !definedStatements.contains(id) {
                    def error := methodHeader.printLine("\{cType(type)} \{name(id)};")
                    assert error == null
                    definedStatements.add(id)
                }
                return name(id)
            }
            when Code.Value.STRUCT(type, args) {
                return "(\{cType(type)}) { " + args.map(getReference).join(", ") + " }"
            }
            when Code.Value.UNDEFINED(t) {
                match t {
                    when Code.PrimitiveType.STRUCT {
                        return "(\{cType(t)}) { }"
                    }
                    otherwise {
                        return "0"
                    }
                }
            }
            when Code.Value.VTABLE_OFFSET(cc, index) {
                def ccType:Code.PrimitiveType
                match cc {
                    when Code.Value.GLOBAL_POINTER(idx) {
                        ccType := cg.globals[idx].type
                    }
                    otherwise {
                        unreachable
                    }
                }
                return "(offsetof(\{cType(ccType)}, f_vtable) + sizeof(void*) * \{index})"
            }
            otherwise {
                unreachable, "unsupported value \{v}"
            }
        }
    }

    method getUnsignedReference(v:Code.Value):String {
        def ref := getReference(v)
        match v.type {
            when Code.PrimitiveType.INT8 {
                return "((uint8_t) \{ref})"
            }
            when Code.PrimitiveType.INT16 {
                return "((uint16_t) \{ref})"
            }
            when Code.PrimitiveType.INT32 {
                return "((uint32_t) \{ref})"
            }
            when Code.PrimitiveType.INT64 {
                return "((uint64_t) \{ref})"
            }
            when Code.PrimitiveType.INT {
                return "((uintptr_t) \{ref})"
            }
            when Code.PrimitiveType.FLOAT32, Code.PrimitiveType.FLOAT64 {
                return ref
            }
            otherwise {
                unreachable
            }
        }
    }

    @override
    method writeSignature(s:Code.Signature) {
        try {
            if writtenSignatures.contains(s.name) {
                return
            }
            writtenSignatures.add(s.name)
            if s.returnType !== null {
                signatures.print(cType(s.returnType))
            }
            else {
                signatures.print("void")
            }
            signatures.print(" \{s.name}(")
            var separator := ""
            for i in 0 .. s.parameters.count {
                signatures.print("\{separator}\{cType(s.parameters[i])} param\{i}")
                separator := ", "
            }
            signatures.printLine(");")
        }
        fail(error) {
            unreachable, error.toString
        }
    }

    method writeCreateStruct(position:MethodPosition, id:Code.Statement.ID, type:Code.PrimitiveType,
            args:FixedArray<Code.Value>) {
        try {
            assert args.count > 0
            out.print("\{name(id)} = (\{cType(type)}) {")
            var separator := ""
            for v in args {
                out.print("\{separator}\{getReference(v)}")
                separator := ", "
            }
            out.printLine("};")

        }
        fail(error) {
            unreachable, error.toString
        }
    }

    @pre((id == null) = (returnType == null))
    method writeDynamicCall(id:Code.Statement.ID?, returnType:Code.PrimitiveType?, m:Code.Value,
            args:ListView<Code.Value>) {
        try {
            if returnType !== null {
                out.print("\{name(id)} = ")
            }
            def ct := cType(Code.Signature(null, returnType, "<dynamic>",
                    FixedArray<Code.PrimitiveType>.from(args.map(a => a.type)), false))
            out.printLine("((\{ct}) \{getReference(m)})(" +
                    "\{args.map(getReference).join(", ")});")
        }
        fail(error) {
            unreachable
        }
    }

    method define(type:Code.PrimitiveType, id:Code.Statement.ID) {
        if !definedStatements.contains(id) {
            try {
                out.printLine("\{cType(type)} \{name(id)};")
                definedStatements.add(id)
            }
            fail(error) {
                unreachable
            }
        }
    }

    method define(type:Code.PrimitiveType, id:Code.Statement.ID, value:String) {
        try {
            if !definedStatements.contains(id) {
                out.print("\{cType(type)} ")
                definedStatements.add(id)
            }
            out.printLine("\{name(id)} = \{value};")
        }
        fail(error) {
            unreachable
        }
    }

    method writeStatement(s:Code.Statement) {
        try {
            match s {
                when Code.Statement.ADDI(position, result, left, right, wrap) {
                    define(left.type, result, "\{getReference(left)} + \{getReference(right)}")
                }
                when Code.Statement.ADDF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} + \{getReference(right)}")
                }
                when Code.Statement.SUBI(position, result, left, right, wrap) {
                    define(left.type, result, "\{getReference(left)} - \{getReference(right)}")
                }
                when Code.Statement.SUBF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} - \{getReference(right)}")
                }
                when Code.Statement.MULI(position, result, left, right, wrap) {
                    define(left.type, result, "\{getReference(left)} * \{getReference(right)}")
                }
                when Code.Statement.MULF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} * \{getReference(right)}")
                }
                when Code.Statement.DIVS(position, result, left, right, wrap) {
                    define(left.type, result, "\{getReference(left)} / \{getReference(right)}")
                }
                when Code.Statement.DIVU(position, result, left, right) {
                    define(left.type, result, getUnsignedReference(left) + " / " +
                            getUnsignedReference(right))
                }
                when Code.Statement.DIVF(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} / \{getReference(right)}")
                }
                when Code.Statement.REMS(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} % \{getReference(right)}")
                }
                when Code.Statement.REMU(position, result, left, right) {
                    define(left.type, result, getUnsignedReference(left) + " % " +
                            getUnsignedReference(right))
                }
                when Code.Statement.ANDI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} & \{getReference(right)}")
                }
                when Code.Statement.ANDB(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} & \{getReference(right)}")
                }
                when Code.Statement.ORI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} | \{getReference(right)}")
                }
                when Code.Statement.ORB(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} | \{getReference(right)}")
                }
                when Code.Statement.XORI(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} ^ \{getReference(right)}")
                }
                when Code.Statement.XORB(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} ^ \{getReference(right)}")
                }
                when Code.Statement.SHRS(position, result, left, right) {
                    define(left.type, result, "\{getReference(left)} >> \{getReference(right)}")
                }
                when Code.Statement.SHRU(position, result, left, right) {
                    define(left.type, result, getUnsignedReference(left) + " >> " +
                            getUnsignedReference(right))
                }
                when Code.Statement.SHL(position, result, left, right, wrap) {
                    define(left.type, result, "\{getReference(left)} << \{getReference(right)}")
                }
                when Code.Statement.EQI(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " == " +
                            getReference(right))
                }
                when Code.Statement.EQF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " == " +
                            getReference(right))
                }
                when Code.Statement.NEQI(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " != " +
                            getReference(right))
                }
                when Code.Statement.NEQF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " != " +
                            getReference(right))
                }
                when Code.Statement.GTS(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " > " +
                            getReference(right))
                }
                when Code.Statement.GTU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " > " +
                            getUnsignedReference(right))
                }
                when Code.Statement.GTF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " > " +
                            getReference(right))
                }
                when Code.Statement.GES(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " >= " +
                            getReference(right))
                }
                when Code.Statement.GEU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " >= " +
                            getUnsignedReference(right))
                }
                when Code.Statement.GEF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " >= " +
                            getReference(right))
                }
                when Code.Statement.LTS(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " < " +
                            getReference(right))
                }
                when Code.Statement.LTU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " < " +
                            getUnsignedReference(right))
                }
                when Code.Statement.LTF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " < " +
                            getReference(right))
                }
                when Code.Statement.LES(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " <= " +
                            getReference(right))
                }
                when Code.Statement.LEU(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getUnsignedReference(left) + " <= " +
                            getUnsignedReference(right))
                }
                when Code.Statement.LEF(position, result, left, right) {
                    define(Code.PrimitiveType.INT8, result, getReference(left) + " <= " +
                            getReference(right))
                }
                when Code.Statement.BRANCH(position, target) {
                    out.printLine("goto \{target};")
                }
                when Code.Statement.COMMENT(_, text) {
                    out.printLine("// \{text.replace('\n', '\n//')}")
                }
                when Code.Statement.CONVERTS(position, result, value, target) {
                    define(target, result, "(\{cType(target)}) \{getReference(value)}")
                }
                when Code.Statement.CONVERTU(position, result, value, target) {
                    define(target, result, "(\{cType(target)}) \{getUnsignedReference(value)}")
                }
                when Code.Statement.CREATE_STRUCT(position, result, type, args) {
                    define(type, result)
                    writeCreateStruct(position, result, type, args)
                }
                when Code.Statement.CONDITIONAL_BRANCH(position, test, ifTrue, ifFalse) {
                    out.printLine("if (\{getReference(test)}) goto \{ifTrue}; else goto " +
                            "\{ifFalse};")
                }
                when Code.Statement.DYNAMIC_CALL(position, result, returnType, m, args) {
                    define(returnType, result)
                    writeDynamicCall(result, returnType, m, args)
                }
                when Code.Statement.DYNAMIC_CALL_VOID(position, m, args) {
                    writeDynamicCall(null, null, m, args)
                }
                when Code.Statement.EXTRACT_FIELD(position, result, target, index) {
                    match target.type {
                        when Code.PrimitiveType.STRUCT(_, fields) {
                            define(fields[index].type, result,
                                    "\{getReference(target)}.\{name(fields[index])}")
                        }
                        otherwise {
                            unreachable, "extracting a field from \{target}"
                        }
                    }
                }
                when Code.Statement.HEAP_ALLOC(_, result, type, classConstant) {
                    define(Code.PrimitiveType.INT, result,
                            "frostObjectAlloc(sizeof(\{cType(type)}), " +
                                "\{getReference(classConstant)})")
                }
                when Code.Statement.LOAD(position, result, value, type) {
                    define(type, result, "*(\{cType(type)}*) \{getReference(value)}")
                }
                when Code.Statement.NEGS(position, result, value) {
                    define(value.type, result, "-" + getReference(value))
                }
                when Code.Statement.NEGF(position, result, value) {
                    define(value.type, result, "-" + getReference(value))
                }
                when Code.Statement.NOTB(position, result, value) {
                    define(value.type, result, "!" + getReference(value))
                }
                when Code.Statement.NOTI(position, result, value) {
                    define(value.type, result, "~" + getReference(value))
                }
                when Code.Statement.RETURN(position, value) {
                    if value !== null {
                        out.printLine("return \{getReference(value)};")
                    }
                    else {
                        out.printLine("return;")
                    }
                }
                when Code.Statement.STACK_ALLOC(_, result, type) {
                    define(Code.PrimitiveType.INT, result,
                            "(intptr_t) alloca(sizeof(\{cType(type)}))")
                }
                when Code.Statement.STATIC_CALL(position, result, m, args) {
                    assert m.returnType !== null, "STATIC_CALL to void method \{m} at \{position}"
                    if m.isExternal {
                        writeSignature(m)
                    }
                    define(m.returnType, result, "\{m.name}(\{args.map(getReference).join(", ")})")
                }
                when Code.Statement.STATIC_CALL_VOID(position, m, args) {
                    if m.isExternal {
                        writeSignature(m)
                    }
                    assert m.returnType == null,
                            "STATIC_CALL_VOID to non-void method \{m} at \{position}"
                    out.printLine("\{m.name}(\{args.map(getReference).join(", ")});")
                }
                when Code.Statement.STORE(position, value, dest) {
                    out.printLine("*(\{cType(value.type)}*) \{getReference(dest)} = " +
                                "\{getReference(value)};")
                }
                when Code.Statement.SWITCH(position, value, cases, other) {
                    out.printLine("switch (\{getReference(value)}) {")
                    for c in cases {
                        out.printLine("case \{c[0]}: goto \{c[1]};")
                    }
                    out.printLine("default: goto \{other};")
                    out.printLine("}")
                }
                when Code.Statement.UNREACHABLE(position) {
                    out.printLine("abort(); // unreachable")
                }
                otherwise {
                    unreachable, "unsupported statement \{s}"
                }
            }
        }
        fail(error) {
            unreachable, error.toString
        }
    }

    @pre(methodHeader.toString = "")
    method writeCode(code:Code) {
        try {
            def oldOut := out
            out := MemoryOutputStream()
            for i in 0 .. code.blocks.count {
                def block := code.blocks[i]
                if i != 0 {
                    out.printLine("\{block.id}:;")
                }
                for s in block.statements {
                    writeStatement(s)
                }
            }
            oldOut.print(methodHeader)
            oldOut.print(out)
            out := oldOut
            methodHeader.clear()
        }
        fail(error) {
            unreachable, error.toString
        }
    }

    @override
    method writeMethod(m:MethodDecl?, s:Code.Signature, code:Code, linkOnce:Bit) {
        writeSignature(s)
        out := methods
        try {
            if s.returnType !== null {
                out.print(cType(s.returnType))
            }
            else {
                out.print("void")
            }
            out.print(" \{s.name}(")
            var separator := ""
            for i in 0 .. s.parameters.count {
                out.print("\{separator}\{cType(s.parameters[i])} param\{i}")
                separator := ", "
            }
            out.print(")")
            out.printLine(" {")
            writeCode(code)
            out.printLine("}")
            definedStatements.clear()
        }
        fail(error) {
            unreachable, error.toString
        }
    }

    @override
    method start(cl:ClassDecl) {
        try {
            if cl.annotations.isSpecialize {
                return
            }
            cg.getClassConstant(cl)
        }
        fail(error) {
            unreachable, error.toString
        }
    }

    @override
    method end(cl:ClassDecl) {
    }

    method writeGlobalDeclaration(g:Code.Global, out:OutputStream) {
        try {
            if g.comment !== null {
                out.printLine("// \{g.comment}")
            }
            if g.isExternal {
                out.print("extern ")
            }
            if g.isPrivate {
                out.print("static ")
            }
            def baseType:Code.PrimitiveType
            def count:Int?
            match g.type {
                when Code.PrimitiveType.ARRAY(arrayCount, type) {
                    baseType := type
                    count := arrayCount
                }
                otherwise {
                    baseType := g.type
                    count := null
                }
            }
            out.print(cType(baseType) + " ")
            out.print(g.name)
            if count !== null {
                out.print("[\{count.max(1)}]")
            }
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    method writeGlobalDefinition(g:Code.Global, value:Code.Value, out:OutputStream) {
        try {
            writeGlobalDeclaration(g, out)
            out.printLine(" = \{getReference(value)};")

        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    @override
    method writeGlobal(g:Code.Global) {
        externalGlobals.add(g)
    }

    @override
    method writeGlobalValue(g:Code.Global, value:Code.Value) {
        externalGlobals.remove(g)
        writeGlobalDeclaration(g, globalDeclarations)
        def error := globalDeclarations.printLine(";")
        assert error == null
        if value !== null {
            writeGlobalDefinition(g, value, globalDefinitions)
        }
    }

    @override
    method finish() {
        try {
            for g in externalGlobals {
                cType(g.type)
            }
            physicalOut.print(types.finish())
            physicalOut.print(signatures.finish())
            physicalOut.print(globalDeclarations.finish())
            for g in externalGlobals {
                writeGlobalDeclaration(g, physicalOut)
                physicalOut.printLine(";")
            }
            physicalOut.print(globalDefinitions.finish())
            physicalOut.print(methods.finish())
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }
}