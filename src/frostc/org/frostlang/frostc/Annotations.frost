package org.frostlang.frostc

class Annotations {
    class Flag {
        constant PRIVATE          := 1 << 1
        constant PROTECTED        := 1 << 2
        constant PACKAGE          := 1 << 3
        constant CLASS            := 1 << 4
        constant OVERRIDE         := 1 << 5
        constant EXTERNAL         := 1 << 6
        constant IMPLICIT         := 1 << 7
        constant EXTENDABLE       := 1 << 8
        constant ABSTRACT         := 1 << 9
        constant INLINE           := 1 << 10
        constant SPECIALIZE       := 1 << 11
        constant WEAK             := 1 << 12
        constant SYNTHETIC        := 1 << 13
        constant UNSAFE_IMMUTABLE := 1 << 14
        constant DEFAULT          := 1 << 15
        -- tags a field in a closure class which is used to represent a captured value
        constant CAPTURE          := 1 << 16
        constant STUB             := 1 << 17
        constant NO_RETURN        := 1 << 18
        constant POINTER_SIZE     := 1 << 19
    }

    choice Expression {
        PRE(String, ASTNode)
        PRE_OR(String, ASTNode)
        POST(String, ASTNode)
        POST_AND(String, ASTNode)
        PRIORITY(String, ASTNode)

        @override
        function get_toString():String {
            match self {
                when PRE(_, expr)      { return "@pre(\{expr})" }
                when PRE_OR(_, expr)   { return "@preOr(\{expr})" }
                when POST(_, expr)     { return "@post(\{expr})" }
                when POST_AND(_, expr) { return "@postAnd(\{expr})" }
                when PRIORITY(_, expr) { return "@priority(\{expr})" }
            }
            unreachable
        }
    }

    def flags:Int

    def expressions:Array<Expression>?

    property isPrivate:Bit

    property isProtected:Bit

    property isPackage:Bit

    property isClass:Bit

    property isOverride:Bit

    property isExternal:Bit

    property isImplicit:Bit

    property isExtendable:Bit

    property isAbstract:Bit

    property isInline:Bit

    property isSpecialize:Bit

    property isWeak:Bit

    property isSynthetic:Bit

    property isUnsafeImmutable:Bit

    property isDefault:Bit

    property isCapture:Bit

    property isStub:Bit

    property isNoReturn:Bit

    property isPointerSize:Bit

    init() {
        init(0)
    }

    init(flags:Int) {
        init(flags, null)
    }

    init(flags:Int, expressions:ListView<Expression>?) {
        self.flags := flags
        if expressions !== null {
            self.expressions := Array<Expression>(expressions!)
        }
        else {
            self.expressions := null
        }
    }

    function +(flags:Int):Annotations {
        return Annotations(self.flags + flags, expressions)
    }

    function get_isPrivate():Bit {
        return flags && Flag.PRIVATE != 0
    }

    function get_isProtected():Bit {
        return flags && Flag.PROTECTED != 0
    }

    function get_isPackage():Bit {
        return flags && Flag.PACKAGE != 0
    }

    function get_isClass():Bit {
        return flags && Flag.CLASS != 0
    }

    function get_isOverride():Bit {
        return flags && Flag.OVERRIDE != 0
    }

    function get_isExternal():Bit {
        return flags && Flag.EXTERNAL != 0
    }

    function get_isImplicit():Bit {
        return flags && Flag.IMPLICIT != 0
    }

    function get_isExtendable():Bit {
        return flags && Flag.EXTENDABLE != 0
    }

    function get_isAbstract():Bit {
        return flags && Flag.ABSTRACT != 0
    }

    function get_isInline():Bit {
        return flags && Flag.INLINE != 0
    }

    function get_isSpecialize():Bit {
        return flags && Flag.SPECIALIZE != 0
    }

    function get_isWeak():Bit {
        return flags && Flag.WEAK != 0
    }

    function get_isSynthetic():Bit {
        return flags && Flag.SYNTHETIC != 0
    }

    function get_isUnsafeImmutable():Bit {
        return flags && Flag.UNSAFE_IMMUTABLE != 0
    }

    function get_isDefault():Bit {
        return flags && Flag.DEFAULT != 0
    }

    function get_isCapture():Bit {
        return flags && Flag.CAPTURE != 0
    }

    function get_isStub():Bit {
        return flags && Flag.STUB != 0
    }

    function get_isNoReturn():Bit {
        return flags && Flag.NO_RETURN != 0
    }

    function get_isPointerSize():Bit {
        return flags && Flag.POINTER_SIZE != 0
    }

    @override
    function get_toString():String {
        def result := MutableString()
        if isPrivate {
            result.append("@private\n")
        }
        if isProtected {
            result.append("@protected\n")
        }
        if isPackage {
            result.append("@package\n")
        }
        if isClass {
            result.append("@class\n")
        }
        if isOverride {
            result.append("@override\n")
        }
        if isExternal {
            result.append("@external\n")
        }
        if isImplicit {
            result.append("@implicit\n")
        }
        if isExtendable {
            result.append("@extendable\n")
        }
        if isAbstract {
            result.append("@abstract\n")
        }
        if isInline {
            result.append("@inline\n")
        }
        if isSpecialize {
            result.append("@specialize\n")
        }
        if isWeak {
            result.append("@weak\n")
        }
        if isSynthetic {
            result.append("@synthetic\n")
        }
        if isUnsafeImmutable {
            result.append("@unsafeImmutable\n")
        }
        if isDefault {
            result.append("@default\n")
        }
        if isCapture {
            result.append("@capture\n")
        }
        if isNoReturn {
            result.append("@noReturn\n")
        }
        if isPointerSize {
            result.append("@pointerSize\n")
        }
        if expressions !== null {
            for expr in expressions! {
                result.append("\{expr}\n")
            }
        }
        return result.finish()
    }
}