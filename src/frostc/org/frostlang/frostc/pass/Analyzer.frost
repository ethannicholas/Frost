package org.frostlang.frostc.pass

uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.FieldDecl
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodDecl
uses org.frostlang.frostc.Pair
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.expression.Binary

====================================================================================================
Performs dataflow analysis on Frost methods to detect errors such as reassigned `def`s, missing
returns, unreachable code, and unsafe nullable usage.
====================================================================================================
class Analyzer {
    choice Definition {
        CONSTRUCTOR(IR.Statement.ID)
        FIELD(Definition, FieldDecl)
        LOCAL(Int)
        PARAMETER(Int)
        UNSPECIFIED

        @override
        function get_asString():String {
            match self {
                when CONSTRUCTOR(id) {
                    return "CONSTRUCTOR(id)"
                }
                when FIELD(base, field) {
                    return "FIELD(\{base}, \{field.name})"
                }
                when LOCAL(slot) {
                    return "LOCAL(\{slot})"
                }
                when PARAMETER(slot) {
                    return "PARAMETER(\{slot})"
                }
                when UNSPECIFIED {
                    return "UNSPECIFIED"
                }
                otherwise {
                    unreachable
                }
            }
        }

        function matches(other:Definition):Bit {
            match self {
                when CONSTRUCTOR(id1) {
                    match other {
                        when CONSTRUCTOR(id2) {
                            return id1 = id2
                        }
                    }
                    return false
                }
                when FIELD(base1, field1) {
                    match other {
                        when FIELD(base2, field2) {
                            return base1.matches(base2) & field1 == field2
                        }
                    }
                    return false
                }
                when LOCAL(slot1) {
                    match other {
                        when LOCAL(slot2) {
                            return slot1 = slot2
                        }
                    }
                    return false
                }
                when PARAMETER(slot1) {
                    match other {
                        when PARAMETER(slot2) {
                            return slot1 = slot2
                        }
                    }
                    return false
                }
                when UNSPECIFIED {
                    match other {
                        when UNSPECIFIED {
                            return true
                        }
                    }
                    return false
                }
                otherwise {
                    unreachable
                }
            }
        }
    }

    ================================================================================================
    Represents what we know about an IR statement or value.
    ================================================================================================
    class DataFlowValue : Equatable<DataFlowValue> {
        ============================================================================================
        The type of this value. This may be more specific than the compile-time declared type of the
        value; for instance, in "def v:Object = 5" we know that v is actually an Int, not just an
        Object.
        ============================================================================================
        def type:Type

        ============================================================================================
        Contains the specific value in question if it can be statically determined, otherwise
        UNSPECIFIED.
        ============================================================================================
        def definition:Definition

        ============================================================================================
        If this value is a mutable object, identifies the last statement which could have possibly
        modified the object in question. Note that this describes the mutation of the object itself,
        as distinct from reassigning variables to refer to different objects altogether. So in the
        code:

            def array := Array<Int>()
            array.add(5)
            Console.printLine(array)

        the definition of array will be the CONSTRUCT statement corresponding to "Array<Int>()", but
        the lastModification statement will be the DYNAMIC_CALL which invokes add(5).

        This is a pessimistic analysis: we assume that a @self method modifies the callee, that a
        @limited method modifies the callee and all of its parameters, and that other methods modify
        all objects.
        ============================================================================================
        def lastModification:IR.Statement.ID?

        ============================================================================================
        Describes how this value affects our determination of whether objects are null. If this
        value represents a Bit or builtin_bit, then its true/false state may imply that other values
        are / are not nullable (trivially, consider the Bit in the test of "if x !== null { ... }";
        if it is true, then we know x is not null). An entry in this list means that the value is
        known to be non-null when this value matches its Bit. So (LOCAL(0), true) means that we know
        LOCAL(0) is non-null when this value is true, and (PARAMETER(2), false) means that
        PARAMETER(2) is non-null when this value is false.
        ============================================================================================
        def nonNullImplications:ListView<(Definition, Bit)>?

        init(type:Type, definition:Definition) {
            init(type, definition, null)
        }

        init(type:Type, definition:Definition, implications:ListView<(Definition, Bit)>?) {
            self.type := type
            self.definition := definition
            self.nonNullImplications := implications
        }

        @override
        function =(other:DataFlowValue):Bit {
            return type = other.type & definition.matches(other.definition)
        }

        method union(compiler:Compiler, other:DataFlowValue):DataFlowValue {
            if self == other {
                return self
            }
            def type := type.union(compiler, other.type)
            if nonNullImplications !== null {
                if other.nonNullImplications !== null {
                    -- FIXME deal with duplicates
                    def merged := Array<(Definition, Bit)>(nonNullImplications)
                    merged.addAll(other.nonNullImplications)
                    return DataFlowValue(type, Definition.UNSPECIFIED, merged)
                }
                return DataFlowValue(type, Definition.UNSPECIFIED, nonNullImplications)
            }
            else if other.nonNullImplications !== null {
                return DataFlowValue(type, Definition.UNSPECIFIED, other.nonNullImplications)
            }
            return DataFlowValue(type, Definition.UNSPECIFIED)
        }

        @override
        function get_asString():String {
            if nonNullImplications !== null {
                return "DataFlowValue(\{type}, \{definition}, \{nonNullImplications})"
            }
            return "DataFlowValue(\{type}, \{definition})"
        }
    }

    ================================================================================================
    Represents an exit from a block. Blocks which end in conditional branches have two exits (exit
    0 for when the condition is true, and exit 1 for when it is false), blocks which end in
    unconditional branches have only a single exit, and other blocks do not have exits.
    ================================================================================================
    class BlockExit : Value, HashKey<BlockExit> {
        def id:IR.Block.ID
        def exit:Int

        init(id:IR.Block.ID, exit:Int) {
            self.id := id
            self.exit := exit
        }

        @override
        function =(other:BlockExit):Bit {
            return id = other.id & exit = other.exit
        }

        @override
        function get_asString():String {
            return "BlockExit<\{id}, \{exit}>"
        }

        @override
        function get_hash():Int {
            return id.value ~~ exit
        }
    }

    class State {
        def locals:Array<DataFlowValue>

        def parameters:Array<Type>

        init() {
            locals := Array<DataFlowValue>()
            parameters := Array<Type>()
        }

        init(src:State) {
            locals := Array<DataFlowValue>(src.locals)
            parameters := Array<Type>(src.parameters)
            function copy(src:Array<frost.collections.IdentitySet<FieldDecl>?>):
                    Array<frost.collections.IdentitySet<FieldDecl>?> {
                def result := Array<frost.collections.IdentitySet<FieldDecl>?>(src)
                for i in 0 .. result.count {
                    if result[i] !== null {
                        result[i] := frost.collections.IdentitySet<FieldDecl>(result[i]!)
                    }
                }
                return result
            }
        }

        method add(compiler:Compiler, s:State):Bit {
            var modified := false
            assert locals.count = s.locals.count
            for i in 0 .. locals.count {
                def union := locals[i].union(compiler, s.locals[i])
                if union != locals[i] {
                    modified := true
                    locals[i] := union
                }
            }
            for i in 0 .. parameters.count {
                def union := parameters[i].union(compiler, s.parameters[i])
                if union != parameters[i] {
                    modified := true
                    parameters[i] := union
                }
            }
            return modified
        }

        @override
        function get_asString():String {
            return "State(\{locals}, \{parameters})"
        }
    }

    def compiler:Compiler

    def m:MethodDecl

    def ir:IR

    def blocks := HashMap<IR.Block.ID, IR.Block>()

    def predecessors := HashMap<IR.Block.ID, HashSet<BlockExit>>()

    def entryStates := HashMap<IR.Block.ID, State>()

    def worklist := HashSet<IR.Block.ID>()

    def statements := HashMap<IR.Statement.ID, IR.Statement>()

    var reportErrors := false

    init(compiler:Compiler, m:MethodDecl, ir:IR) {
        self.compiler := compiler
        self.m := m
        self.ir := ir
    }

    function definitionFrom(stmt:IR.Statement.ID):Definition {
        match statements[stmt]! {
            when IR.Statement.EXTRACT_FIELD(_, base, field) {
                return Definition.FIELD(definitionFrom(base), field)
            }
            when IR.Statement.GET_FIELD_POINTER(_, base, field) {
                return Definition.FIELD(definitionFrom(base), field)
            }
            when IR.Statement.CAST(_, value, _, _) {
                return definitionFrom(value)
            }
            when IR.Statement.LOAD(_, value) {
                return definitionFrom(value)
            }
            otherwise {
                return Definition.UNSPECIFIED
            }
        }
    }

    function definitionFrom(value:IR.Value):Definition {
        match value {
            when IR.Value.LOCAL(slot, _) {
                return Definition.LOCAL(slot)
            }
            when IR.Value.PARAMETER(slot, _) {
                return Definition.PARAMETER(slot)
            }
            when IR.Value.REF(id, _) {
                return definitionFrom(id)
            }
            otherwise {
                return Definition.UNSPECIFIED
            }
        }
    }

    function getValue(stmt:IR.Statement.ID, state:State):DataFlowValue {
        match statements[stmt]! {
            when IR.Statement.BINARY(_, left, op, right, type) {
                return binaryValue(left, op, right, state, type)
            }
            when IR.Statement.CAST(position, value, type, explicit) {
                if !explicit & reportErrors & !type.isNullable &
                        getValue(value, state).type.isNullable {
--                    compiler.warn(position, "value of type '\{value.type()}' may be null")
                }
                if explicit {
                    return DataFlowValue(type, definitionFrom(stmt))
                }
                else {
                    return getValue(value, state)
                }
            }
            when IR.Statement.CONSTRUCT(_, cl) {
                return DataFlowValue(cl.type, definitionFrom(stmt))
            }
            when IR.Statement.CREATE_STRUCT(_, cl, args) {
                if cl.type = compiler.BIT_TYPE {
                    return DataFlowValue(cl.type, definitionFrom(stmt),
                            getValue(args[0], state).nonNullImplications)
                }
                return DataFlowValue(cl.type, definitionFrom(stmt))
            }
            when IR.Statement.DYNAMIC_CALL(_, m, _) {
                def type := m.type()
                if type.isPointer {
                    return DataFlowValue(type.subtypes[1].returnType, definitionFrom(stmt))
                }
                else {
                    return DataFlowValue(type.returnType, definitionFrom(stmt))
                }
            }
            when IR.Statement.EXTRACT_FIELD(_, base, f) {
                if f.owner.type = compiler.BIT_TYPE {
                    return DataFlowValue(f.type, definitionFrom(stmt),
                            getValue(base, state).nonNullImplications)
                }
                return DataFlowValue(f.type, definitionFrom(stmt))
            }
            when IR.Statement.GET_CHOICE_FIELD_POINTER(_, _, cc, index) {
                return DataFlowValue(Type.pointerTo(compiler, cc.fields[index]),
                        definitionFrom(stmt))
            }
            when IR.Statement.GET_FIELD_POINTER(_, base, f) {
                return DataFlowValue(f.type, definitionFrom(stmt))
            }
            when IR.Statement.LOAD(position, v) {
                def value := getValue(v, state)
                if reportErrors & value.type = compiler.INVALID_TYPE {
                    compiler.warn(position, "value \{stmt}:\{v} has not been initialized")
                }
                return value
            }
            when IR.Statement.NEGATE(_, v) {
                return DataFlowValue(getValue(v, state).type, definitionFrom(stmt))
            }
            when IR.Statement.NOT(_, v) {
                def base := getValue(v, state)
                if base.nonNullImplications !== null {
                    return DataFlowValue(base.type, definitionFrom(stmt),
                            base.nonNullImplications.map(p => (p[0], !p[1])))
                }
                return DataFlowValue(base.type, definitionFrom(stmt))
            }
            when IR.Statement.POINTER_ALLOC(_, _, t) {
                return DataFlowValue(Type.pointerTo(compiler, t), definitionFrom(stmt))
            }
            when IR.Statement.POINTER_GET(_, p) {
                def value := getValue(p, state)
                assert value.type.isPointer
                return DataFlowValue(value.type.subtypes[1], definitionFrom(stmt))
            }
            when IR.Statement.POINTER_GET_INDEX(_, p, _) {
                def value := getValue(p, state)
                assert value.type.isPointer
                return DataFlowValue(value.type.subtypes[1], definitionFrom(stmt))
            }
            when IR.Statement.POINTER_OFFSET(_, p, _) {
                return DataFlowValue(getValue(p, state).type, Definition.UNSPECIFIED)
            }
            when IR.Statement.POINTER_REALLOC(_, p, _, _) {
                return DataFlowValue(getValue(p, state).type, Definition.UNSPECIFIED)
            }
            when IR.Statement.STATIC_CALL(_, m, args) {
                if m.returnType = compiler.BIT_TYPE {
                    return DataFlowValue(m.returnType, definitionFrom(stmt), getValue(args[0],
                            state).nonNullImplications)
                }
                else {
                    return DataFlowValue(m.returnType, definitionFrom(stmt))
                }
            }
            otherwise {
                unreachable, "unsupported statement: \{statements[stmt]!}"
            }
        }
    }

    function getValue(v:IR.Value, s:State):DataFlowValue {
        match v {
            when IR.Value.BIT(_, type) {
                return DataFlowValue(type, Definition.UNSPECIFIED)
            }
            when IR.Value.INT(_, type) {
                return DataFlowValue(type, Definition.UNSPECIFIED)
            }
            when IR.Value.LOCAL(slot, _) {
                return s.locals[slot]
            }
            when IR.Value.NULL(type) {
                return DataFlowValue(type, Definition.UNSPECIFIED)
            }
            when IR.Value.PARAMETER(slot, _) {
                return DataFlowValue(s.parameters[slot], Definition.PARAMETER(slot))
            }
            when IR.Value.REAL(_, type) {
                return DataFlowValue(type, Definition.UNSPECIFIED)
            }
            when IR.Value.REF(statement, _) {
                return getValue(statement, s)
            }
            when IR.Value.STRING(_, type) {
                return DataFlowValue(type, Definition.UNSPECIFIED)
            }
            otherwise {
                unreachable, "unsupported value '\{v}'"
            }
        }
    }

    method propagate(src:BlockExit, target:IR.Block.ID) {
        var preds := predecessors[target]
        if preds == null {
            preds := HashSet<BlockExit>()
            predecessors[target] := preds
        }
        preds.add(src)
        var updated := false
        def predIterator := preds.iterator
        var entry := entryStates[target]
        if entry == null {
            entry := computeExitState(predIterator.next())
            entryStates[target] := entry
            updated := true
        }
        for pred in predIterator {
            updated |= entry.add(compiler, computeExitState(pred))
        }
        if updated {
            worklist.add(target)
        }
    }

    ================================================================================================
    When this is called, we have computed a unified exit state upon reaching the end of the block.
    But if the block ends in a conditional branch, the state that leaves the block may be different
    depending on which exit we take. For instance, given the block:
        $0: load LOCAL(0:frost.core.Object?)
        $1: binary REF($0:frost.core.Object?), !==, NULL(frost.core.Object?), builtin_bit
        $2: branch REF($1:builtin_bit), block2, block3

    The type of LOCAL(0) will need to be seen differently depending on whether the branch takes us
    to block2 (exit 0) or block3 (exit 1). This method applies that change, resulting in a
    non-nullable LOCAL(0) entering block2 and a nullable LOCAL(1) entering block3.
    ================================================================================================
    method updateStateForExitIndex(b:IR.Block, exit:Int, state:State) {
        match b.statements.last {
            when IR.Statement.CONDITIONAL_BRANCH(_, flag, _, _) {
                def value := getValue(flag, state)
                if value.nonNullImplications !== null {
                    for impl in value.nonNullImplications {
                        if impl[1] = (exit = 0) {
                            match impl[0] {
                                when Definition.LOCAL(slot) {
                                    def old := state.locals[slot]
                                    assert old !== null
                                    state.locals[slot] := DataFlowValue(old.type.nonnullable(),
                                            impl[0])
                                }
                                when Definition.PARAMETER(slot) {
                                    state.parameters[slot] := state.parameters[slot].nonnullable()
                                }
                            }
                        }
                    }
                }
            }
            otherwise {
                return
            }
        }
    }

    method binaryValue(left:IR.Value, op:Binary.Operator, right:IR.Value, state:State,
            type:Type):DataFlowValue {
        match op {
            when Binary.Operator.NIDENTITY {
                match right {
                    when IR.Value.NULL {
                        assert type = compiler.BUILTIN_BIT_TYPE
                        def nonNullImplications := [(definitionFrom(left), true)]
                        match left {
                            when IR.Value.REF(id, _) {
                                def ref := statements[id]!
                                match ref {
                                    when IR.Statement.LOAD(_, value) {
                                        nonNullImplications.add((definitionFrom(value), true))
                                    }
                                }
                            }
                        }
                        return DataFlowValue(type, Definition.UNSPECIFIED, nonNullImplications)
                    }
                }
            }
            when Binary.Operator.IDENTITY {
                match right {
                    when IR.Value.NULL {
                        assert type = compiler.BUILTIN_BIT_TYPE
                        def nonNullImplications := [(definitionFrom(left), false)]
                        match left {
                            when IR.Value.REF(id, _) {
                                def ref := statements[id]!
                                match ref {
                                    when IR.Statement.LOAD(_, value) {
                                        nonNullImplications.add((definitionFrom(value), false))
                                    }
                                }
                            }
                        }
                        return DataFlowValue(type, Definition.UNSPECIFIED, nonNullImplications)
                    }
                }
            }
        }

        return DataFlowValue(type, Definition.UNSPECIFIED)
    }

    method computeExitState(target:BlockExit):State {
        def result := State(entryStates[target.id]!)
        def block := blocks[target.id]!
        def iter1 := block.ids.iterator
        def iter2 := block.statements.iterator
        while !iter1.done {
            def id := iter1.next()
            match iter2.next() {
                when IR.Statement.STORE(_, v, target) {
                    match target {
                        when IR.Value.LOCAL(slot, _) {
                            result.locals[slot] := DataFlowValue(getValue(v, result).type,
                                    Definition.LOCAL(slot))
                        }
                        when IR.Value.REF(s, _) {
                            match statements[s]! {
                                when IR.Statement.GET_FIELD_POINTER(_, v, f) {
                                    match v {
                                        when IR.Value.LOCAL(slot, _) {
                                            result.locals[slot] := DataFlowValue(ir.locals[slot],
                                                    Definition.LOCAL(slot))
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                when IR.Statement.CAST {
                    if reportErrors {
                        getValue(id, result)
                    }
                }
            }
        }
        updateStateForExitIndex(block, target.exit, result)
        return result
    }

    method process(id:IR.Block.ID) {
        def block := blocks[id]!
        match block.statements.last {
            when IR.Statement.BRANCH(_, id) {
                propagate(BlockExit(block.id, 0), id)
            }
            when IR.Statement.CONDITIONAL_BRANCH(_, _, id1, id2) {
                propagate(BlockExit(block.id, 0), id1)
                propagate(BlockExit(block.id, 1), id2)
            }
            when IR.Statement.END {
            }
            when IR.Statement.RETURN {
            }
            when IR.Statement.UNREACHABLE {
            }
            otherwise {
                unreachable, "block ended in nonterminal statement " + block.statements.last
            }
        }
    }

    method dump() {
        Console.printLine(m.declaration)
        for i in 0 .. ir.locals.count {
            Console.printLine("local\{i}: \{ir.locals[i]}")
        }
        for b in ir.blocks {
            Console.print("\n\{b.id}:")
            if entryStates[b.id] !== null {
                Console.print(" " + entryStates[b.id]!)
            }
            Console.printLine()
            def iter1 := b.ids.iterator
            def iter2 := b.statements.iterator
            while !iter1.done {
                Console.print(iter1.next())
                Console.print(": ")
                Console.printLine(iter2.next())
            }
        }
    }

    method analyze() {
        def invalid := DataFlowValue(compiler.INVALID_TYPE, Definition.UNSPECIFIED)
        def startState := State()
        for i in 0 .. ir.locals.count {
            startState.locals.add(invalid)
        }
        if m.isInstance {
            startState.parameters.add(m.owner.type)
        }
        for p in m.parameters {
            startState.parameters.add(p.type)
        }
        entryStates[ir.blocks[0].id] := startState
        for b in ir.blocks {
            blocks[b.id] := b
            def iter1 := b.ids.iterator
            def iter2 := b.statements.iterator
            while !iter1.done {            
                statements[iter1.next()] := iter2.next()
            }
        }
        worklist.add(ir.blocks[0].id)
        while worklist.count > 0 {
            def next := worklist.iterator.next()
            worklist.remove(next)
            process(next)
        }
        reportErrors := true
        for b in ir.blocks {
            if entryStates[b.id] !== null {
                match b.statements.first {
                    when IR.Statement.END {
                        if m.methodKind != MethodDecl.Kind.INIT &
                                m.returnType != compiler.VOID_TYPE {
                            compiler.error(m.position, "method can exit without returning")
                        }
                    }
                    otherwise {
                        computeExitState(BlockExit(b.id, 0))
                    }
                }
            }
            else if b.containsExplicitCode & !b.forceReachable {
                compiler.error(b.statements.first.position, "unreachable")
            }
        }
    }

    method makeUnreachable(b:IR.Block) {
        def id := b.ids.first
        def pos := b.statements.first.position
        b.ids.clear()
        b.ids.add(id)
        b.statements.clear()
        b.statements.add(IR.Statement.UNREACHABLE(pos))
    }

    method removeBlock(index:Int) {
        def removed := ir.blocks[index].id
        ir.blocks.removeIndex(index)
        for b in ir.blocks {
            def last := b.statements.count - 1
            match b.statements.last {
                when IR.Statement.BRANCH(_, id) {
                    if id = removed {
                        makeUnreachable(b)
                    }
                }
                when IR.Statement.CONDITIONAL_BRANCH(position, _, ifTrue, ifFalse) {
                    assert ifTrue != ifFalse
                    if ifTrue = removed {
--                        b.statements[last] := IR.Statement.BRANCH(position, ifFalse)
                        System.crash()
                    }
                    else if ifFalse = removed {
--                        b.statements[last] := IR.Statement.BRANCH(position, ifTrue)
                        System.crash()
                    }
                }
            }
        }
    }
}