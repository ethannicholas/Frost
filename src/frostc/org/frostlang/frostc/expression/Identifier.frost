package org.frostlang.frostc.expression

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Symbol
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.Variable

class Identifier {
    @class
    method compile(compiler:Compiler, position:MethodPosition, name:String):IR.Value? {
        if name = Compiler.FORCE_SELF_NAME {
            def s := compiler.symbolTable[Compiler.SELF_NAME]
            assert s !== null, "no 'self' in symboltable"
            assert s.kind = Symbol.Kind.VARIABLE
            match s->Variable.storage {
                when Variable.Storage.PARAMETER(slot) {
                    return IR.Value.PARAMETER(0, compiler.currentClass[0].type)
                }
                otherwise {
                    unreachable
                }
            }
        }
        var s := compiler.symbolTable[name]
        if s == null {
            def cl := compiler.tryResolveClass(name)
            if cl !== null {
                compiler.checkGenericArguments(position.asPosition, cl, cl.type)
                return compiler.literalType(cl.type)
            }
        }
        if s == null {
            s := compiler.root[name]
        }
        if s !== null {
            return compiler.symbolRef(position, null, s)
        }
        compiler.error(position, "unknown identifier")
        return null
    }
}