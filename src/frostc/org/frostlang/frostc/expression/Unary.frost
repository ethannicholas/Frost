package org.frostlang.frostc.expression

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodDecl
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.MethodRef
uses org.frostlang.frostc.Methods
uses org.frostlang.frostc.Position
uses org.frostlang.frostc.Symbol
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.parser.Token

class Unary {
    choice Operator {
        NOT
        BITWISENOT
        NEGATE
        NONNULL

        @override
        function get_toString():String {
            match self {
                when NOT        { return "!" }
                when BITWISENOT { return "!!" }
                when NEGATE     { return "-" }
                when NONNULL    { return "(nonnull)"}
                otherwise       { unreachable }
            }
        }
    }

    @class
    method possibleTypes(compiler:Compiler, position:Position, op:Operator,
            operand:ASTNode):CollectionView<Type>? {
        if op = Operator.NONNULL {
            var result := compiler.possibleTypes(operand)
            if result !== null {
                result := result.map(t => t.nonnullable())
            }
            return result
        }
        return compiler.possibleTypes(ASTNode.CALL(position,
                ASTNode.DOT(position, operand, op.toString),
                FixedArray<ASTNode>()))
    }

    @class
    method preferredType(compiler:Compiler, position:Position, op:Operator, operand:ASTNode):Type? {
        def baseType := compiler.preferredType(operand)
        if baseType !== null {
            if op = Operator.NONNULL {
                return baseType.nonnullable()
            }
             -- fake target, just used for matching
            def target := IR.Value.REF(IR.Statement.ID(-1), baseType)
            return compiler.preferredType(ASTNode.CALL(position,
                    ASTNode.DOT(position, ASTNode.IR_WRAPPER(position, target), op.toString),
                    FixedArray<ASTNode>()))
        }
        return null
    }

    @class
    method coercionCost(compiler:Compiler, position:Position, op:Operator,
            operand:ASTNode, target:Type):(Type, Int)? {
        -- need to special-case things like -128, which can fit into an Int8 despite 128 not
        -- doing so
        match op {
            when Operator.NEGATE {
                match operand {
                    when ASTNode.INT(_, value) {
                        if value = 128 {
                            return compiler.coercionCost(compiler.BUILTIN_INT8_TYPE, target)
                        }
                        if value = 32768 {
                            return compiler.coercionCost(compiler.BUILTIN_INT16_TYPE, target)
                        }
                        if value = 2147483648 {
                            return compiler.coercionCost(compiler.BUILTIN_INT32_TYPE, target)
                        }
                    }
                }
            }
            when Operator.NONNULL {
                def pref := preferredType(compiler, position, op, operand)
                if pref == null {
                    return null
                }
                return compiler.coercionCost(pref, target)
            }
        }
        def preferred := compiler.preferredType(operand)
        if preferred !== null & (preferred = compiler.BUILTIN_BIT_TYPE |
                preferred.isBuiltinNumber) {
            return compiler.coercionCost(preferred, target)
        }
        return compiler.coercionCost(ASTNode.CALL(position,
                ASTNode.DOT(position, operand, op.toString),
                    FixedArray<ASTNode>()),
                target)
    }

    @class
    method compile(compiler:Compiler, position:MethodPosition, op:Operator, operand:ASTNode,
            type:TypeContext):IR.Value? {
        def ir := compiler.ir
        match op {
            when Operator.NEGATE {
                match operand {
                    when ASTNode.INT(_, value) {
                        return IntLiteral.compileNegated(compiler, position,
                                value, type)
                    }
                }
                def target := compiler.compileExpression(operand, TypeContext.NON_VOID)
                if target == null {
                    return null
                }
                if target.type().isBuiltinNumber {
                    def result := ir.add(IR.Statement.NEGATE(position, target))
                    return compiler.coerce(position, IR.Value.REF(result, target.type()), type)
                }
                return Call.compile(compiler, position, target, "-", [], type)
            }
            when Operator.NOT {
                def target := compiler.compileExpression(operand, TypeContext.NON_VOID)
                if target == null {
                    return null
                }
                if target.type() = compiler.BUILTIN_BIT_TYPE {
                    def result := ir.add(IR.Statement.NOT(position, target))
                    return compiler.coerce(position, IR.Value.REF(result,
                            compiler.BUILTIN_BIT_TYPE), type)
                }
                return Call.compile(compiler, position, target, "!", [], type)
            }
            when Operator.BITWISENOT {
                def target := compiler.compileExpression(operand, TypeContext.NON_VOID)
                if target == null {
                    return null
                }
                if target.type().isBuiltinNumber {
                    def result := ir.add(IR.Statement.NOT(position, target))
                    return compiler.coerce(position, IR.Value.REF(result, target.type()), type)
                }
                return Call.compile(compiler, position, target, "!!", [], type)
            }
            when Operator.NONNULL {
                def value := compiler.compileExpression(operand, TypeContext.NON_VOID)
                if value == null {
                    return null
                }
                def raw := value.type()
                if raw.isNullable |
                        (raw.typeKind = Type.Kind.GENERIC_CLASS_PARAMETER &
                            raw.genericClassParameter!.bound.isNullable) |
                        (raw.typeKind = Type.Kind.GENERIC_METHOD_PARAMETER &
                            raw.genericMethodParameter!.bound.isNullable) |
                        compiler.currentClass[0].isSpecialization() {
                    def nonnull := compiler.cast(position, value, value.type().nonnullable())
                    if nonnull == null {
                        return null
                    }
                    return compiler.coerce(position, nonnull, type)
                }
                compiler.error(position, "value of type '\{value.type()}' is already non-null")
                return compiler.coerce(position, value, type)
            }
        }
        unreachable
    }
}