package org.frostlang.frostc.expression

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.Pair
uses org.frostlang.frostc.Position
uses org.frostlang.frostc.Type

class ArrayLiteral {
    @class
    method compile(compiler:Compiler, position:Position, elements:FixedArray<ASTNode>,
            type:TypeContext):IR.Value?  {
        var listType:Pair<Bit, Type>?
        match type {
            when TypeContext.TYPE(t) {
                listType := compiler.getListType(t)
                if listType == null {
                    -- it's going to cause an error no matter what we do, so let's just go with the
                    -- preferred type for error reporting purposes
                    def preferred := compiler.preferredType(ASTNode.ARRAY(position, elements))
                    if preferred !== null {
                        listType := compiler.getListType(preferred)
                    }
                    if listType == null {
                        compiler.error(position, "cannot determine type of array literal")
                        return null
                    }
                }
            }
            otherwise {
                def t := compiler.preferredType(ASTNode.ARRAY(position, elements))
                if t == null {
                    return null
                }
                listType := compiler.getListType(t)
            }
        }
        def arrayType := Type.ArrayOf(listType.second)
        var result := Call.compile(compiler, position, IR.Value.TYPE(arrayType),
                [ASTNode.INT(position, elements.count.convert())],
                TypeContext.UNSPECIFIED)
        if result == null {
            return null
        }
        for e in elements {
            Call.compile(compiler, position, result, "add", [e], TypeContext.UNSPECIFIED)
        }
        if !listType.first {
            result := Call.compile(compiler, position,
                    IR.Value.TYPE(Type.ImmutableArrayOf(listType.second)), "from",
                    [ASTNode.IR_WRAPPER(position, result)], TypeContext.UNSPECIFIED)
            if result == null {
                return null
            }
        }
        return compiler.coerce(position, result, type)
    }
}