package org.frostlang.frostc.expression

uses org.frostlang.frostc.Annotations
uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.ClassDecl
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.AutoScope
uses org.frostlang.frostc.Compiler.BinaryKey
uses org.frostlang.frostc.Compiler.Capture
uses org.frostlang.frostc.Compiler.EnclosingContext
uses org.frostlang.frostc.Compiler.Message
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.FieldDecl
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodDecl
uses org.frostlang.frostc.Pair
uses org.frostlang.frostc.Position
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.Variable
uses org.frostlang.frostc.parser.Token

class Closure {
    @class
    function methodType(compiler:Compiler, position:Position, kind:MethodDecl.Kind,
            parameters:FixedArray<ASTNode>, returnType:ASTNode?, immutable:Bit):Type? {
        def finalParameters := Array<Type>(parameters.count)
        for p in parameters {
            match p {
                when ASTNode.PARAMETER(_, _, type) {
                    def converted := compiler.resolve(compiler.scanner.convertType(type))
                    if converted == null {
                        return null
                    }
                    finalParameters.add(converted)
                }
                otherwise {
                    unreachable
                }
            }
        }
        def finalReturnType:Type
        if returnType !== null {
            finalReturnType := compiler.resolve(compiler.scanner.convertType(returnType))
            if finalReturnType == null {
                return null
            }
        }
        else {
            finalReturnType := compiler.VOID_TYPE
        }
        def finalKind:Type.Kind
        if kind = MethodDecl.Kind.FUNCTION {
            if immutable {
                finalKind := Type.Kind.IMMUTABLE_FUNCTION
            }
            else {
                finalKind := Type.Kind.FUNCTION
            }
        }
        else {
            if immutable {
                finalKind := Type.Kind.IMMUTABLE_METHOD
            }
            else {
                finalKind := Type.Kind.METHOD
            }
        }
        return Type.methodType(compiler, position, finalKind, finalParameters, finalReturnType, 0)
    }

    @class
    function capturedSelfType(compiler:Compiler):Type {
        var cl := compiler.currentClass[0]
        loop {
            if !cl.annotations.isSynthetic {
                return cl.type
            }
            assert cl.owner !== null, "no non-synthetic owner for \{compiler.currentClass[0].name}"
            cl := cl.owner
        }
    }

    @class
    method createClosureClass(compiler:Compiler, m:MethodDecl,
            captures:CollectionView<Capture>):ClassDecl {
        def p := m.position
        m.annotations := Annotations(0)
        compiler.closureCount += 1
        def supers := Array<Type>()
        if compiler.isImmutable(compiler.currentClass[0].type) {
            supers.add(compiler.IMMUTABLE_TYPE)
            for c in captures {
                match c {
                    when Capture.VARIABLE(v) {
                        if !compiler.isImmutable(v.type) {
                            supers.clear()
                            break
                        }
                    }
                    when Capture.SELF {
                        if !compiler.isImmutable(capturedSelfType(compiler)) {
                            supers.clear()
                            break
                        }
                    }
                    otherwise {
                        unreachable, c.asString
                    }
                }
            }
        }
        def result := ClassDecl(compiler.currentClass[0].source, p, HashMap<String, String>(), null,
                Annotations(Annotations.Flag.SYNTHETIC), ClassDecl.Kind.CLASS,
                "\{compiler.currentClass[0].name}._Closure\{compiler.closureCount}", supers,
                Array<ClassDecl.GenericParameter>(), compiler.root)
        result.external := false

        -- create init method
        def statements := Array<ASTNode>()
        def parameters := Array<MethodDecl.Parameter>()
        for c in captures {
            match c {
                when Capture.VARIABLE(v) {
                    parameters.add(MethodDecl.Parameter(v.name, v.type))
                    -- self.parameterName := parameterName
                    statements.add(ASTNode.BINARY(p,
                            ASTNode.DOT(p, ASTNode.IDENTIFIER(p, Compiler.FORCE_SELF_NAME), v.name),
                            Binary.Operator.ASSIGNMENT, ASTNode.IDENTIFIER(p, v.name)))
                        }
                when Capture.FIELD(f) {
                    parameters.add(MethodDecl.Parameter(f.name, f.type))
                    -- self.parameterName := parameterName
                    statements.add(ASTNode.BINARY(p,
                            ASTNode.DOT(p, ASTNode.IDENTIFIER(p, Compiler.FORCE_SELF_NAME), f.name),
                            Binary.Operator.ASSIGNMENT, ASTNode.IDENTIFIER(p, f.name)))
                }
                when Capture.SELF {
                    parameters.add(MethodDecl.Parameter(Compiler.CAPTURED_SELF_NAME,
                            capturedSelfType(compiler)))
                    -- self.$self := $self
                    statements.add(ASTNode.BINARY(p,
                            ASTNode.DOT(p, ASTNode.IDENTIFIER(p, Compiler.FORCE_SELF_NAME),
                                Compiler.CAPTURED_SELF_NAME),
                            Binary.Operator.ASSIGNMENT, ASTNode.IDENTIFIER(p,
                                Compiler.CAPTURED_SELF_NAME)))
                }
            }
        }
        def initMethod := MethodDecl(result, p, null,
                Annotations(Annotations.Flag.SYNTHETIC), MethodDecl.Kind.INIT, "init",
                null, parameters,
                compiler.VOID_TYPE, FixedArray<ASTNode>.from(statements))
        result.methods.add(initMethod)
        result.symbolTable.add(initMethod)

        -- default cleanup
        def defaultCleanup := MethodDecl(result, p, null,
                Annotations(Annotations.Flag.OVERRIDE || Annotations.Flag.SYNTHETIC),
                MethodDecl.Kind.METHOD, "cleanup", null,
                Array<MethodDecl.Parameter>(), compiler.VOID_TYPE, FixedArray<ASTNode>())
        result.methods.add(defaultCleanup)
        result.symbolTable.add(defaultCleanup)

        -- create fields
        for c in captures {
            match c {
                when Capture.VARIABLE(v) {
                    def field := FieldDecl(result, p, null,
                            Annotations(Annotations.Flag.SYNTHETIC || Annotations.Flag.CAPTURE),
                            FieldDecl.Kind.DEF, v.name, v.type, null)
                    result.symbolTable.add(field)
                    result.fields.add(field)
                }
                when Capture.FIELD(f) {
                    def field := FieldDecl(result, p, null,
                            Annotations(Annotations.Flag.SYNTHETIC || Annotations.Flag.CAPTURE),
                            FieldDecl.Kind.DEF, f.name, f.type, null)
                    result.symbolTable.add(field)
                    result.fields.add(field)
                }
                when Capture.SELF {
                    def field := FieldDecl(result, p, null,
                            Annotations(Annotations.Flag.SYNTHETIC || Annotations.Flag.CAPTURE),
                            FieldDecl.Kind.DEF, Compiler.CAPTURED_SELF_NAME,
                            capturedSelfType(compiler), null)
                    result.symbolTable.add(field)
                    result.fields.add(field)
                }
                otherwise {
                    unreachable, c.asString
                }
            }
        }
        m.owner := result
        result.methods.add(m)
        compiler.classes[result.name] := result
        result.owner := compiler.currentClass[0]
        return result
    }

    @class
    method typedLambdaType(compiler:Compiler, rawParameters:ListView<ASTNode>, expr:ASTNode,
            type:TypeContext):Type? {
        def scope := AutoScope(compiler)
        def parameterTypes := Array<Type>()
        for i in 0 .. rawParameters.count {
            def p := rawParameters[i]
            match p {
                when ASTNode.PARAMETER(position, name, rawType) {
                    var type:Type? := compiler.scanner.convertType(rawType)
                    if type == null {
                        return null
                    }
                    type := compiler.resolve(type)
                    if type == null {
                        return null
                    }
                    parameterTypes.add(type)
                    compiler.symbolTable.add(Variable(position, Variable.Kind.DEF, name, type,
                            Variable.Storage.PARAMETER(-1)))
                }
                otherwise {
                    unreachable
                }
            }
        }
        def returnType:Type?
        match type {
            when TypeContext.TYPE(t, _) {
                if t.nonnullable().isMethod {
                    def target := t.returnType
                    -- we call computeCoercionCost directly, as we can't used the cached cost. When
                    -- evaluating untyped lambdas we may repeatedly reevaluate the same expr->target
                    -- coercion with different symbol definitions
                    def oldBinaryTypes := compiler.binaryTypes
                    compiler.binaryTypes := HashMap<BinaryKey, ListView<Type>?>()
                    def cost := compiler.computeCoercionCost(expr, target)
                    compiler.binaryTypes := oldBinaryTypes
                    if cost == null {
                        return null
                    }
                    returnType := cost.first
                }
            }
            otherwise {
                returnType := compiler.preferredType(expr)
            }
        }
        if returnType == null {
            return null
        }
        return Type.methodType(compiler, Position(), Type.Kind.IMMUTABLE_FUNCTION, parameterTypes,
                returnType, 0)
    }

    @class
    @post(@return !== null | compiler.errorCount > 0 | !compiler.reportErrors)
    method compileTypedLambda(compiler:Compiler, position:Position,
            rawParameters:FixedArray<ASTNode>, expr:ASTNode, type:TypeContext):IR.Value? {
        var returnType:Type
        def lambdaType := typedLambdaType(compiler, rawParameters, expr, type)
        if lambdaType !== null {
            returnType := lambdaType.returnType
        }
        else {
            -- this shouldn't happen with a valid lambda. push ahead and expect an error during
            -- compilation.
            returnType := compiler.ANY_TYPE
            match type {
                when TypeContext.TYPE(t, _) {
                    if t.nonnullable().isMethod {
                        returnType := t.nonnullable().returnType
                    }
                }
            }
        }
        return compile(compiler, position, MethodDecl.Kind.FUNCTION, rawParameters,
                ASTNode.IR_WRAPPER(position, compiler.literalType(returnType)),
                [ASTNode.RETURN(position, expr)]->FixedArray<ASTNode>, type)
    }

    @class
    @post(@return !== null | compiler.errorCount > 0 | !compiler.reportErrors)
    method compileUntypedLambda(compiler:Compiler, position:Position,
            rawParameters:FixedArray<ASTNode>, expr:ASTNode, type:TypeContext):IR.Value? {
        match type {
            when TypeContext.TYPE(t, _) {
                def methodType := t.nonnullable()
                if methodType.isMethod {
                    if rawParameters.count != methodType.parameterCount {
                        compiler.error(position, "expected '\{t}', but found lambda with wrong " +
                                "number of parameters")
                        return null
                    }
                    def parameters := Array<ASTNode>()
                    for i in 0 .. rawParameters.count {
                        match rawParameters[i] {
                            when ASTNode.IDENTIFIER(position, name) {
                                parameters.add(ASTNode.PARAMETER(position, name,
                                        ASTNode.IR_WRAPPER(position,
                                            compiler.literalType(methodType.parameterType(i)))))
                            }
                            otherwise {
                                unreachable
                            }
                        }
                    }
                    def returnType := t.nonnullable().returnType
                    return compile(compiler, position, MethodDecl.Kind.FUNCTION,
                            FixedArray<ASTNode>.from(parameters),
                            ASTNode.IR_WRAPPER(position, compiler.literalType(returnType)),
                            FixedArray<ASTNode>.from([ASTNode.RETURN(position, expr)]), type)

                }
            }
        }
        def attempts := compiler.lambdaTypes[expr]
        if attempts !== null {
            if attempts.count > 1 {
                def sorted := Array<Type>(attempts)
                sorted.sort((t1, t2) => t1.name > t2.name)
                def msg := MutableString("lambda error")
                def old := compiler.errorQueue
                for t in sorted {
                    msg.append("\n    when interpreted as '\{t}':")
                    compiler.errorQueue := MessageQueue<Message>()
                    compileUntypedLambda(compiler, position, rawParameters, expr,
                            TypeContext.TYPE(t, false))
                    assert compiler.errorQueue.hasMessage(),
                            "did not receive expected error compiling lambda at \{position} with " +
                                "type \{t}"
                    while compiler.errorQueue.hasMessage() {
                        match compiler.errorQueue.getMessage() {
                            when Message.WARNING(_, _, _, text) {
                                msg.append("\n        \{text}")
                            }
                            when Message.ERROR(_, _, _, text) {
                                msg.append("\n        \{text}")
                            }
                        }
                    }
                }
                compiler.errorQueue := old
                compiler.error(position, msg.finish())
                return null
            }
            else {
                return compileUntypedLambda(compiler, position, rawParameters, expr,
                        TypeContext.TYPE(attempts.iterator.next(), false))
            }
        }
        compiler.error(position, "lambda type was not specified and cannot be determined from " +
                "context")
        return null
    }

    @class
    method untypedLambdaCoercionCost(compiler:Compiler, parameters:ListView<ASTNode>, body:ASTNode,
            target:Type):Pair<Type, Int>? {
        if !target.nonnullable().isMethod {
            return compiler.coercionCost(compiler.MUTABLE_METHOD_TYPE, target)
        }
        if target.typeKind = Type.Kind.NULLABLE {
            def result := untypedLambdaCoercionCost(compiler, parameters, body,
                                                    target.nonnullable())
            if result == null {
                return null
            }
            return Pair<Type, Int>(result.first, result.second +
                    compiler.NONNULLABLE_TO_NULLABLE_CAST_COST)
        }
        if target.typeKind != Type.Kind.FUNCTION {
            def result := untypedLambdaCoercionCost(compiler, parameters, body,
                    Type.methodType(compiler, target.position, Type.Kind.FUNCTION,
                                    target.parameterTypes,
                    target.returnType, target.priority))
            if result == null {
                return null
            }
            return Pair<Type, Int>(result.first, result.second + 1)
        }
        if target.parameterCount != parameters.count {
            return null
        }
        def typedParameters := Array<ASTNode>()
        for i in 0 .. parameters.count {
            match parameters[i] {
                when ASTNode.IDENTIFIER(position, name) {
                    typedParameters.add(ASTNode.PARAMETER(position, name,
                            ASTNode.IR_WRAPPER(position, 
                                compiler.literalType(target.parameterType(i)))))
                }
                otherwise {
                    unreachable
                }
            }
        }
        def result := typedLambdaCoercionCost(compiler, typedParameters, body, target)
        if result !== null {
            var list := compiler.lambdaTypes[body]
            if list == null {
                list := HashSet<Type>()
                compiler.lambdaTypes[body] := list
            }
            list.add(target)
        }
        return result
    }

    @class
    method typedLambdaCoercionCost(compiler:Compiler, parameters:ListView<ASTNode>, body:ASTNode,
            target:Type):Pair<Type, Int>? {
        if !target.nonnullable().isMethod {
            return compiler.coercionCost(compiler.MUTABLE_METHOD_TYPE, target)
        }
        if target.typeKind = Type.Kind.NULLABLE {
            def result := typedLambdaCoercionCost(compiler, parameters, body, target.nonnullable())
            if result == null {
                return null
            }
            return Pair<Type, Int>(result.first, result.second +
                    compiler.NONNULLABLE_TO_NULLABLE_CAST_COST)
        }
        if target.parameterCount != parameters.count {
            return null
        }
        var cost := 0
        for i in 0 .. parameters.count {
            match parameters[i] {
                when ASTNode.PARAMETER(_, _, type) {
                    def resolved := compiler.tryResolveType(type)
                    if resolved == null {
                        return null
                    }
                    def parameterCost := compiler.coercionCost(target.parameterType(i), resolved)
                    if parameterCost == null {
                        return null
                    }
                    cost += parameterCost.second
                }
            }
        }
        def type := typedLambdaType(compiler, parameters, body, TypeContext.TYPE(target, false))
        if type == null {
            return null
        }
        def returnCost := compiler.coercionCost(type.returnType, target.returnType)
        assert returnCost !== null
        cost += returnCost.second
        return Pair<Type, Int>(type, cost)
    }

    @class
    method compile(compiler:Compiler, position:Position, kind:MethodDecl.Kind,
            rawParameters:FixedArray<ASTNode>, rawReturnType:ASTNode?,
            body:FixedArray<ASTNode>, type:TypeContext):IR.Value? {
        compiler.closureCount += 1
        def name := "$anonymous\{compiler.closureCount}"
        def parameters := Array<MethodDecl.Parameter>()
        for p in rawParameters {
            match p {
                when ASTNode.PARAMETER(_, name, type) {
                    def resolved := compiler.resolve(compiler.scanner.convertType(type))
                    if resolved == null {
                        return null
                    }
                    parameters.add(MethodDecl.Parameter(name, resolved))
                }
                otherwise {
                    unreachable
                }
            }
        }
        def returnType:Type
        if rawReturnType !== null {
            returnType := compiler.resolve(compiler.scanner.convertType(rawReturnType))
            if returnType == null {
                return null
            }
        }
        else {
            returnType := compiler.VOID_TYPE
            if kind = MethodDecl.Kind.FUNCTION {
                compiler.error(position, "functions must have a return type")
                return null
            }
        }
        def currentCaptures := Pair<MethodDecl, Map<String, Capture>>(compiler.currentMethod[0],
                HashMap<String, Capture>())
        compiler.captures.push(currentCaptures)
        def annotations := Annotations(Annotations.Flag.CLASS)
        def methodDecl := MethodDecl(compiler.currentClass[0], position, null, annotations, kind,
                name, null, parameters, returnType, body)
        -- need to scan through the method to determine captures, but we don't actually want to
        -- output it yet - if it has captures, we need to put it into a closure class
        def oldWriteCode := compiler.writeCode
        def oldReportErrors := compiler.reportErrors
        compiler.writeCode := false
        compiler.reportErrors := false
        def oldContexts := compiler.enclosingContexts
        compiler.enclosingContexts := Stack<EnclosingContext>()
        compiler.compile(methodDecl, compiler.symbolTable)
        compiler.enclosingContexts := oldContexts
        compiler.writeCode := oldWriteCode
        compiler.reportErrors := oldReportErrors

        def immutable:Bit
        def target:ASTNode?
        if currentCaptures.second.count != 0 {
            -- we have captures, need to build an actual closure for it
            def cl := createClosureClass(compiler, methodDecl, currentCaptures.second.values.all())
            def args := Array<ASTNode>()
            for capture in currentCaptures.second.values {
                match capture {
                    when Capture.VARIABLE(v) {
                        args.add(ASTNode.IDENTIFIER(position, v.name))
                    }
                    when Capture.SELF {
                        args.add(ASTNode.SELF(position))
                    }
                    when Capture.FIELD(f) {
                        args.add(ASTNode.DOT(position,
                                ASTNode.IDENTIFIER(position, Compiler.FORCE_SELF_NAME),
                                f.name))
                    }
                }
            }
            compiler.captures.pop()
            compiler.pendingClasses.add(cl)
            def rawTarget := Call.compile(compiler, position, compiler.literalType(cl.type),
                    FixedArray<ASTNode>.from(args), TypeContext.UNSPECIFIED)
            if rawTarget == null {
                return null
            }
            target := ASTNode.IR_WRAPPER(position, rawTarget)
            immutable := compiler.isImmutable(cl.type)
        }
        else {
            -- no captures, method is already good
            compiler.captures.pop()
            compiler.enclosingContexts := Stack<EnclosingContext>()
            compiler.compile(methodDecl, compiler.symbolTable)
            compiler.enclosingContexts := oldContexts
            target := ASTNode.NULL(position)
            immutable := true
        }
        def args := Array<ASTNode>()
        def frostType:Type
        if methodDecl.annotations.isClass {
            frostType := methodDecl.type(compiler)
        }
        else {
            frostType := compiler.declaredTypeWithSelf(methodDecl, methodDecl.owner.type, false)
        }
        def irType := Type.pointerTo(compiler, frostType)
        args.add(ASTNode.IR_WRAPPER(position, compiler.cast(position,
                IR.Value.METHOD_POINTER(methodDecl, irType), Type.pointerTo(compiler,
                    compiler.INT8_TYPE))))
        args.add(target)
        def methodType:Type
        def finalType:Type
        if immutable {
            methodType := compiler.METHOD_TYPE
            finalType := methodDecl.type(compiler)
        }
        else {
            methodType := compiler.MUTABLE_METHOD_TYPE
            def rawType := methodDecl.type(compiler)
            def parameterTypes := Array<Type>()
            for i in 0 .. rawType.subtypes.count - 1 {
                parameterTypes.add(rawType.parameterType(i))
            }
            def typeKind:Type.Kind
            match methodDecl.methodKind {
                when MethodDecl.Kind.METHOD { typeKind := Type.Kind.METHOD }
                when MethodDecl.Kind.FUNCTION { typeKind := Type.Kind.FUNCTION }
                otherwise { unreachable }
            }
            finalType := Type.methodType(compiler, position, typeKind, parameterTypes,
                    rawType.returnType, rawType.priority)
        }
        def construct := compiler.cast(position, Call.compile(compiler, position,
                compiler.literalType(methodType), args, TypeContext.UNSPECIFIED), finalType)
        return compiler.coerce(position, construct, type)
    }
}