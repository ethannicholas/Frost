package org.frostlang.frostc.expression

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.ClassDecl
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.FixedArray
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Symbol
uses org.frostlang.frostc.Type

class Dot {
    @class
    method dotTypes(compiler:Compiler, base:Type, name:String):Array<Type>? {
        return dotTypes(compiler, base, name, null)
    }

    @class
    method dotTypes(compiler:Compiler, base:Type, name:String,
            genericArguments:FixedArray<ASTNode>?):Array<Type>? {
        if base.isClass {
            def cl:ClassDecl?
            def isClass := base.isClassLiteral
            if isClass {
                -- class literal, grab the class itself rather than frost.core.Class
                cl := compiler.getClass(base.subtypes[1])
            }
            else {
                cl := compiler.getClass(base)
            }
            if cl == null {
                return null
            }
            def symbol := compiler.getSymbolTable(cl)[name]
            if symbol == null {
                return null
            }
            return compiler.symbolType(base, symbol, genericArguments)
        }
        return null
    }

    @class
    method compile(compiler:Compiler, position:MethodPosition, target:IR.Value,
            name:String):IR.Value? {
        def cl := compiler.getClass(target.type())
        if cl == null {
            return null
        }
        def symbol := compiler.getSymbolTable(cl)[name]
        if symbol == null | symbol.kind = Symbol.Kind.ALIAS {
            var type := target.type().nonnullable()
            if type.isClassLiteral {
                type := type.subtypes[1]
            }
            compiler.error(position, "class '\{type}' does not have a member named '\{name}'")
            return null
        }
        return compiler.symbolRef(position, target, symbol)
    }

    @class
    method compile(compiler:Compiler, position:MethodPosition, base:ASTNode,
            name:String):IR.Value? {
        match base {
            when ASTNode.GENERIC_TYPE {
                def resolved := compiler.resolve(compiler.scanner.convertType(base))
                if resolved == null {
                    return null
                }
                return compile(compiler, position, compiler.literalType(resolved), name)
            }
        }
        def compiledBase := compiler.compileExpression(base)
        if compiledBase == null {
            return null
        }
        return compile(compiler, position, compiledBase, name)
    }
}