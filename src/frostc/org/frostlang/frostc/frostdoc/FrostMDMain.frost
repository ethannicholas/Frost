package org.frostlang.frostc.frostdoc

uses org.frostlang.frostc.ClassDecl
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.Message
uses org.frostlang.frostc.Compiler.Settings
uses org.frostlang.frostc.Config
uses org.frostlang.frostc.MethodDecl

constant HEADER :=
    "<html>" +
    "  <head>\n" +
    "    <link rel=\"stylesheet\" type=\"text/css\" href=\"frost-main.css\" />\n" +
    "    <link rel=\"stylesheet\" type=\"text/css\" href=\"frostdoc.css\" />\n" +
    "    <link rel=\"stylesheet\" type=\"text/css\" href=\"frostcode-monokai.css\" />\n" +
    "  </head>\n" +
    "  <body>\n" +
    "    <div id=\"main\">" +
    "      <!--TOCBEGIN--><!--TOCEND-->" +
    "      <div id=\"content\">"

constant FOOTER :=
    "      </div>" +
    "    </div>" +
    "  </body>" +
    "</html>"

method main(args:ListView<String>) {
    try {
        if args.count != 5 {
            Console.errorStream().printLine("usage: frostmd <doc root> <test root> <input.md> <output.html>")
            System.exit(1)
        }
        def docPath := File(args[1])
        def testPath := File(args[2])
        def input := File(args[3])
        def output := File(args[4])
        output.parent().createDirectories()
        def imports := Array<File>() -- FIXME literal
        imports.add(File(Config.frostSourceDir()))
        def settings := Settings(File(Config.frostSourceDir()), imports, 0, 0, 8, true, false)
        def compiler := Compiler(MessageQueue<Message>(), DummyBackend(), settings)
        def resolver := LinkResolver(compiler, docPath,
                LinkResolver.Context.API_PATH("api/", input)).resolve
        output.write(HEADER + Markdown(testPath.resolve("generators"), testPath.resolve("tests"),
                resolver).process(input.readFully()) + FOOTER)
    }
    fail(error) {
        Console.printLine("error: \{error}")
        System.exit(1)
    }
}
