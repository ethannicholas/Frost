package org.frostlang.frostc.frostdoc

uses org.frostlang.frostc.Backend
uses org.frostlang.frostc.ClassDecl
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.Message
uses org.frostlang.frostc.Compiler.Settings
uses org.frostlang.frostc.Config
uses org.frostlang.frostc.MethodDecl

method process(input:File, frostdoc:FrostDoc):Error? {
    try {
        if input.isDirectory() {
            for file in input.list() {
                process(file, frostdoc)
            }
        }
        else if input.path.endsWith(".frost") {
            for cl in frostdoc.compiler.scan(input) {
                frostdoc.add(cl)
            }
        }
        return null
    }
    fail(error) {
        return error
    }
}

method recursiveDelete(root:File, currentPath:File):Error? {
    try {
        if currentPath.isDirectory() {
            for f in currentPath.list() {
                recursiveDelete(root, f)
            }
        }
        -- deleting a directory tree on an end user's machine is scary, so let's be extra careful...
        if !currentPath.absolute().path.startsWith(root.absolute().path) {
            Console.printErrorLine("Panicking! Recursive delete stepped outside of the expected " +
                    "path tree! (was deleting \{root}, ended up looking at \{currentPath})")
            System.exit(1)
        }
        currentPath.delete()
        return null
    }
    fail(error) {
        return error
    }
}

method xsltproc(input:File, xsl:File, output:File):Error? {
    try {
        if input.isDirectory() {
            for file in input.list() {
                xsltproc(file, xsl, output.resolve(file.name))
            }
        }
        else if input.path.endsWith(".xml") {
            def args := Array<String>() -- FIXME literal
            args.add(xsl.path)
            args.add(input.path)
            def p := System.exec("xsltproc", args)
            output.parent.createDirectories()
            p.standardOutput().sendTo(output.withExtension(".html").openOutputStream())
            p.standardError().sendTo(Console.errorStream())
            assert p.waitFor() = 0
        }
        return null
    }
    fail(error) {
        return error
    }
}

method addTableOfContentsToTree(toc:String, path:File, level:Int):Error? {
    try {
        if path.isDirectory() {
            for file in path.list() {
                addTableOfContentsToTree(toc, file, level + 1)
            }
        }
        else if path.name.endsWith(".html") {
            def root := level * "../"
            def finalToc := toc.replace("href=\"", "href=\"\{root}")
                    .replace("src=\"", "src=\"\{root}")
                    .replace("prepareToC(\"", "prepareToC(\"\{root}")
            path.write(path.readFully().replace(/<!--TOCBEGIN-->.*<!--TOCEND-->/,
                    "<!--TOCBEGIN-->\{finalToc}<!--TOCEND-->"))
        }
        return null
    }
    fail(error) {
        return error
    }
}

method addTableOfContents(tocFile:File, tree:File, apiRelativePath:String):Error? {
    try {
        def args := Array<String>() -- FIXME literal
        args.add(File(Config.frostSourceDir()).resolve("tools/tableOfContents.xsl").path)
        args.add(tocFile.path)
        def p := System.exec("xsltproc", args)
        addTableOfContentsToTree(p.standardOutput().readFully(), tree, -1)
        return null
    }
    fail(error) {
        return error
    }
}

method main(args:ListView<String>) {
    try {
        if args.count != 6 {
            Console.printErrorLine("usage: frostdoc <source dir> <root dir> <api dir> <test path>" +
                    " <doc path>")
            System.exit(1)
        }
        def input := File(args[1])
        def root := File(args[2])
        def apiRelativePath := args[3] + "/"
        def testPath := File(args[4])
        def docPath := File(args[5])
        def tmpOutput := System.temporaryDirectory().resolve("frostdoc-tmp")
        def tocFile := System.temporaryDirectory().resolve("frostdoc-toc.xml")
        def imports := Array<File>() -- FIXME literal
        imports.add(File(Config.frostSourceDir()))
        imports.add(input)
        def settings := Settings(File(Config.frostSourceDir()), imports, 0, 0, 8, true)
        def compiler := Compiler(MessageQueue<Message>(), DummyBackend(), settings)
        def frostdoc := FrostDoc(compiler, tmpOutput, tocFile, testPath, docPath, apiRelativePath)
        process(input, frostdoc)
        frostdoc.finish()
        def mainXSL := File(Config.frostSourceDir()).resolve("tools/frostdoc.xsl")
        xsltproc(tmpOutput, mainXSL, root.resolve(apiRelativePath))
        for file in File(Config.frostSourceDir()).resolve("../docs/html").list() {
            file.openInputStream().sendTo(root.resolve(file.name).openOutputStream())
        }
        recursiveDelete(tmpOutput.absolute(), tmpOutput.absolute())
        addTableOfContents(tocFile, root, apiRelativePath)
        tocFile.delete()
    }
    fail(error) {
        Console.printErrorLine(error)
        System.exit(1)
    }
}
