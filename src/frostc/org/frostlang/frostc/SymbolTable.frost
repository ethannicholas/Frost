package org.frostlang.frostc

class SymbolTable {
    def symbols := HashMap<String, Symbol>()

    @weak
    def compiler:Compiler

    @private
    def merged := HashMap<String, Symbol>()

    def parents := Array<SymbolTable>()

    init(compiler:Compiler) {
        self.compiler := compiler
    }

    init(parent:SymbolTable) {
        self.compiler := parent.compiler
        self.parents.add(parent)
    }

    method add(s:Symbol) {
        add(s, s.name)
    }

    method add(s:Symbol, name:String) {
        merged.remove(name)
        def old := symbols[name]
        if old == null {
            symbols[name] := s
            return
        }
        if s.kind = Symbol.Kind.METHOD {
            match old.kind {
                when Symbol.Kind.METHOD {
                    def methods := Array<MethodDecl>()
                    methods.add(s->MethodDecl)
                    methods.add(old->MethodDecl)
                    symbols[name] := Methods(methods)
                    return
                }
                when Symbol.Kind.METHODS {
                    def methods := Array<MethodDecl>()
                    methods.add(s->MethodDecl)
                    methods.addAll(old->Methods.methods)
                    symbols[name] := Methods(methods)
                    return
                }
            }
        }
        compiler.error(s.position, "duplicate symbol '\{name}' (previous declaration was at " +
                old.position + ")")
    }

    @private
    method addIfNotOverridden(m:MethodDecl, methods:List<MethodDecl>) {
        if !m.get_heritable() {
            return
        }
        for test in methods {
            def overridden := compiler.getOverriddenMethod(test)
            if overridden == m {
                return
            }
            if m.annotations.isDefault & test.signature = m.signature {
                return
            }
        }
        methods.add(m)
    }

    @private
    function merge(symbol:Symbol?, inherited:Symbol?):Symbol? {
        if inherited == null {
            return symbol
        }
        if symbol == null {
            return inherited
        }
        if symbol == inherited {
            return symbol
        }
        if !inherited.get_heritable() {
            return symbol
        }
        match symbol.kind {
            when Symbol.Kind.METHOD {
                match inherited.kind {
                    when Symbol.Kind.METHODS {
                        def methods := Array<MethodDecl>() -- FIXME literal
                        methods.add(symbol->MethodDecl)
                        for m in (inherited->Methods).methods {
                            addIfNotOverridden(m, methods)
                        }
                        return Methods(methods)
                    }
                    when Symbol.Kind.METHOD {
                        def overridden1 := compiler.getOverriddenMethod(inherited->MethodDecl)
                        def overridden2 := compiler.getOverriddenMethod(symbol->MethodDecl)
                        if  overridden1 == symbol->MethodDecl |
                                overridden2 == inherited->MethodDecl |
                                (overridden1 !== null & overridden1 == overridden2) {
                            return symbol
                        }
                        if inherited->MethodDecl.annotations.isDefault &
                                inherited->MethodDecl.signature = symbol->MethodDecl.signature {
                            return symbol
                        }
                        def methods := Array<MethodDecl>() -- FIXME literal
                        methods.add(symbol->MethodDecl)
                        methods.add(inherited->MethodDecl)
                        return Methods(methods)
                    }
                    otherwise {
                        return symbol
                    }
                }
            }
            when Symbol.Kind.METHODS {
                match inherited.kind {
                    when Symbol.Kind.METHODS {
                        def methods := Array<MethodDecl>(symbol->Methods.methods)
                        for m in (inherited->Methods).methods {
                            addIfNotOverridden(m, methods)
                        }
                        return Methods(methods)
                    }
                    when Symbol.Kind.METHOD {
                        def methods := Array<MethodDecl>(symbol->Methods.methods)
                        addIfNotOverridden(inherited->MethodDecl, methods)
                        return Methods(methods)
                    }
                    otherwise {
                        return symbol
                    }
                }
            }
            otherwise {
                return symbol
            }
        }
    }

    function [](name:String):Symbol? {
        var result := merged[name]
        if result == null {
            result := symbols[name]
            for p in parents {
                result := merge(result, p[name])
            }
            if result !== null {
                merged[name] := result
            }
        }
        return result
    }

    @override
    function get_toString():String {
        return "SymbolTable<parents(\{parents.count}), symbols=\{symbols}>"
    }
}