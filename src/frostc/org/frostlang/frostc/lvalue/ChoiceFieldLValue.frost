package org.frostlang.frostc.lvalue

uses org.frostlang.frostc.ChoiceCase
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Type

class ChoiceFieldLValue : LValue {
    def compiler:Compiler

    def position:MethodPosition

    def target:IR.Value

    def choiceCase:ChoiceCase

    def index:Int

    @pre(target.type = choiceCase.owner.type)
    init(compiler:Compiler, position:MethodPosition, target:IR.Value, choiceCase:ChoiceCase,
            index:Int) {
        self.compiler := compiler
        self.target := target
        self.choiceCase := choiceCase
        self.index := index
    }

    @override
    function type():Type {
        return choiceCase.fields[index]
    }

    @override
    method compileLoad():IR.Value? {
        unreachable
    }

    @override
    method compileStore(value:IR.Value, explicit:Bit) {
        if compiler.isRefCounted(type()) {
            compiler.compileRef(value)
        }
        def ptr := compiler.ir.add(IR.Statement.GET_CHOICE_FIELD_POINTER(position, target,
                choiceCase, index))
        compiler.ir.add(IR.Statement.STORE(position, value, IR.Value.REF(ptr,
                choiceCase.fields[index]), explicit))
    }
}
