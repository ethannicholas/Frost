package org.frostlang.frostc.lvalue

uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.Variable

class VariableLValue : LValue {
    def compiler:Compiler

    def position:MethodPosition

    def slot:Int

    init(compiler:Compiler, position:MethodPosition, variable:Variable) {
        self.compiler := compiler
        match variable.storage {
            when Variable.Storage.LOCAL(slot) {
                self.slot := slot
            }
            otherwise {
                unreachable, "trying to store into non-local variable \{variable} at \{position}"
            }
        }
        self.position := position
    }

    @override
    function type():Type {
        return compiler.ir.locals[slot]
    }

    @override
    method compileLoad():IR.Value? {
        def result := compiler.ir.add(IR.Statement.LOAD(position, IR.Value.LOCAL(slot, type())))
        return IR.Value.REF(result, compiler.ir.locals[slot])
    }

    @override
    method compileStore(value:IR.Value) {
        if compiler.isRefCounted(type()) {
            compiler.compileRef(value)
            compiler.compileUnref(compileLoad())
        }
        compiler.ir.add(IR.Statement.STORE(position, value, IR.Value.LOCAL(slot, type())))
    }
}