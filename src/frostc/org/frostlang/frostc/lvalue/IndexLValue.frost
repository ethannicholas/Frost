package org.frostlang.frostc.lvalue

uses org.frostlang.frostc.ASTNode
uses org.frostlang.frostc.Compiler
uses org.frostlang.frostc.Compiler.TypeContext
uses org.frostlang.frostc.IR
uses org.frostlang.frostc.MethodDecl
uses org.frostlang.frostc.MethodPosition
uses org.frostlang.frostc.Methods
uses org.frostlang.frostc.Symbol
uses org.frostlang.frostc.Type
uses org.frostlang.frostc.expression.Binary
uses org.frostlang.frostc.expression.Call
uses org.frostlang.frostc.parser.Token

class IndexLValue : LValue {
    def compiler:Compiler

    def position:MethodPosition

    def target:IR.Value

    def rawIndex:ASTNode

    -- it's important that we don't compile the index twice, so we store it the first time it
    -- gets compiled and re-use that for the other call
    var index:IR.Value?

    init(compiler:Compiler, position:MethodPosition, target:IR.Value, rawIndex:ASTNode) {
        self.compiler := compiler
        self.position := position
        self.target := target
        self.rawIndex := rawIndex
    }

    @override
    function type():Type {
        def types := compiler.possibleTypes(ASTNode.BINARY(position.asPosition,
                ASTNode.IR_WRAPPER(position.asPosition, target), Binary.Operator.INDEX, rawIndex))
        if types == null {
            return compiler.ANY_TYPE
        }
        assert types.count = 1 -- FIXME handle ambiguous matches
        return types.iterator.next()
    }

    @override
    method compileLoad():IR.Value? {
        if index == null {
            def m := Binary.findOverloadedOperator(compiler, target.type, Binary.Operator.INDEX,
                    rawIndex, TypeContext.NON_VOID)
            if m !== null {
                assert m[0].count = 1 -- FIXME handle ambiguous matches
                index := compiler.compileExpression(rawIndex,
                        TypeContext.TYPE(m[0][0].parameterType(0), false))
            }
        }
        if index == null {
            index := IR.Value.REF(IR.Statement.ID(-1), type())
            return null
        }
        return Binary.compile(compiler, position, ASTNode.IR_WRAPPER(position.asPosition, target),
                Binary.Operator.INDEX, ASTNode.IR_WRAPPER(position.asPosition, index),
                TypeContext.NON_VOID)
    }

    @override
    method compileStore(value:IR.Value, explicit:Bit) {
        if index == null {
            def cl := compiler.getClass(target.type)
            if cl == null {
                return
            }
            def assignment := compiler.getSymbolTable(cl)["[]:="]
            if assignment == null {
                compiler.error(position, "no match for '[]:=' on '\{target.type}', " +
                        "'\{value.type}'")
                return
            }
            def methods:ListView<MethodDecl>
            match assignment.kind {
                when Symbol.Kind.METHOD {
                    methods := Array<MethodDecl>()
                    methods->Array<MethodDecl>.add(assignment->MethodDecl)
                }
                when Symbol.Kind.METHODS {
                    methods := assignment->Methods.methods
                }
                otherwise {
                    unreachable
                }
            }
            def args := Array<ASTNode>()
            args.add(rawIndex)
            args.add(ASTNode.IR_WRAPPER(position.asPosition, value))
            def m := Call.findBestMethod(compiler, position, target, methods, args,
                    TypeContext.UNSPECIFIED)
            if m !== null {
                assert m[0].count = 1 -- FIXME handle ambiguous matches
                index := compiler.compileExpression(rawIndex,
                        TypeContext.TYPE(m[0][0].parameterType(0), false))
            }
            if index == null {
                -- just to get us through to where the error should occur down below at call
                index := IR.Value.REF(IR.Statement.ID(-1), type())
            }
        }
        def args := Array<ASTNode>()
        args.add(ASTNode.IR_WRAPPER(position.asPosition, index))
        args.add(ASTNode.IR_WRAPPER(position.asPosition, value))
        Call.compile(compiler, position, target, "[]:=", args, TypeContext.UNSPECIFIED)
    }
}
