------------------------------------------------------------------
-- This file was autogenerated by 'writeNumbers', do not modify --
------------------------------------------------------------------

package org.frostlang.frost

@final
class Int64List : ListView<Int64> {
    @private
    def range:SteppedRange<Int64, Int64>

    @private
    def _count:Int

    init(range:SteppedRange<Int64, Int64>) {
        self.range := range
        self._count := computeCount(range)
    }

    @class
    function computeCount(range:SteppedRange<Int64, Int64>):Int {
        if range.inclusive {
            if range.step > 0 {
                if range.end < range.start {
                    return 0
                }
            } else if range.end > range.start {
                return 0
            }
            return (((range.end - range.start) // range.step).max(0) + 1).asInt
        }
        else {
            def offset:Int64
            if range.step > 0 {
                if range.end <= range.start {
                    return 0
                }
                offset := -1
            } else {
                if range.end >= range.start {
                    return 0
                }
                offset := 1
            }
            return (((range.end - range.start + offset) // range.step).max(0) + 1).asInt
        }
    }

    @override
    function get_count():Int {
        return _count
    }

    @override
    function [](index:Int):Int64 {
        return (range.start + range.step * index.asInt64)
    }

    @override
    function get_asString():String {
        return "[\{join(", ")}]"
    }
}
