choice Kind {
    NORMAL
    EQUATABLE
    KEY
}

method writeTuple(count:Int, kind:Kind, path:File) {
    try {
        def out := path.openOutputStream()
        out.printLine("package frost.core")
        def name:String
        match kind {
            when Kind.NORMAL    { name := "Tuple\{count}" }
            when Kind.EQUATABLE { name := "EquatableTuple\{count}" }
            when Kind.KEY       { name := "KeyTuple\{count}" }
        }
        out.print("class \{name}<")
        for i in Int(0) .. count {
            if i > 0 {
                out.print(", ")
            }
            out.print("T\{i}")
            match kind {
                when Kind.EQUATABLE { out.print(":Equatable<T\{i}>")}
                when Kind.KEY { out.print(":Key<T\{i}>")}
            }
        }
        out.print(">")
        def types := "<" + Int[0 .. count].map(i => "T\{i}").join(", ") + ">"
        match kind {
            when Kind.EQUATABLE {
                out.print(" : Equatable<\{name}\{types}>")
            }
            when Kind.KEY {
                out.print(" : Key<\{name}\{types}>")
            }
        }
        out.printLine(" {")
        for i in Int(0) .. count {
            out.printLine("    def f\{i}:T\{i}")
        }
        out.printLine()
        out.printLine("    init(\{Int[0 .. count].map(i => "f\{i}:T\{i}").join(", ")}) {")
        for i in Int(0) .. count {
            out.printLine("       self.f\{i} := f\{i}")
        }
        out.printLine("    }")
        out.printLine()
        out.printLine("    @pre(i >= 0 & i < \{count})")
        out.printLine("    function [](i:Int):Object? {")
        out.printLine("        match i {")
        for i in Int(0) .. count {
            out.printLine("            when \{i} { return f\{i} }")
        }
        out.printLine("        }")
        out.printLine("        return null")
        out.printLine("    }")
        out.printLine()
        match kind {
            when Kind.EQUATABLE, Kind.KEY {
                out.printLine("    @override")
                out.printLine("    function =(other:\{name}\{types}):Bit {")
                for i in Int(0) .. count {
                    out.printLine("        if f\{i} != other.f\{i} { return false }")
                }
                out.printLine("        return true")
                out.printLine("    }")
            }
        }
        if kind = Kind.KEY {
            out.printLine("    @override")
            out.printLine("    function get_hash():Int {")
            out.printLine("        var result := 0")
            for i in Int(0) .. count {
                out.printLine("        result ~~= f\{i}.hash")
            }
            out.printLine("        return result")
            out.printLine("    }")
        }
        out.printLine("    @override")
        out.printLine("    function get_asString():String {")
        out.printLine("        return \"(\{Int[0 .. count].map(i => "\\{f\{i}}").join(", ")})\"")
        out.printLine("    }")
        out.printLine("}")
    }
    fail(error) {
        Console.printErrorLine(error)
        System.exit(1)
    }
}

method main() {
    def corePath := File("../src/frost/core")
    for i:Int in 2 ... 16 {
        writeTuple(i, Kind.NORMAL,    corePath.resolve("Tuple\{i}.frost"))
        writeTuple(i, Kind.EQUATABLE, corePath.resolve("EquatableTuple\{i}.frost"))
        writeTuple(i, Kind.KEY,       corePath.resolve("KeyTuple\{i}.frost"))
    }
}
