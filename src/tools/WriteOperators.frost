====================================================================================================
Generates Operators.frost and an equivalent C program which is used to generate Operators.expected.
====================================================================================================
class WriteOperators {
    @class
    method writeFrostInt(name:String, type:String, x:Int, y:Int, out:IndentedOutputStream):Error? {
        try {
            out.printLine("@class")
            out.printLine("method \{name}() {")
            out.level += 1
            out.printLine("def x:\{type} := \{x}")
            out.printLine("def y:\{type} := \{y}")
            out.printLine("Console.printLine(\"\{name} Arithmetic\")")
            out.printLine("Console.printLine(x + y)")
            out.printLine("Console.printLine(x - y)")
            out.printLine("Console.printLine(x * y)")
            out.printLine("Console.printLine(x // y)")
            out.printLine("Console.printLine(x << 1)")
            out.printLine("Console.printLine(x >> 1)")
            out.printLine("Console.printLine()")
            out.printLine("Console.printLine(\"\{name} Bitwise\")")
            out.printLine("Console.printLine(!!x)")
            out.printLine("Console.printLine(x && y)")
            out.printLine("Console.printLine(x || y)")
            out.printLine("Console.printLine(x ~~ y)")
            out.printLine("Console.printLine()")
            out.printLine("Console.printLine(\"\{name} Comparisons\")")
            out.printLine("Console.printLine(x = y)")
            out.printLine("Console.printLine(x = x)")
            out.printLine("Console.printLine(x != y)")
            out.printLine("Console.printLine(x != x)")
            out.printLine("Console.printLine(x > x)")
            out.printLine("Console.printLine(x > y)")
            out.printLine("Console.printLine(y > x)")
            out.printLine("Console.printLine(x >= y)")
            out.printLine("Console.printLine(y >= x)")
            out.printLine("Console.printLine(x >= x)")
            out.printLine("Console.printLine(x < y)")
            out.printLine("Console.printLine(y < x)")
            out.printLine("Console.printLine(y < y)")
            out.printLine("Console.printLine(x <= y)")
            out.printLine("Console.printLine(y <= x)")
            out.printLine("Console.printLine(y <= y)")
            out.printLine("Console.printLine()")
            out.printLine("Console.printLine(\"\{name} Compound Assignment\")")
            out.printLine("x += y")
            out.printLine("Console.printLine(x)")
            out.printLine("x -= y")
            out.printLine("Console.printLine(x)")
            out.printLine("x *= y")
            out.printLine("Console.printLine(x)")
            out.printLine("x //= y")
            out.printLine("Console.printLine(x)")
            out.printLine("x <<= 1")
            out.printLine("Console.printLine(x)")
            out.printLine("x >>= 1")
            out.printLine("Console.printLine(x)")
            out.level -= 1
            out.printLine("}")
            return null
        }
        fail(error) {
            return error
        }
    }

    @class
    method writeFrost(out:OutputStream):Error? {
        try {
            def indented := IndentedOutputStream(out)
            indented.printLine("-- This file was autogenerated by WriteOperators.frost, do not " +
                    "modify")
            indented.printLine("class Operators {")
            indented.level += 1
            writeFrostInt("int8", "Int8", 9, 12, indented)
            writeFrostInt("int16", "Int16", 126, 519, indented)
            writeFrostInt("int32", "Int32", 88124, 65318, indented)
            writeFrostInt("int64", "Int64", 4000311441, 1991297512, indented)
            writeFrostInt("uint8", "UInt8", 16, 15, indented)
            writeFrostInt("uint16", "UInt16", 598, 87, indented)
            writeFrostInt("uint32", "UInt32", 124870, 6713, indented)
            writeFrostInt("uint64", "UInt64", 420032777, 81272990, indented)
            indented.printLine("@class")
            indented.printLine("method main() {")
            indented.level += 1
            indented.printLine("int8()")
            indented.printLine("Console.printLine()")
            indented.printLine("int16()")
            indented.printLine("Console.printLine()")
            indented.printLine("int32()")
            indented.printLine("Console.printLine()")
            indented.printLine("int64()")
            indented.printLine("Console.printLine()")
            indented.printLine("uint8()")
            indented.printLine("Console.printLine()")
            indented.printLine("uint16()")
            indented.printLine("Console.printLine()")
            indented.printLine("uint32()")
            indented.printLine("Console.printLine()")
            indented.printLine("uint64()")
            indented.level -= 1
            indented.printLine("}")
            indented.level -= 1
            indented.printLine("}")
            return null
        }
        fail(error) {
            return error
        }
    }

    @class
    method writeCInt(name:String, type:String, fmt:String, mask:String?, x:Int, y:Int,
            out:IndentedOutputStream):Error? {
        try {
            out.printLine("void \{name}(FILE* out) {")
            out.level += 1
            out.printLine("\{type} x = \{x};")
            out.printLine("\{type} y = \{y};")
            out.printLine("fprintf(out, \"\{name} Arithmetic\\n\");")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x + y);")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x - y);")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x * y);")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x / y);")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x << 1);")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x >> 1);")
            out.printLine("fprintf(out, \"\\n\");")
            out.printLine("fprintf(out, \"\{name} Bitwise\\n\");")
            if mask !== null {
                out.printLine("fprintf(out, \"\{fmt}\\n\", ~x & \{mask});")
            }
            else {
                out.printLine("fprintf(out, \"\{fmt}\\n\", ~x);")
            }
            out.printLine("fprintf(out, \"\{fmt}\\n\", x & y);")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x | y);")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x ^ y);")
            out.printLine("fprintf(out, \"\\n\");")
            out.printLine("fprintf(out, \"\{name} Comparisons\\n\");")
            out.printLine("fprintf(out, x == y ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, \"true\\n\");")
            out.printLine("fprintf(out, x != y ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, \"false\\n\");")
            out.printLine("fprintf(out, \"false\\n\");")
            out.printLine("fprintf(out, x > y ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, y > x ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, x >= y ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, y >= x ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, \"true\\n\");")
            out.printLine("fprintf(out, x < y ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, y < x ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, \"false\\n\");")
            out.printLine("fprintf(out, x <= y ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, y <= x ? \"true\\n\" : \"false\\n\");")
            out.printLine("fprintf(out, \"true\\n\");")
            out.printLine("fprintf(out, \"\\n\");")
            out.printLine("fprintf(out, \"\{name} Compound Assignment\\n\");")
            out.printLine("x += y;")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x);")
            out.printLine("x -= y;")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x);")
            out.printLine("x *= y;")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x);")
            out.printLine("x /= y;")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x);")
            out.printLine("x <<= 1;")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x);")
            out.printLine("x >>= 1;")
            out.printLine("fprintf(out, \"\{fmt}\\n\", x);")
            out.level -= 1
            out.printLine("}")
            return null
        }
        fail(error) {
            return error
        }
    }

    @class
    method writeC(out:OutputStream):Error? {
        try {
            def indented := IndentedOutputStream(out)
            indented.printLine("#include <inttypes.h>")
            indented.printLine("#include <stdio.h>")
            writeCInt("int8", "int8_t", "%d", null, 9, 12, indented)
            writeCInt("int16", "int16_t", "%d", null, 126, 519, indented)
            writeCInt("int32", "int32_t", "%d", null, 88124, 65318, indented)
            writeCInt("int64", "int64_t", "%\" PRId64 \"", null, 4000311441, 1991297512,
                    indented)
            writeCInt("uint8", "uint8_t", "%u", "0xFFu", 16, 15, indented)
            writeCInt("uint16", "uint16_t", "%u", "0xFFFFu", 598, 87, indented)
            writeCInt("uint32", "uint32_t", "%u", "0xFFFFFFFF", 124870, 6713, indented)
            writeCInt("uint64", "uint64_t", "%\" PRIu64 \"", "0xFFFFFFFFFFFFFFFFu", 420032777,
                    81272990, indented)
            indented.printLine("int main() {")
            indented.level += 1
            indented.printLine("FILE* out = fopen(\"../test/tests/Operators.expected\", \"w\");")
            indented.printLine("int8(out);")
            indented.printLine("fprintf(out, \"\\n\");")
            indented.printLine("int16(out);")
            indented.printLine("fprintf(out, \"\\n\");")
            indented.printLine("int32(out);")
            indented.printLine("fprintf(out, \"\\n\");")
            indented.printLine("int64(out);")
            indented.printLine("fprintf(out, \"\\n\");")
            indented.printLine("uint8(out);")
            indented.printLine("fprintf(out, \"\\n\");")
            indented.printLine("uint16(out);")
            indented.printLine("fprintf(out, \"\\n\");")
            indented.printLine("uint32(out);")
            indented.printLine("fprintf(out, \"\\n\");")
            indented.printLine("uint64(out);")
            indented.printLine("fclose(out);")
            indented.printLine("return 0;")
            indented.level -= 1
            indented.printLine("}")
            return null
        }
        fail(error) {
            return error
        }
    }

    @class
    method main() {
        try {
            writeFrost(File("../test/tests/Operators.frost").openOutputStream())
            writeC(File("Operators.c").openOutputStream())
        }
        fail(error) {
            Console.printErrorLine(error)
            System.exit(1)
        }
    }
}