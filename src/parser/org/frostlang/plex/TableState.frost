package org.frostlang.plex

class TableState : State {
    def inverse:Bit
    def acceptStates:ImmutableArray<Bit>

    init(inverse:Bit, acceptStates:ImmutableArray<Bit>, next:ListView<Int>) {
        super.init(TABLE, ImmutableArray<Int>(next))
        self.inverse := inverse
        self.acceptStates := acceptStates
    }

    @override
    function accept(c:Char8):Bit {
        def i := c.asInt
        def value:Bit
        if i < acceptStates.count {
            value := acceptStates[i]
        }
        else {
            value := false
        }
        return value ~ inverse
    }

    @override
    function get_toString():String {
        def result := MutableString()
        result.append("Table(")
        result.append(inverse)
        result.append(", [")
        var separator := ""
        for a in acceptStates {
            result.append(separator)
            result.append(a)
            separator := ", "
        }
        result.append("]")
        for n in next {
            result.append(", ")
            result.append(n)
        }
        result.append(")")
        return result.finish()
    }
}
