package org.frostlang.plex

class Plus : Node {
    def contents:Node

    init(contents:Node) {
        super.init(PLUS)
        self.contents := contents
    }

    @override
    method makeStartStates(context:NFA, accept:ListView<Int>):Array<Int> {
        -- a lot of ugliness has crept in here over time, largely due to
        -- having to work around the immutability of various objects when these
        -- objects were not originally built as immutable and I didn't want to
        -- have to completely rewrite everything. Probably should have.
        def next := Array<Int>()
        for state in accept {
            next.add(state)
        }
        def dummy := RemappedState()
        def index := context.addState(dummy)
        next.add(index)
        def start := contents.makeStartStates(context, next)
        def remapped := RemappedState(ImmutableArray<Int>(start))
        def newStates := Array<State>(context.states[0 .. index])
        newStates.add(remapped)
        newStates.addAll(Array<State>(context.states[index + 1..]))
        context.states := ImmutableArray<State>(newStates)
        return start
    }

    @override
    function get_toString():String {
        return contents + "+"
    }
}
