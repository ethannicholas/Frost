#pragma once

#include "Position.h"
#include "Util.h"

struct Token {
    enum class Kind {
        END_OF_FILE,
        DECIMAL,
        BINARY,
        HEX,
        FLOAT,
        SINGLE_QUOTE,
        DOUBLE_QUOTE,
        LINE_COMMENT,
        BLOCK_COMMENT,
        BLOCK_COMMENT_END,
        DOC_COMMENT,
        PACKAGE,
        USES,
        AS,
        CLASS,
        INTERFACE,
        CHOICE,
        FUNCTION,
        METHOD,
        INIT,
        VAR,
        DEF,
        PROPERTY,
        CONSTANT,
        RETURN,
        BREAK,
        CONTINUE,
        DO,
        WHILE,
        FOR,
        BY,
        IN,
        LOOP,
        IF,
        ELSE,
        TRUE_LITERAL,
        FALSE_LITERAL,
        NULL_LITERAL,
        NEW,
        ASSERT,
        UNREACHABLE,
        MATCH,
        WHEN,
        DEFAULT,
        SELF,
        SUPER,
        PRE,
        UNDERSCORE,
        NOT,
        BITWISENOT,
        ADD,
        SUB,
        MUL,
        DIV,
        INTDIV,
        REM,
        POW,
        EQ,
        NEQ,
        IDENTITY,
        NIDENTITY,
        LT,
        GT,
        LTEQ,
        GTEQ,
        AND,
        BITWISEAND,
        OR,
        BITWISEOR,
        XOR,
        BITWISEXOR,
        SHIFTLEFT,
        ASSIGNMENT,
        ADDEQ,
        SUBEQ,
        MULEQ,
        DIVEQ,
        REMEQ,
        INTDIVEQ,
        OREQ,
        BITWISEOREQ,
        ANDEQ,
        BITWISEANDEQ,
        XOREQ,
        BITWISEXOREQ,
        SHIFTLEFTEQ,
        SHIFTRIGHTEQ,
        POWEQ,
        CAST,
        INSTANCEOF,
        NINSTANCEOF,
        YIELDS,
        YIELDS_METHOD,
        YIELDS_IMMUTABLE,
        YIELDS_METHOD_IMMUTABLE,
        QUESTION,
        COLON,
        DOTDOT,
        ELLIPSIS,
        DOT,
        LBRACE,
        RBRACE,
        LBRACKET,
        RBRACKET,
        LPAREN,
        RPAREN,
        COMMA,
        IDENTIFIER,
        ANNOTATION,
        BACKSLASH,
        WHITESPACE,
        INVALID
    };

    Token()
    : fKind(Kind::INVALID) {}

    Token(Position position, Kind kind, const String& text)
    : fPosition(position)
    , fKind(kind)
    , fText(text) {}

    Position fPosition;
    Kind fKind;
    String fText;
};