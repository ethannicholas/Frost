#pragma once
#include "frost_c.h"
#include "Compiler_types.h"
typedef struct org$frostlang$frostc$Compiler org$frostlang$frostc$Compiler;
typedef struct frost$threads$MessageQueue frost$threads$MessageQueue;
typedef struct org$frostlang$frostc$CodeGenerator org$frostlang$frostc$CodeGenerator;
typedef struct org$frostlang$frostc$Compiler$Settings org$frostlang$frostc$Compiler$Settings;
typedef struct frost$core$String frost$core$String;
#include "frost/core/Bit_types.h"
typedef struct org$frostlang$frostc$Type org$frostlang$frostc$Type;
typedef struct org$frostlang$frostc$ClassDecl org$frostlang$frostc$ClassDecl;
typedef struct frost$collections$ListView frost$collections$ListView;
#include "org/frostlang/frostc/Position_types.h"
typedef struct frost$collections$HashSet frost$collections$HashSet;
typedef struct org$frostlang$frostc$MethodDecl org$frostlang$frostc$MethodDecl;
typedef struct org$frostlang$frostc$FieldDecl org$frostlang$frostc$FieldDecl;
typedef struct org$frostlang$frostc$ChoiceCase org$frostlang$frostc$ChoiceCase;
typedef struct frost$io$File frost$io$File;
typedef struct org$frostlang$frostc$SymbolTable org$frostlang$frostc$SymbolTable;
typedef struct org$frostlang$frostc$ASTNode org$frostlang$frostc$ASTNode;
#include "frost/core/Int_types.h"
typedef struct org$frostlang$frostc$Pair org$frostlang$frostc$Pair;
typedef struct org$frostlang$frostc$Compiler$TypeContext org$frostlang$frostc$Compiler$TypeContext;
typedef struct frost$collections$CollectionView frost$collections$CollectionView;
typedef struct org$frostlang$frostc$Symbol org$frostlang$frostc$Symbol;
#include "frost/core/Char32_types.h"
#include "org/frostlang/frostc/expression/Binary/Operator_types.h"
typedef struct org$frostlang$frostc$FixedArray org$frostlang$frostc$FixedArray;
typedef struct org$frostlang$frostc$IR$Value org$frostlang$frostc$IR$Value;
typedef struct org$frostlang$frostc$Annotations org$frostlang$frostc$Annotations;
typedef struct org$frostlang$frostc$Variable org$frostlang$frostc$Variable;
typedef struct org$frostlang$frostc$MethodRef org$frostlang$frostc$MethodRef;
#include "frost/core/Real64_types.h"
#include "org/frostlang/frostc/IR/Block/ID_types.h"
typedef struct org$frostlang$frostc$Compiler$EnclosingContext org$frostlang$frostc$Compiler$EnclosingContext;
typedef struct org$frostlang$frostc$Compiler$Target org$frostlang$frostc$Compiler$Target;
#include "org/frostlang/frostc/Variable/Kind_types.h"
typedef struct frost$collections$Array frost$collections$Array;
typedef struct org$frostlang$frostc$IR org$frostlang$frostc$IR;
typedef struct org$frostlang$frostc$pass$Analyzer org$frostlang$frostc$pass$Analyzer;

void org$frostlang$frostc$Compiler$init$frost$threads$MessageQueue$LTorg$frostlang$frostc$Compiler$Message$GT$org$frostlang$frostc$CodeGenerator$org$frostlang$frostc$Compiler$Settings(org$frostlang$frostc$Compiler* self, frost$threads$MessageQueue* p_errorQueue, org$frostlang$frostc$CodeGenerator* p_codeGenerator, org$frostlang$frostc$Compiler$Settings* p_settings);
void org$frostlang$frostc$Compiler$addAlias$frost$core$String(org$frostlang$frostc$Compiler* self, frost$core$String* p_name);
frost$core$Bit org$frostlang$frostc$Compiler$isRefCounted$org$frostlang$frostc$Type$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type);
org$frostlang$frostc$ClassDecl* org$frostlang$frostc$Compiler$tryResolveClass$frost$core$String$R$org$frostlang$frostc$ClassDecl$Q(org$frostlang$frostc$Compiler* self, frost$core$String* p_name);
frost$collections$ListView* org$frostlang$frostc$Compiler$typeParameters$org$frostlang$frostc$Type$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type);
frost$core$Bit org$frostlang$frostc$Compiler$checkGenericArguments$org$frostlang$frostc$Position$org$frostlang$frostc$ClassDecl$org$frostlang$frostc$Type$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$ClassDecl* p_cl, org$frostlang$frostc$Type* p_type);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$resolve$org$frostlang$frostc$Type$frost$core$Bit$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type, frost$core$Bit p_checkArguments);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$resolve$org$frostlang$frostc$Type$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type);
void org$frostlang$frostc$Compiler$addAllSupertypes$org$frostlang$frostc$ClassDecl$frost$collections$HashSet$LTfrost$core$String$GT(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl, frost$collections$HashSet* p_set);
void org$frostlang$frostc$Compiler$createChoiceEqualsIfNeeded$org$frostlang$frostc$ClassDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$choiceSuper$org$frostlang$frostc$ClassDecl$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlang$frostc$Compiler$resolve$org$frostlang$frostc$ClassDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlang$frostc$Compiler$resolve$org$frostlang$frostc$MethodDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
void org$frostlang$frostc$Compiler$determineRawType$org$frostlang$frostc$FieldDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$FieldDecl* p_f);
frost$core$Bit org$frostlang$frostc$Compiler$resolve$org$frostlang$frostc$FieldDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$FieldDecl* p_f);
void org$frostlang$frostc$Compiler$resolve$org$frostlang$frostc$ChoiceCase(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ChoiceCase* p_c);
frost$core$Bit org$frostlang$frostc$Compiler$isValue$org$frostlang$frostc$ClassDecl$Q$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlang$frostc$Compiler$isValue$org$frostlang$frostc$Type$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_t);
frost$core$Bit org$frostlang$frostc$Compiler$isImmutable$org$frostlang$frostc$ClassDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlang$frostc$Compiler$isImmutable$org$frostlang$frostc$Type$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_t);
frost$collections$ListView* org$frostlang$frostc$Compiler$instanceFields$org$frostlang$frostc$ClassDecl$R$frost$collections$ListView$LTorg$frostlang$frostc$FieldDecl$GT(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlang$frostc$Compiler$exists$frost$io$File$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, frost$io$File* p_f);
org$frostlang$frostc$ClassDecl* org$frostlang$frostc$Compiler$getClass$frost$core$String$R$org$frostlang$frostc$ClassDecl$Q(org$frostlang$frostc$Compiler* self, frost$core$String* p_fullName);
org$frostlang$frostc$ClassDecl* org$frostlang$frostc$Compiler$getClass$org$frostlang$frostc$Position$frost$core$String$R$org$frostlang$frostc$ClassDecl$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, frost$core$String* p_fullName);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$specializedType$org$frostlang$frostc$ClassDecl$org$frostlang$frostc$Type$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl, org$frostlang$frostc$Type* p_type);
org$frostlang$frostc$ClassDecl* org$frostlang$frostc$Compiler$specialize$org$frostlang$frostc$ClassDecl$org$frostlang$frostc$Type$R$org$frostlang$frostc$ClassDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl, org$frostlang$frostc$Type* p_rawType);
org$frostlang$frostc$ClassDecl* org$frostlang$frostc$Compiler$getClass$org$frostlang$frostc$Type$R$org$frostlang$frostc$ClassDecl$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type);
frost$collections$HashSet* org$frostlang$frostc$Compiler$allInterfaces$org$frostlang$frostc$Type$R$frost$collections$HashSet$LTorg$frostlang$frostc$Type$GT(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_t);
frost$core$Bit org$frostlang$frostc$Compiler$signatureMatch$org$frostlang$frostc$Type$org$frostlang$frostc$Type$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_t1, org$frostlang$frostc$Type* p_t2);
org$frostlang$frostc$MethodDecl* org$frostlang$frostc$Compiler$findMethod$org$frostlang$frostc$Type$frost$core$String$org$frostlang$frostc$Type$frost$core$Bit$R$org$frostlang$frostc$MethodDecl$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_owner, frost$core$String* p_name, org$frostlang$frostc$Type* p_methodType, frost$core$Bit p_checkInterfaces);
org$frostlang$frostc$MethodDecl* org$frostlang$frostc$Compiler$getOverriddenMethod$org$frostlang$frostc$MethodDecl$R$org$frostlang$frostc$MethodDecl$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
frost$collections$ListView* org$frostlang$frostc$Compiler$interfaceMethods$org$frostlang$frostc$ClassDecl$org$frostlang$frostc$Type$R$frost$collections$ListView$LTorg$frostlang$frostc$MethodDecl$GT(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl, org$frostlang$frostc$Type* p_intf);
void org$frostlang$frostc$Compiler$checkInterfaceMethods(org$frostlang$frostc$Compiler* self);
org$frostlang$frostc$SymbolTable* org$frostlang$frostc$Compiler$getSymbolTable$org$frostlang$frostc$ClassDecl$R$org$frostlang$frostc$SymbolTable(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$collections$ListView* org$frostlang$frostc$Compiler$getVTable$org$frostlang$frostc$ClassDecl$R$frost$collections$ListView$LTorg$frostlang$frostc$MethodDecl$GT(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$remapType$org$frostlang$frostc$Type$org$frostlang$frostc$Type$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_context, org$frostlang$frostc$Type* p_raw);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$preferredType$org$frostlang$frostc$Type$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$preferredType$org$frostlang$frostc$ASTNode$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr);
frost$core$Int$nullable org$frostlang$frostc$Compiler$coercionCostUnresolvedParameters$org$frostlang$frostc$Type$org$frostlang$frostc$Type$R$frost$core$Int$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_a, org$frostlang$frostc$Type* p_b);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$coercionCost$org$frostlang$frostc$Type$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$coercionCost$org$frostlang$frostc$Type$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type, org$frostlang$frostc$Compiler$TypeContext* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$coercionCost$frost$collections$CollectionView$LTorg$frostlang$frostc$Type$GT$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, frost$collections$CollectionView* p_types, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$possibleMatches$frost$collections$CollectionView$LTorg$frostlang$frostc$Type$GT$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$Pair$LTfrost$collections$CollectionView$LTorg$frostlang$frostc$Type$GT$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, frost$collections$CollectionView* p_methodTypes, frost$collections$ListView* p_args, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$callCost$frost$collections$CollectionView$LTorg$frostlang$frostc$Type$GT$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, frost$collections$CollectionView* p_methodTypes, frost$collections$ListView* p_args, org$frostlang$frostc$Compiler$TypeContext* p_type);
frost$core$Bit org$frostlang$frostc$Compiler$isClassContext$R$frost$core$Bit(org$frostlang$frostc$Compiler* self);
frost$collections$ListView* org$frostlang$frostc$Compiler$symbolType$org$frostlang$frostc$Type$Q$org$frostlang$frostc$Symbol$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_target, org$frostlang$frostc$Symbol* p_s);
frost$collections$ListView* org$frostlang$frostc$Compiler$symbolType$org$frostlang$frostc$Type$Q$org$frostlang$frostc$Symbol$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$Q$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_target, org$frostlang$frostc$Symbol* p_s, frost$collections$ListView* p_genericArguments);
frost$collections$ListView* org$frostlang$frostc$Compiler$dotTypes$org$frostlang$frostc$Type$frost$core$String$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_base, frost$core$String* p_name);
frost$collections$ListView* org$frostlang$frostc$Compiler$dotTypes$org$frostlang$frostc$Type$frost$core$String$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$Q$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_base, frost$core$String* p_name, frost$collections$ListView* p_genericArguments);
frost$collections$ListView* org$frostlang$frostc$Compiler$identifierType$frost$core$String$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, frost$core$String* p_name);
frost$collections$ListView* org$frostlang$frostc$Compiler$identifierType$frost$core$String$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$Q$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, frost$core$String* p_name, frost$collections$ListView* p_genericArguments);
frost$core$String* org$frostlang$frostc$Compiler$getText$org$frostlang$frostc$ASTNode$R$frost$core$String$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_value);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$tryResolveType$org$frostlang$frostc$ASTNode$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_value);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$tryResolveType$org$frostlang$frostc$ASTNode$frost$core$Bit$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_value, frost$core$Bit p_checkGenericArguments);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$rangePreferredType$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$ASTNode$Q$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_start, org$frostlang$frostc$ASTNode* p_end, org$frostlang$frostc$ASTNode* p_step);
frost$core$Int org$frostlang$frostc$Compiler$smallestCharSize$frost$core$Char32$R$frost$core$Int(org$frostlang$frostc$Compiler* self, frost$core$Char32 p_char);
frost$core$Bit org$frostlang$frostc$Compiler$isTuple$org$frostlang$frostc$ClassDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$collections$ListView* org$frostlang$frostc$Compiler$computeBinaryType$org$frostlang$frostc$ASTNode$org$frostlang$frostc$expression$Binary$Operator$org$frostlang$frostc$ASTNode$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_left, org$frostlang$frostc$expression$Binary$Operator p_op, org$frostlang$frostc$ASTNode* p_right);
frost$collections$ListView* org$frostlang$frostc$Compiler$binaryType$org$frostlang$frostc$Position$org$frostlang$frostc$ASTNode$org$frostlang$frostc$expression$Binary$Operator$org$frostlang$frostc$ASTNode$R$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$ASTNode* p_left, org$frostlang$frostc$expression$Binary$Operator p_op, org$frostlang$frostc$ASTNode* p_right);
frost$collections$CollectionView* org$frostlang$frostc$Compiler$possibleTypes$org$frostlang$frostc$ASTNode$R$frost$collections$CollectionView$LTorg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_value);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$binaryCost$org$frostlang$frostc$ASTNode$org$frostlang$frostc$expression$Binary$Operator$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_left, org$frostlang$frostc$expression$Binary$Operator p_op, org$frostlang$frostc$ASTNode* p_right, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$rangeCoercionCost$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_start, org$frostlang$frostc$ASTNode* p_end, org$frostlang$frostc$ASTNode* p_step, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$typedLambdaCoercionCost$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, frost$collections$ListView* p_parameters, org$frostlang$frostc$ASTNode* p_body, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$untypedLambdaCoercionCost$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, frost$collections$ListView* p_parameters, org$frostlang$frostc$ASTNode* p_body, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$arrayCoercionCost$org$frostlang$frostc$Position$org$frostlang$frostc$FixedArray$LTorg$frostlang$frostc$ASTNode$GT$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$FixedArray* p_elements, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$computeCoercionCost$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$coercionCost$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$coercionCost$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Cfrost$core$Int$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr, org$frostlang$frostc$Compiler$TypeContext* p_target);
frost$core$Bit org$frostlang$frostc$Compiler$canCast$org$frostlang$frostc$Type$org$frostlang$frostc$Type$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type, org$frostlang$frostc$Type* p_target);
frost$core$Bit org$frostlang$frostc$Compiler$equal$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$frost$collections$ListView$LTorg$frostlang$frostc$Type$GT$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, frost$collections$ListView* p_a, frost$collections$ListView* p_b);
void org$frostlang$frostc$Compiler$createChoiceCaseInit$org$frostlang$frostc$ChoiceCase(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ChoiceCase* p_entry);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$declaredType$org$frostlang$frostc$MethodDecl$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$declaredTypeWithSelf$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$Type$frost$core$Bit$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m, org$frostlang$frostc$Type* p_selfType, frost$core$Bit p_forceImmutable);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$inheritedType$org$frostlang$frostc$MethodDecl$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$inheritedTypeWithSelf$org$frostlang$frostc$MethodDecl$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$inheritedTypeWithSelf$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$Type$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m, org$frostlang$frostc$Type* p_selfType);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$literalType$org$frostlang$frostc$Type$R$org$frostlang$frostc$IR$Value(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_t);
void org$frostlang$frostc$Compiler$createChoiceCleanup$org$frostlang$frostc$MethodDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
void org$frostlang$frostc$Compiler$checkAccessModifierCount$org$frostlang$frostc$Position$org$frostlang$frostc$Annotations(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$Annotations* p_a);
void org$frostlang$frostc$Compiler$$anonymous3$org$frostlang$frostc$Compiler$org$frostlang$frostc$MethodDecl$frost$core$Int$frost$core$String(org$frostlang$frostc$Compiler* p_compiler, org$frostlang$frostc$MethodDecl* p_m, frost$core$Int p_flag, frost$core$String* p_name);
void org$frostlang$frostc$Compiler$checkAnnotations$org$frostlang$frostc$MethodDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
frost$core$Int org$frostlang$frostc$Compiler$getIndex$org$frostlang$frostc$FieldDecl$R$frost$core$Int(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$FieldDecl* p_f);
void org$frostlang$frostc$Compiler$capture$org$frostlang$frostc$Position$org$frostlang$frostc$Variable(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$Variable* p_v);
void org$frostlang$frostc$Compiler$capture$org$frostlang$frostc$Position$org$frostlang$frostc$FieldDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$FieldDecl* p_f);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$symbolRef$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$Symbol$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_target, org$frostlang$frostc$Symbol* p_s);
frost$core$Bit org$frostlang$frostc$Compiler$isValueInit$org$frostlang$frostc$MethodDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$implicitInit$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$org$frostlang$frostc$MethodDecl$R$org$frostlang$frostc$IR$Value(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$MethodDecl* p_m);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$createMethodObject$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$MethodDecl$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_target, org$frostlang$frostc$MethodDecl* p_m);
frost$core$String* org$frostlang$frostc$Compiler$explainCoerceFailure$org$frostlang$frostc$MethodRef$org$frostlang$frostc$Type$R$frost$core$String(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodRef* p_m, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$methodCast$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$org$frostlang$frostc$Type$frost$core$Bit$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$Type* p_target, frost$core$Bit p_explicit);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$coerce$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$Type$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$Type* p_target);
frost$core$Bit org$frostlang$frostc$Compiler$$anonymous4$org$frostlang$frostc$MethodDecl$R$frost$core$Bit(org$frostlang$frostc$MethodDecl* p_m);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$coerce$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$Type$frost$core$Bit$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$Type* p_target, frost$core$Bit p_explicit);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$coerce$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$cast$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$Type$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$Type* p_target);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$convert$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$Type$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$Type* p_target);
frost$core$Int org$frostlang$frostc$Compiler$getVTableIndex$org$frostlang$frostc$MethodDecl$R$frost$core$Int(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
void org$frostlang$frostc$Compiler$compileRef$org$frostlang$frostc$IR$Value(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$IR$Value* p_v);
void org$frostlang$frostc$Compiler$compileUnref$org$frostlang$frostc$IR$Value(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$IR$Value* p_v);
frost$core$Bit org$frostlang$frostc$Compiler$$anonymous5$org$frostlang$frostc$FieldDecl$R$frost$core$Bit(org$frostlang$frostc$FieldDecl* p_f);
frost$core$Int org$frostlang$frostc$Compiler$numberSize$org$frostlang$frostc$Type$R$frost$core$Int(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_type);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$binaryType$org$frostlang$frostc$Type$org$frostlang$frostc$Type$frost$core$Bit$frost$core$Bit$R$org$frostlang$frostc$Type(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_leftType, org$frostlang$frostc$Type* p_rightType, frost$core$Bit p_signMatters, frost$core$Bit p_promote32);
frost$core$Bit org$frostlang$frostc$Compiler$$anonymous6$org$frostlang$frostc$MethodRef$org$frostlang$frostc$MethodRef$R$frost$core$Bit(org$frostlang$frostc$MethodRef* p_a, org$frostlang$frostc$MethodRef* p_b);
void org$frostlang$frostc$Compiler$reportAmbiguousMatch$org$frostlang$frostc$Position$frost$collections$ListView$LTorg$frostlang$frostc$MethodRef$GT$frost$collections$ListView$LTorg$frostlang$frostc$ASTNode$GT$org$frostlang$frostc$Compiler$TypeContext(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, frost$collections$ListView* p_methods, frost$collections$ListView* p_args, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$findType$org$frostlang$frostc$Type$org$frostlang$frostc$ClassDecl$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_start, org$frostlang$frostc$ClassDecl* p_target);
org$frostlang$frostc$Type* org$frostlang$frostc$Compiler$findType$frost$collections$CollectionView$LTorg$frostlang$frostc$Type$GT$org$frostlang$frostc$ClassDecl$R$org$frostlang$frostc$Type$Q(org$frostlang$frostc$Compiler* self, frost$collections$CollectionView* p_start, org$frostlang$frostc$ClassDecl* p_target);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$getListType$org$frostlang$frostc$Type$R$org$frostlang$frostc$Pair$LTfrost$core$Bit$Corg$frostlang$frostc$Type$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Type* p_t);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileChoiceCaseReference$org$frostlang$frostc$Position$org$frostlang$frostc$Type$org$frostlang$frostc$ChoiceCase$org$frostlang$frostc$FixedArray$LTorg$frostlang$frostc$ASTNode$GT$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$Type* p_owner, org$frostlang$frostc$ChoiceCase* p_cc, org$frostlang$frostc$FixedArray* p_args, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$getChoiceCase$org$frostlang$frostc$ASTNode$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$Type$Corg$frostlang$frostc$ChoiceCase$GT$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_node);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileCast$org$frostlang$frostc$Position$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Type$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$ASTNode* p_value, org$frostlang$frostc$Type* p_rawTarget);
frost$core$Bit org$frostlang$frostc$Compiler$isNull$org$frostlang$frostc$IR$Value$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$IR$Value* p_v);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileIdentityComparison$org$frostlang$frostc$Position$org$frostlang$frostc$ASTNode$org$frostlang$frostc$expression$Binary$Operator$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$ASTNode* p_left, org$frostlang$frostc$expression$Binary$Operator p_op, org$frostlang$frostc$ASTNode* p_right, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileNull$org$frostlang$frostc$Position$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileRange$org$frostlang$frostc$Position$org$frostlang$frostc$ASTNode$Q$frost$core$Bit$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$ASTNode* p_start, frost$core$Bit p_inclusive, org$frostlang$frostc$ASTNode* p_end, org$frostlang$frostc$ASTNode* p_step, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileReal$org$frostlang$frostc$Position$frost$core$Real64$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, frost$core$Real64 p_value, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileRegex$org$frostlang$frostc$Position$frost$core$String$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, frost$core$String* p_text);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileSelf$org$frostlang$frostc$Position$frost$core$Bit$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, frost$core$Bit p_explicit);
frost$core$Bit org$frostlang$frostc$Compiler$typeMatch$org$frostlang$frostc$IR$Value$Q$org$frostlang$frostc$Compiler$TypeContext$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$IR$Value* p_value, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$genericMethodRef$org$frostlang$frostc$IR$Value$org$frostlang$frostc$FixedArray$LTorg$frostlang$frostc$ASTNode$GT$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$IR$Value* p_raw, org$frostlang$frostc$FixedArray* p_rawTypes);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileMethodExpression$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr, org$frostlang$frostc$Compiler$TypeContext* p_type);
frost$core$Bit org$frostlang$frostc$Compiler$$anonymous7$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$MethodDecl$R$frost$core$Bit(org$frostlang$frostc$MethodDecl* p_a, org$frostlang$frostc$MethodDecl* p_b);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileExpression$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Compiler$TypeContext$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr, org$frostlang$frostc$Compiler$TypeContext* p_type);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileExpression$org$frostlang$frostc$ASTNode$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr);
void org$frostlang$frostc$Compiler$compileConditionalBranch$org$frostlang$frostc$ASTNode$org$frostlang$frostc$IR$Block$ID$org$frostlang$frostc$IR$Block$ID(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_test, org$frostlang$frostc$IR$Block$ID p_ifTrue, org$frostlang$frostc$IR$Block$ID p_ifFalse);
void org$frostlang$frostc$Compiler$compileConditionalBranchInContext$org$frostlang$frostc$ASTNode$org$frostlang$frostc$IR$Block$ID$org$frostlang$frostc$IR$Block$ID$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$MethodDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr, org$frostlang$frostc$IR$Block$ID p_ifTrue, org$frostlang$frostc$IR$Block$ID p_ifFalse, org$frostlang$frostc$MethodDecl* p_owner, org$frostlang$frostc$MethodDecl* p_context);
org$frostlang$frostc$Compiler$EnclosingContext* org$frostlang$frostc$Compiler$findAndLeaveToLoopScope$org$frostlang$frostc$Position$frost$core$String$Q$R$org$frostlang$frostc$Compiler$EnclosingContext$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, frost$core$String* p_label);
org$frostlang$frostc$Pair* org$frostlang$frostc$Compiler$getTryScope$R$org$frostlang$frostc$Pair$LTorg$frostlang$frostc$IR$Block$ID$Q$Corg$frostlang$frostc$Variable$Q$GT$Q(org$frostlang$frostc$Compiler* self);
void org$frostlang$frostc$Compiler$leaveTryScope(org$frostlang$frostc$Compiler* self);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$extractBuiltinBit$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$R$org$frostlang$frostc$IR$Value(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_bit);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$extractBuiltinInt$org$frostlang$frostc$Position$org$frostlang$frostc$IR$Value$R$org$frostlang$frostc$IR$Value(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$IR$Value* p_int);
org$frostlang$frostc$Compiler$Target* org$frostlang$frostc$Compiler$compileTarget$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Variable$Kind$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$Type$Q$R$org$frostlang$frostc$Compiler$Target$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_t, org$frostlang$frostc$Variable$Kind p_kind, org$frostlang$frostc$ASTNode* p_rawValue, org$frostlang$frostc$Type* p_valueType);
void org$frostlang$frostc$Compiler$createScopes$org$frostlang$frostc$Compiler$Target(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Compiler$Target* p_target);
void org$frostlang$frostc$Compiler$initializeTarget$org$frostlang$frostc$Compiler$Target(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Compiler$Target* p_target);
void org$frostlang$frostc$Compiler$compileStore$org$frostlang$frostc$Position$org$frostlang$frostc$Compiler$Target$org$frostlang$frostc$IR$Value(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$Compiler$Target* p_target, org$frostlang$frostc$IR$Value* p_value);
void org$frostlang$frostc$Compiler$compileDeclaration$org$frostlang$frostc$Position$org$frostlang$frostc$ASTNode$org$frostlang$frostc$ASTNode$Q$org$frostlang$frostc$Variable$Kind(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_position, org$frostlang$frostc$ASTNode* p_target, org$frostlang$frostc$ASTNode* p_value, org$frostlang$frostc$Variable$Kind p_varKind);
void org$frostlang$frostc$Compiler$leaveScope$org$frostlang$frostc$Compiler$EnclosingContext(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Compiler$EnclosingContext* p_c);
void org$frostlang$frostc$Compiler$leaveAllScopes(org$frostlang$frostc$Compiler* self);
void org$frostlang$frostc$Compiler$compileStatement$org$frostlang$frostc$ASTNode(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_s);
frost$core$Bit org$frostlang$frostc$Compiler$hasSelfParam$org$frostlang$frostc$MethodDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
frost$core$Bit org$frostlang$frostc$Compiler$callsSelfInit$org$frostlang$frostc$FixedArray$LTorg$frostlang$frostc$ASTNode$GT$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$FixedArray* p_body);
frost$core$Bit org$frostlang$frostc$Compiler$callsSuperInit$org$frostlang$frostc$FixedArray$LTorg$frostlang$frostc$ASTNode$GT$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$FixedArray* p_body);
org$frostlang$frostc$IR$Value* org$frostlang$frostc$Compiler$compileExpressionInContext$org$frostlang$frostc$ASTNode$org$frostlang$frostc$Compiler$TypeContext$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$MethodDecl$R$org$frostlang$frostc$IR$Value$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ASTNode* p_expr, org$frostlang$frostc$Compiler$TypeContext* p_type, org$frostlang$frostc$MethodDecl* p_owner, org$frostlang$frostc$MethodDecl* p_context);
void org$frostlang$frostc$Compiler$compilePreconditions(org$frostlang$frostc$Compiler* self);
void org$frostlang$frostc$Compiler$compilePostcondition$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$ASTNode$frost$collections$Array$LTorg$frostlang$frostc$IR$Block$ID$Q$GT(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_compiling, org$frostlang$frostc$MethodDecl* p_postconditionOwner, org$frostlang$frostc$ASTNode* p_expr, frost$collections$Array* p_successFail);
void org$frostlang$frostc$Compiler$compilePostconditions(org$frostlang$frostc$Compiler* self);
frost$core$Bit org$frostlang$frostc$Compiler$hasTrivialInit$org$frostlang$frostc$ClassDecl$Q$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
void org$frostlang$frostc$Compiler$compile$org$frostlang$frostc$MethodDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
frost$core$Bit org$frostlang$frostc$Compiler$hasPostconditions$org$frostlang$frostc$MethodDecl$R$frost$core$Bit(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m);
void org$frostlang$frostc$Compiler$optimize$org$frostlang$frostc$IR$org$frostlang$frostc$pass$Analyzer(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$IR* p_ir, org$frostlang$frostc$pass$Analyzer* p_analysis);
org$frostlang$frostc$Compiler$EnclosingContext* org$frostlang$frostc$Compiler$getInlineContext$R$org$frostlang$frostc$Compiler$EnclosingContext$Q(org$frostlang$frostc$Compiler* self);
void org$frostlang$frostc$Compiler$compile$org$frostlang$frostc$MethodDecl$org$frostlang$frostc$SymbolTable$Q(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$MethodDecl* p_m, org$frostlang$frostc$SymbolTable* p_enclosingContext);
void org$frostlang$frostc$Compiler$markNonExternal$org$frostlang$frostc$ClassDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
void org$frostlang$frostc$Compiler$checkImmutable$org$frostlang$frostc$ClassDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
void org$frostlang$frostc$Compiler$checkValue$org$frostlang$frostc$ClassDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
void org$frostlang$frostc$Compiler$checkAnnotations$org$frostlang$frostc$ClassDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
void org$frostlang$frostc$Compiler$checkAnnotations$org$frostlang$frostc$FieldDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$FieldDecl* p_f);
void org$frostlang$frostc$Compiler$compile$org$frostlang$frostc$ClassDecl(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$ClassDecl* p_cl);
frost$collections$ListView* org$frostlang$frostc$Compiler$scan$frost$io$File$R$frost$collections$ListView$LTorg$frostlang$frostc$ClassDecl$GT(org$frostlang$frostc$Compiler* self, frost$io$File* p_file);
frost$collections$ListView* org$frostlang$frostc$Compiler$scan$frost$io$File$frost$core$String$R$frost$collections$ListView$LTorg$frostlang$frostc$ClassDecl$GT(org$frostlang$frostc$Compiler* self, frost$io$File* p_path, frost$core$String* p_text);
void org$frostlang$frostc$Compiler$compile$frost$io$File(org$frostlang$frostc$Compiler* self, frost$io$File* p_file);
void org$frostlang$frostc$Compiler$compile$frost$io$File$frost$core$String(org$frostlang$frostc$Compiler* self, frost$io$File* p_path, frost$core$String* p_text);
void org$frostlang$frostc$Compiler$error$org$frostlang$frostc$Position$frost$core$String(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_pos, frost$core$String* p_msg);
void org$frostlang$frostc$Compiler$warn$org$frostlang$frostc$Position$frost$core$String(org$frostlang$frostc$Compiler* self, org$frostlang$frostc$Position p_pos, frost$core$String* p_msg);
void org$frostlang$frostc$Compiler$finish(org$frostlang$frostc$Compiler* self);
void org$frostlang$frostc$Compiler$cleanup(org$frostlang$frostc$Compiler* self);

