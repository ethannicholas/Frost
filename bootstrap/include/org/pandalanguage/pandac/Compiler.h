#pragma once
#include "panda_c.h"
#include "Compiler_types.h"
typedef struct org$pandalanguage$pandac$Compiler org$pandalanguage$pandac$Compiler;
typedef struct panda$threads$MessageQueue panda$threads$MessageQueue;
typedef struct org$pandalanguage$pandac$CodeGenerator org$pandalanguage$pandac$CodeGenerator;
typedef struct org$pandalanguage$pandac$Compiler$Settings org$pandalanguage$pandac$Compiler$Settings;
typedef struct panda$core$String panda$core$String;
#include "panda/core/Bit_types.h"
typedef struct org$pandalanguage$pandac$Type org$pandalanguage$pandac$Type;
typedef struct org$pandalanguage$pandac$ClassDecl org$pandalanguage$pandac$ClassDecl;
typedef struct panda$collections$ListView panda$collections$ListView;
#include "org/pandalanguage/pandac/Position_types.h"
typedef struct panda$collections$HashSet panda$collections$HashSet;
typedef struct org$pandalanguage$pandac$MethodDecl org$pandalanguage$pandac$MethodDecl;
typedef struct org$pandalanguage$pandac$FieldDecl org$pandalanguage$pandac$FieldDecl;
typedef struct org$pandalanguage$pandac$ChoiceCase org$pandalanguage$pandac$ChoiceCase;
typedef struct panda$io$File panda$io$File;
typedef struct org$pandalanguage$pandac$SymbolTable org$pandalanguage$pandac$SymbolTable;
typedef struct org$pandalanguage$pandac$ASTNode org$pandalanguage$pandac$ASTNode;
#include "panda/core/Int64_types.h"
typedef struct org$pandalanguage$pandac$Pair org$pandalanguage$pandac$Pair;
typedef struct org$pandalanguage$pandac$Compiler$TypeContext org$pandalanguage$pandac$Compiler$TypeContext;
typedef struct panda$collections$CollectionView panda$collections$CollectionView;
typedef struct org$pandalanguage$pandac$Symbol org$pandalanguage$pandac$Symbol;
#include "panda/core/Char32_types.h"
#include "org/pandalanguage/pandac/parser/Token/Kind_types.h"
typedef struct org$pandalanguage$pandac$FixedArray org$pandalanguage$pandac$FixedArray;
#include "panda/core/UInt64_types.h"
typedef struct org$pandalanguage$pandac$Annotations org$pandalanguage$pandac$Annotations;
typedef struct org$pandalanguage$pandac$Variable org$pandalanguage$pandac$Variable;
typedef struct org$pandalanguage$pandac$IR$Value org$pandalanguage$pandac$IR$Value;
typedef struct org$pandalanguage$pandac$MethodRef org$pandalanguage$pandac$MethodRef;
#include "org/pandalanguage/pandac/MethodDecl/Kind_types.h"
#include "panda/core/Real64_types.h"
typedef struct org$pandalanguage$pandac$Compiler$LValue org$pandalanguage$pandac$Compiler$LValue;
typedef struct org$pandalanguage$pandac$Compiler$EnclosingContext org$pandalanguage$pandac$Compiler$EnclosingContext;
#include "org/pandalanguage/pandac/Variable/Kind_types.h"

void org$pandalanguage$pandac$Compiler$init$panda$threads$MessageQueue$LTorg$pandalanguage$pandac$Compiler$Error$GT$org$pandalanguage$pandac$CodeGenerator$org$pandalanguage$pandac$Compiler$Settings(org$pandalanguage$pandac$Compiler* self, panda$threads$MessageQueue* p_errorQueue, org$pandalanguage$pandac$CodeGenerator* p_codeGenerator, org$pandalanguage$pandac$Compiler$Settings* p_settings);
void org$pandalanguage$pandac$Compiler$addAlias$panda$core$String(org$pandalanguage$pandac$Compiler* self, panda$core$String* p_name);
panda$core$Bit org$pandalanguage$pandac$Compiler$isRefCounted$org$pandalanguage$pandac$Type$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type);
org$pandalanguage$pandac$ClassDecl* org$pandalanguage$pandac$Compiler$tryResolveClass$panda$core$String$R$org$pandalanguage$pandac$ClassDecl$Q(org$pandalanguage$pandac$Compiler* self, panda$core$String* p_name);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$typeParameters$org$pandalanguage$pandac$Type$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type);
panda$core$Bit org$pandalanguage$pandac$Compiler$checkGenericArguments$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ClassDecl$org$pandalanguage$pandac$Type$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ClassDecl* p_cl, org$pandalanguage$pandac$Type* p_type);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$resolve$org$pandalanguage$pandac$Type$panda$core$Bit$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type, panda$core$Bit p_checkArguments);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$resolve$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type);
void org$pandalanguage$pandac$Compiler$addAllSupertypes$org$pandalanguage$pandac$ClassDecl$panda$collections$HashSet$LTpanda$core$String$GT(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl, panda$collections$HashSet* p_set);
void org$pandalanguage$pandac$Compiler$createChoiceEqualsIfNeeded$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$choiceSuper$org$pandalanguage$pandac$ClassDecl$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
panda$core$Bit org$pandalanguage$pandac$Compiler$resolve$org$pandalanguage$pandac$ClassDecl$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
panda$core$Bit org$pandalanguage$pandac$Compiler$resolve$org$pandalanguage$pandac$MethodDecl$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
void org$pandalanguage$pandac$Compiler$determineRawType$org$pandalanguage$pandac$FieldDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$FieldDecl* p_f);
panda$core$Bit org$pandalanguage$pandac$Compiler$resolve$org$pandalanguage$pandac$FieldDecl$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$FieldDecl* p_f);
void org$pandalanguage$pandac$Compiler$resolve$org$pandalanguage$pandac$ChoiceCase(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ChoiceCase* p_c);
panda$core$Bit org$pandalanguage$pandac$Compiler$isValue$org$pandalanguage$pandac$ClassDecl$Q$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
panda$core$Bit org$pandalanguage$pandac$Compiler$isValue$org$pandalanguage$pandac$Type$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_t);
panda$core$Bit org$pandalanguage$pandac$Compiler$isImmutable$org$pandalanguage$pandac$ClassDecl$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
panda$core$Bit org$pandalanguage$pandac$Compiler$isImmutable$org$pandalanguage$pandac$Type$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_t);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$instanceFields$org$pandalanguage$pandac$ClassDecl$R$panda$collections$ListView$LTorg$pandalanguage$pandac$FieldDecl$GT(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
panda$core$Bit org$pandalanguage$pandac$Compiler$exists$panda$io$File$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, panda$io$File* p_f);
org$pandalanguage$pandac$ClassDecl* org$pandalanguage$pandac$Compiler$getClass$panda$core$String$R$org$pandalanguage$pandac$ClassDecl$Q(org$pandalanguage$pandac$Compiler* self, panda$core$String* p_fullName);
org$pandalanguage$pandac$ClassDecl* org$pandalanguage$pandac$Compiler$getClass$org$pandalanguage$pandac$Position$panda$core$String$R$org$pandalanguage$pandac$ClassDecl$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$String* p_fullName);
org$pandalanguage$pandac$ClassDecl* org$pandalanguage$pandac$Compiler$specialize$org$pandalanguage$pandac$ClassDecl$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl, org$pandalanguage$pandac$Type* p_rawType);
org$pandalanguage$pandac$ClassDecl* org$pandalanguage$pandac$Compiler$getClass$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$ClassDecl$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type);
panda$collections$HashSet* org$pandalanguage$pandac$Compiler$allInterfaces$org$pandalanguage$pandac$Type$R$panda$collections$HashSet$LTorg$pandalanguage$pandac$Type$GT(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_t);
panda$core$Bit org$pandalanguage$pandac$Compiler$signatureMatch$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$Type$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_t1, org$pandalanguage$pandac$Type* p_t2);
org$pandalanguage$pandac$MethodDecl* org$pandalanguage$pandac$Compiler$findMethod$org$pandalanguage$pandac$Type$panda$core$String$org$pandalanguage$pandac$Type$panda$core$Bit$R$org$pandalanguage$pandac$MethodDecl$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_owner, panda$core$String* p_name, org$pandalanguage$pandac$Type* p_methodType, panda$core$Bit p_checkInterfaces);
org$pandalanguage$pandac$MethodDecl* org$pandalanguage$pandac$Compiler$getOverriddenMethod$org$pandalanguage$pandac$MethodDecl$R$org$pandalanguage$pandac$MethodDecl$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$interfaceMethods$org$pandalanguage$pandac$ClassDecl$org$pandalanguage$pandac$Type$R$panda$collections$ListView$LTorg$pandalanguage$pandac$MethodDecl$GT(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl, org$pandalanguage$pandac$Type* p_intf);
void org$pandalanguage$pandac$Compiler$checkInterfaceMethods(org$pandalanguage$pandac$Compiler* self);
org$pandalanguage$pandac$SymbolTable* org$pandalanguage$pandac$Compiler$getSymbolTable$org$pandalanguage$pandac$ClassDecl$R$org$pandalanguage$pandac$SymbolTable(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$getVTable$org$pandalanguage$pandac$ClassDecl$R$panda$collections$ListView$LTorg$pandalanguage$pandac$MethodDecl$GT(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$remapType$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_context, org$pandalanguage$pandac$Type* p_raw);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$preferredType$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$preferredType$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr);
panda$core$Int64$nullable org$pandalanguage$pandac$Compiler$coercionCostUnresolvedParameters$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$Type$R$panda$core$Int64$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_a, org$pandalanguage$pandac$Type* p_b);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$coercionCost$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$coercionCost$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type, org$pandalanguage$pandac$Compiler$TypeContext* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$coercionCost$panda$collections$CollectionView$LTorg$pandalanguage$pandac$Type$GT$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, panda$collections$CollectionView* p_types, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$possibleMatches$panda$collections$CollectionView$LTorg$pandalanguage$pandac$Type$GT$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$Pair$LTpanda$collections$CollectionView$LTorg$pandalanguage$pandac$Type$GT$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, panda$collections$CollectionView* p_methodTypes, panda$collections$ListView* p_args, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$callCost$panda$collections$CollectionView$LTorg$pandalanguage$pandac$Type$GT$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, panda$collections$CollectionView* p_methodTypes, panda$collections$ListView* p_args, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
panda$core$Bit org$pandalanguage$pandac$Compiler$isClassContext$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$symbolType$org$pandalanguage$pandac$Type$Q$org$pandalanguage$pandac$Symbol$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_target, org$pandalanguage$pandac$Symbol* p_s);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$symbolType$org$pandalanguage$pandac$Type$Q$org$pandalanguage$pandac$Symbol$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$Q$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_target, org$pandalanguage$pandac$Symbol* p_s, panda$collections$ListView* p_genericArguments);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$dotTypes$org$pandalanguage$pandac$Type$panda$core$String$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_base, panda$core$String* p_name);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$dotTypes$org$pandalanguage$pandac$Type$panda$core$String$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$Q$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_base, panda$core$String* p_name, panda$collections$ListView* p_genericArguments);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$identifierType$panda$core$String$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, panda$core$String* p_name);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$identifierType$panda$core$String$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$Q$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, panda$core$String* p_name, panda$collections$ListView* p_genericArguments);
panda$core$String* org$pandalanguage$pandac$Compiler$getText$org$pandalanguage$pandac$ASTNode$R$panda$core$String$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_value);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$tryResolveType$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_value);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$tryResolveType$org$pandalanguage$pandac$ASTNode$panda$core$Bit$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_value, panda$core$Bit p_checkGenericArguments);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$rangePreferredType$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$ASTNode$Q$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_start, org$pandalanguage$pandac$ASTNode* p_end, org$pandalanguage$pandac$ASTNode* p_step);
panda$core$Int64 org$pandalanguage$pandac$Compiler$smallestCharSize$panda$core$Char32$R$panda$core$Int64(org$pandalanguage$pandac$Compiler* self, panda$core$Char32 p_char);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$computeBinaryType$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$binaryType$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$R$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right);
panda$collections$CollectionView* org$pandalanguage$pandac$Compiler$possibleTypes$org$pandalanguage$pandac$ASTNode$R$panda$collections$CollectionView$LTorg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_value);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$binaryCost$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$rangeCoercionCost$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_start, org$pandalanguage$pandac$ASTNode* p_end, org$pandalanguage$pandac$ASTNode* p_step, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$typedLambdaCoercionCost$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, panda$collections$ListView* p_parameters, org$pandalanguage$pandac$ASTNode* p_body, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$untypedLambdaCoercionCost$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, panda$collections$ListView* p_parameters, org$pandalanguage$pandac$ASTNode* p_body, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$arrayCoercionCost$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$FixedArray* p_elements, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$computeCoercionCost$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$coercionCost$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Type* p_target);
panda$core$Int64 org$pandalanguage$pandac$Compiler$requiredSize$panda$core$Int64$R$panda$core$Int64(org$pandalanguage$pandac$Compiler* self, panda$core$Int64 p_value);
panda$core$Int64 org$pandalanguage$pandac$Compiler$requiredSize$panda$core$UInt64$R$panda$core$Int64(org$pandalanguage$pandac$Compiler* self, panda$core$UInt64 p_value);
panda$core$Bit org$pandalanguage$pandac$Compiler$canCast$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$Type$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type, org$pandalanguage$pandac$Type* p_target);
panda$core$Bit org$pandalanguage$pandac$Compiler$equal$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$panda$collections$ListView$LTorg$pandalanguage$pandac$Type$GT$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, panda$collections$ListView* p_a, panda$collections$ListView* p_b);
void org$pandalanguage$pandac$Compiler$createChoiceCaseInit$org$pandalanguage$pandac$ChoiceCase(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ChoiceCase* p_entry);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$declaredType$org$pandalanguage$pandac$MethodDecl$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$declaredTypeWithSelf$org$pandalanguage$pandac$MethodDecl$org$pandalanguage$pandac$Type$panda$core$Bit$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m, org$pandalanguage$pandac$Type* p_selfType, panda$core$Bit p_forceImmutable);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$inheritedType$org$pandalanguage$pandac$MethodDecl$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$inheritedTypeWithSelf$org$pandalanguage$pandac$MethodDecl$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$inheritedTypeWithSelf$org$pandalanguage$pandac$MethodDecl$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m, org$pandalanguage$pandac$Type* p_selfType);
panda$core$String* org$pandalanguage$pandac$Compiler$operatorName$org$pandalanguage$pandac$parser$Token$Kind$R$panda$core$String(org$pandalanguage$pandac$parser$Token$Kind p_op);
panda$core$Bit org$pandalanguage$pandac$Compiler$isAssignment$org$pandalanguage$pandac$parser$Token$Kind$R$panda$core$Bit(org$pandalanguage$pandac$parser$Token$Kind p_op);
org$pandalanguage$pandac$parser$Token$Kind org$pandalanguage$pandac$Compiler$removeAssignment$org$pandalanguage$pandac$parser$Token$Kind$R$org$pandalanguage$pandac$parser$Token$Kind(org$pandalanguage$pandac$parser$Token$Kind p_op);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$capturedSelfType$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self);
org$pandalanguage$pandac$ClassDecl* org$pandalanguage$pandac$Compiler$createClosureClass$org$pandalanguage$pandac$MethodDecl$panda$collections$CollectionView$LTorg$pandalanguage$pandac$Compiler$Capture$GT$R$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m, panda$collections$CollectionView* p_captures);
void org$pandalanguage$pandac$Compiler$createChoiceCleanup$org$pandalanguage$pandac$MethodDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
void org$pandalanguage$pandac$Compiler$checkAccessModifierCount$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$Annotations(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$Annotations* p_a);
void org$pandalanguage$pandac$Compiler$$anonymous3$org$pandalanguage$pandac$Compiler$org$pandalanguage$pandac$MethodDecl$panda$core$Int64$panda$core$String(org$pandalanguage$pandac$Compiler* p_compiler, org$pandalanguage$pandac$MethodDecl* p_m, panda$core$Int64 p_flag, panda$core$String* p_name);
void org$pandalanguage$pandac$Compiler$checkAnnotations$org$pandalanguage$pandac$MethodDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
panda$core$Int64 org$pandalanguage$pandac$Compiler$getIndex$org$pandalanguage$pandac$FieldDecl$R$panda$core$Int64(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$FieldDecl* p_f);
void org$pandalanguage$pandac$Compiler$capture$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$Variable(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$Variable* p_v);
void org$pandalanguage$pandac$Compiler$capture$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$FieldDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$FieldDecl* p_f);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$symbolRef$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$Q$org$pandalanguage$pandac$Symbol$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_target, org$pandalanguage$pandac$Symbol* p_s);
panda$core$Bit org$pandalanguage$pandac$Compiler$isValueInit$org$pandalanguage$pandac$MethodDecl$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$implicitInit$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$org$pandalanguage$pandac$MethodDecl$R$org$pandalanguage$pandac$IR$Value(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_value, org$pandalanguage$pandac$MethodDecl* p_m);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$createMethodObject$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$Q$org$pandalanguage$pandac$MethodDecl$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_target, org$pandalanguage$pandac$MethodDecl* p_m);
panda$core$String* org$pandalanguage$pandac$Compiler$explainCoerceFailure$org$pandalanguage$pandac$MethodRef$org$pandalanguage$pandac$Type$R$panda$core$String(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodRef* p_m, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$methodCast$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_value, org$pandalanguage$pandac$Type* p_target);
panda$core$Bit org$pandalanguage$pandac$Compiler$$anonymous4$org$pandalanguage$pandac$MethodDecl$R$panda$core$Bit(org$pandalanguage$pandac$MethodDecl* p_m);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$coerce$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$Q$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_value, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$coerce$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$Q$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_value, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$cast$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$Q$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_value, org$pandalanguage$pandac$Type* p_target);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$convert$org$pandalanguage$pandac$IR$Value$Q$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$IR$Value* p_value, org$pandalanguage$pandac$Type* p_target);
panda$core$Int64 org$pandalanguage$pandac$Compiler$getVTableIndex$org$pandalanguage$pandac$MethodDecl$R$panda$core$Int64(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
void org$pandalanguage$pandac$Compiler$compileRef$org$pandalanguage$pandac$IR$Value(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$IR$Value* p_v);
void org$pandalanguage$pandac$Compiler$compileUnref$org$pandalanguage$pandac$IR$Value(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$IR$Value* p_v);
panda$core$Bit org$pandalanguage$pandac$Compiler$$anonymous5$org$pandalanguage$pandac$FieldDecl$R$panda$core$Bit(org$pandalanguage$pandac$FieldDecl* p_f);
panda$core$Int64 org$pandalanguage$pandac$Compiler$numberSize$org$pandalanguage$pandac$Type$R$panda$core$Int64(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_type);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$binaryType$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$Type$panda$core$Bit$panda$core$Bit$R$org$pandalanguage$pandac$Type(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_leftType, org$pandalanguage$pandac$Type* p_rightType, panda$core$Bit p_signMatters, panda$core$Bit p_promote32);
void org$pandalanguage$pandac$Compiler$reportAmbiguousMatch$org$pandalanguage$pandac$Position$panda$collections$ListView$LTorg$pandalanguage$pandac$MethodRef$GT$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$Compiler$TypeContext(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$collections$ListView* p_methods, panda$collections$ListView* p_args, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
panda$core$Bit org$pandalanguage$pandac$Compiler$$anonymous8$org$pandalanguage$pandac$MethodDecl$R$panda$core$Bit(org$pandalanguage$pandac$MethodDecl* p_m);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$findOverloadedOperator$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$Pair$LTpanda$collections$ListView$LTorg$pandalanguage$pandac$MethodRef$GT$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$findOverloadedOperator$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$Pair$LTpanda$collections$ListView$LTorg$pandalanguage$pandac$MethodRef$GT$Cpanda$core$Int64$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$findType$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$ClassDecl$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_start, org$pandalanguage$pandac$ClassDecl* p_target);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$findType$panda$collections$CollectionView$LTorg$pandalanguage$pandac$Type$GT$org$pandalanguage$pandac$ClassDecl$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, panda$collections$CollectionView* p_start, org$pandalanguage$pandac$ClassDecl* p_target);
org$pandalanguage$pandac$ASTNode* org$pandalanguage$pandac$Compiler$foldInts$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$ASTNode$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right);
org$pandalanguage$pandac$ASTNode* org$pandalanguage$pandac$Compiler$foldStrings$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$ASTNode$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right);
org$pandalanguage$pandac$ASTNode* org$pandalanguage$pandac$Compiler$fold$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$ASTNode$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$getListType$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$Pair$LTpanda$core$Bit$Corg$pandalanguage$pandac$Type$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Type* p_t);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileArray$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$FixedArray* p_elements, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileAtPre$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileAtReturn$org$pandalanguage$pandac$Position$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileAnd$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$ASTNode* p_right, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileOr$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$ASTNode* p_right, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileBinary$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileChoiceCaseReference$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$Type$org$pandalanguage$pandac$ChoiceCase$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$Type* p_owner, org$pandalanguage$pandac$ChoiceCase* p_cc, org$pandalanguage$pandac$FixedArray* p_args, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$getChoiceCase$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Type$Corg$pandalanguage$pandac$ChoiceCase$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_node);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileCast$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Type$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_value, org$pandalanguage$pandac$Type* p_rawTarget);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileClosure$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$MethodDecl$Kind$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$MethodDecl$Kind p_kind, org$pandalanguage$pandac$FixedArray* p_rawParameters, org$pandalanguage$pandac$ASTNode* p_rawReturnType, org$pandalanguage$pandac$FixedArray* p_body, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileDot$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$panda$core$String$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_target, panda$core$String* p_name);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileDot$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$panda$core$String$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_base, panda$core$String* p_name);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileIdentifier$org$pandalanguage$pandac$Position$panda$core$String$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$String* p_name);
panda$core$Bit org$pandalanguage$pandac$Compiler$isNull$org$pandalanguage$pandac$IR$Value$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$IR$Value* p_v);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileIdentityComparison$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_left, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_right, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileInt$org$pandalanguage$pandac$Position$panda$core$UInt64$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$UInt64 p_value, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileNull$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compilePrefix$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$parser$Token$Kind$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$parser$Token$Kind p_op, org$pandalanguage$pandac$ASTNode* p_operand, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileRange$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$Q$panda$core$Bit$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_start, panda$core$Bit p_inclusive, org$pandalanguage$pandac$ASTNode* p_end, org$pandalanguage$pandac$ASTNode* p_step, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileReal$org$pandalanguage$pandac$Position$panda$core$Real64$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$Real64 p_value, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileRegex$org$pandalanguage$pandac$Position$panda$core$String$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$String* p_text);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileSelf$org$pandalanguage$pandac$Position$panda$core$Bit$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$Bit p_explicit);
org$pandalanguage$pandac$Type* org$pandalanguage$pandac$Compiler$typedLambdaType$panda$collections$ListView$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$Type$Q(org$pandalanguage$pandac$Compiler* self, panda$collections$ListView* p_rawParameters, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileTypedLambda$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$FixedArray* p_rawParameters, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileUntypedLambda$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$FixedArray* p_rawParameters, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
panda$core$Bit org$pandalanguage$pandac$Compiler$typeMatch$org$pandalanguage$pandac$IR$Value$Q$org$pandalanguage$pandac$Compiler$TypeContext$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$IR$Value* p_value, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$genericMethodRef$org$pandalanguage$pandac$IR$Value$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$IR$Value* p_raw, org$pandalanguage$pandac$FixedArray* p_rawTypes);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileMethodExpression$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileExpression$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Compiler$TypeContext* p_type);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileExpression$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr);
org$pandalanguage$pandac$Compiler$LValue* org$pandalanguage$pandac$Compiler$compileLValue$org$pandalanguage$pandac$ASTNode$R$org$pandalanguage$pandac$Compiler$LValue$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr);
org$pandalanguage$pandac$Compiler$EnclosingContext* org$pandalanguage$pandac$Compiler$findAndLeaveToLoopScope$org$pandalanguage$pandac$Position$panda$core$String$Q$R$org$pandalanguage$pandac$Compiler$EnclosingContext$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$String* p_label);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$extractBuiltinBit$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$R$org$pandalanguage$pandac$IR$Value(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_bit);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$extractBuiltinInt$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$IR$Value$R$org$pandalanguage$pandac$IR$Value(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$IR$Value* p_int);
org$pandalanguage$pandac$Pair* org$pandalanguage$pandac$Compiler$compileTarget$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Variable$Kind$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$Type$Q$R$org$pandalanguage$pandac$Pair$LTorg$pandalanguage$pandac$Variable$Corg$pandalanguage$pandac$IR$Value$Q$GT$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_t, org$pandalanguage$pandac$Variable$Kind p_kind, org$pandalanguage$pandac$ASTNode* p_rawValue, org$pandalanguage$pandac$Type* p_valueType);
void org$pandalanguage$pandac$Compiler$compileDeclaration$org$pandalanguage$pandac$Position$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$ASTNode$Q$org$pandalanguage$pandac$Variable$Kind(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, org$pandalanguage$pandac$ASTNode* p_target, org$pandalanguage$pandac$ASTNode* p_value, org$pandalanguage$pandac$Variable$Kind p_varKind);
void org$pandalanguage$pandac$Compiler$leaveScope$org$pandalanguage$pandac$Compiler$EnclosingContext(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Compiler$EnclosingContext* p_c);
void org$pandalanguage$pandac$Compiler$leaveAllScopes(org$pandalanguage$pandac$Compiler* self);
void org$pandalanguage$pandac$Compiler$compileStatement$org$pandalanguage$pandac$ASTNode(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_s);
panda$core$Bit org$pandalanguage$pandac$Compiler$hasSelfParam$org$pandalanguage$pandac$MethodDecl$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
panda$core$Bit org$pandalanguage$pandac$Compiler$callsSelfInit$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$FixedArray* p_body);
panda$core$Bit org$pandalanguage$pandac$Compiler$callsSuperInit$org$pandalanguage$pandac$FixedArray$LTorg$pandalanguage$pandac$ASTNode$GT$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$FixedArray* p_body);
org$pandalanguage$pandac$IR$Value* org$pandalanguage$pandac$Compiler$compileExpressionInContext$org$pandalanguage$pandac$ASTNode$org$pandalanguage$pandac$Compiler$TypeContext$org$pandalanguage$pandac$MethodDecl$org$pandalanguage$pandac$MethodDecl$R$org$pandalanguage$pandac$IR$Value$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ASTNode* p_expr, org$pandalanguage$pandac$Compiler$TypeContext* p_type, org$pandalanguage$pandac$MethodDecl* p_owner, org$pandalanguage$pandac$MethodDecl* p_context);
void org$pandalanguage$pandac$Compiler$compilePreconditions(org$pandalanguage$pandac$Compiler* self);
void org$pandalanguage$pandac$Compiler$compilePostconditions(org$pandalanguage$pandac$Compiler* self);
panda$core$Bit org$pandalanguage$pandac$Compiler$hasTrivialInit$org$pandalanguage$pandac$ClassDecl$Q$R$panda$core$Bit(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
void org$pandalanguage$pandac$Compiler$compile$org$pandalanguage$pandac$MethodDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m);
void org$pandalanguage$pandac$Compiler$compile$org$pandalanguage$pandac$MethodDecl$org$pandalanguage$pandac$SymbolTable$Q(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$MethodDecl* p_m, org$pandalanguage$pandac$SymbolTable* p_enclosingContext);
void org$pandalanguage$pandac$Compiler$markNonExternal$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
void org$pandalanguage$pandac$Compiler$checkImmutable$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
void org$pandalanguage$pandac$Compiler$checkValue$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
void org$pandalanguage$pandac$Compiler$$anonymous9$org$pandalanguage$pandac$Compiler$org$pandalanguage$pandac$ClassDecl$panda$core$Int64$panda$core$String(org$pandalanguage$pandac$Compiler* p_compiler, org$pandalanguage$pandac$ClassDecl* p_cl, panda$core$Int64 p_flag, panda$core$String* p_name);
void org$pandalanguage$pandac$Compiler$checkAnnotations$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
void org$pandalanguage$pandac$Compiler$$anonymous10$org$pandalanguage$pandac$Compiler$org$pandalanguage$pandac$FieldDecl$panda$core$Int64$panda$core$String(org$pandalanguage$pandac$Compiler* p_compiler, org$pandalanguage$pandac$FieldDecl* p_f, panda$core$Int64 p_flag, panda$core$String* p_name);
void org$pandalanguage$pandac$Compiler$checkAnnotations$org$pandalanguage$pandac$FieldDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$FieldDecl* p_f);
void org$pandalanguage$pandac$Compiler$compile$org$pandalanguage$pandac$ClassDecl(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$ClassDecl* p_cl);
panda$collections$ListView* org$pandalanguage$pandac$Compiler$scan$panda$io$File$R$panda$collections$ListView$LTorg$pandalanguage$pandac$ClassDecl$GT(org$pandalanguage$pandac$Compiler* self, panda$io$File* p_raw);
void org$pandalanguage$pandac$Compiler$compile$panda$io$File(org$pandalanguage$pandac$Compiler* self, panda$io$File* p_file);
void org$pandalanguage$pandac$Compiler$error$org$pandalanguage$pandac$Position$panda$core$String(org$pandalanguage$pandac$Compiler* self, org$pandalanguage$pandac$Position p_position, panda$core$String* p_msg);
void org$pandalanguage$pandac$Compiler$error$panda$io$File$org$pandalanguage$pandac$Position$panda$core$String(org$pandalanguage$pandac$Compiler* self, panda$io$File* p_file, org$pandalanguage$pandac$Position p_pos, panda$core$String* p_msg);
void org$pandalanguage$pandac$Compiler$finish(org$pandalanguage$pandac$Compiler* self);
void org$pandalanguage$pandac$Compiler$cleanup(org$pandalanguage$pandac$Compiler* self);

