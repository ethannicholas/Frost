#pragma once
#include "frost_c.h"
#include "Compiler_types.h"
typedef struct org$frostlanguage$frostc$Compiler org$frostlanguage$frostc$Compiler;
typedef struct frost$threads$MessageQueue frost$threads$MessageQueue;
typedef struct org$frostlanguage$frostc$CodeGenerator org$frostlanguage$frostc$CodeGenerator;
typedef struct org$frostlanguage$frostc$Compiler$Settings org$frostlanguage$frostc$Compiler$Settings;
typedef struct frost$core$String frost$core$String;
#include "frost/core/Bit_types.h"
typedef struct org$frostlanguage$frostc$Type org$frostlanguage$frostc$Type;
typedef struct org$frostlanguage$frostc$ClassDecl org$frostlanguage$frostc$ClassDecl;
typedef struct frost$collections$ListView frost$collections$ListView;
#include "org/frostlanguage/frostc/Position_types.h"
typedef struct frost$collections$HashSet frost$collections$HashSet;
typedef struct org$frostlanguage$frostc$MethodDecl org$frostlanguage$frostc$MethodDecl;
typedef struct org$frostlanguage$frostc$FieldDecl org$frostlanguage$frostc$FieldDecl;
typedef struct org$frostlanguage$frostc$ChoiceCase org$frostlanguage$frostc$ChoiceCase;
typedef struct frost$io$File frost$io$File;
typedef struct org$frostlanguage$frostc$SymbolTable org$frostlanguage$frostc$SymbolTable;
typedef struct org$frostlanguage$frostc$ASTNode org$frostlanguage$frostc$ASTNode;
#include "frost/core/Int64_types.h"
typedef struct org$frostlanguage$frostc$Pair org$frostlanguage$frostc$Pair;
typedef struct org$frostlanguage$frostc$Compiler$TypeContext org$frostlanguage$frostc$Compiler$TypeContext;
typedef struct frost$collections$CollectionView frost$collections$CollectionView;
typedef struct org$frostlanguage$frostc$Symbol org$frostlanguage$frostc$Symbol;
#include "frost/core/Char32_types.h"
#include "org/frostlanguage/frostc/parser/Token/Kind_types.h"
typedef struct org$frostlanguage$frostc$FixedArray org$frostlanguage$frostc$FixedArray;
#include "frost/core/UInt64_types.h"
typedef struct org$frostlanguage$frostc$Annotations org$frostlanguage$frostc$Annotations;
typedef struct org$frostlanguage$frostc$Variable org$frostlanguage$frostc$Variable;
typedef struct org$frostlanguage$frostc$IR$Value org$frostlanguage$frostc$IR$Value;
typedef struct org$frostlanguage$frostc$MethodRef org$frostlanguage$frostc$MethodRef;
#include "frost/core/Real64_types.h"
typedef struct org$frostlanguage$frostc$Compiler$EnclosingContext org$frostlanguage$frostc$Compiler$EnclosingContext;
#include "org/frostlanguage/frostc/Variable/Kind_types.h"

void org$frostlanguage$frostc$Compiler$init$frost$threads$MessageQueue$LTorg$frostlanguage$frostc$Compiler$Error$GT$org$frostlanguage$frostc$CodeGenerator$org$frostlanguage$frostc$Compiler$Settings(org$frostlanguage$frostc$Compiler* self, frost$threads$MessageQueue* p_errorQueue, org$frostlanguage$frostc$CodeGenerator* p_codeGenerator, org$frostlanguage$frostc$Compiler$Settings* p_settings);
void org$frostlanguage$frostc$Compiler$addAlias$frost$core$String(org$frostlanguage$frostc$Compiler* self, frost$core$String* p_name);
frost$core$Bit org$frostlanguage$frostc$Compiler$isRefCounted$org$frostlanguage$frostc$Type$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type);
org$frostlanguage$frostc$ClassDecl* org$frostlanguage$frostc$Compiler$tryResolveClass$frost$core$String$R$org$frostlanguage$frostc$ClassDecl$Q(org$frostlanguage$frostc$Compiler* self, frost$core$String* p_name);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$typeParameters$org$frostlanguage$frostc$Type$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type);
frost$core$Bit org$frostlanguage$frostc$Compiler$checkGenericArguments$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$ClassDecl$org$frostlanguage$frostc$Type$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$ClassDecl* p_cl, org$frostlanguage$frostc$Type* p_type);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$resolve$org$frostlanguage$frostc$Type$frost$core$Bit$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type, frost$core$Bit p_checkArguments);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$resolve$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type);
void org$frostlanguage$frostc$Compiler$addAllSupertypes$org$frostlanguage$frostc$ClassDecl$frost$collections$HashSet$LTfrost$core$String$GT(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl, frost$collections$HashSet* p_set);
void org$frostlanguage$frostc$Compiler$createChoiceEqualsIfNeeded$org$frostlanguage$frostc$ClassDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$choiceSuper$org$frostlanguage$frostc$ClassDecl$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlanguage$frostc$Compiler$resolve$org$frostlanguage$frostc$ClassDecl$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlanguage$frostc$Compiler$resolve$org$frostlanguage$frostc$MethodDecl$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
void org$frostlanguage$frostc$Compiler$determineRawType$org$frostlanguage$frostc$FieldDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$FieldDecl* p_f);
frost$core$Bit org$frostlanguage$frostc$Compiler$resolve$org$frostlanguage$frostc$FieldDecl$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$FieldDecl* p_f);
void org$frostlanguage$frostc$Compiler$resolve$org$frostlanguage$frostc$ChoiceCase(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ChoiceCase* p_c);
frost$core$Bit org$frostlanguage$frostc$Compiler$isValue$org$frostlanguage$frostc$ClassDecl$Q$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlanguage$frostc$Compiler$isValue$org$frostlanguage$frostc$Type$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_t);
frost$core$Bit org$frostlanguage$frostc$Compiler$isImmutable$org$frostlanguage$frostc$ClassDecl$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlanguage$frostc$Compiler$isImmutable$org$frostlanguage$frostc$Type$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_t);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$instanceFields$org$frostlanguage$frostc$ClassDecl$R$frost$collections$ListView$LTorg$frostlanguage$frostc$FieldDecl$GT(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
frost$core$Bit org$frostlanguage$frostc$Compiler$exists$frost$io$File$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, frost$io$File* p_f);
org$frostlanguage$frostc$ClassDecl* org$frostlanguage$frostc$Compiler$getClass$frost$core$String$R$org$frostlanguage$frostc$ClassDecl$Q(org$frostlanguage$frostc$Compiler* self, frost$core$String* p_fullName);
org$frostlanguage$frostc$ClassDecl* org$frostlanguage$frostc$Compiler$getClass$org$frostlanguage$frostc$Position$frost$core$String$R$org$frostlanguage$frostc$ClassDecl$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, frost$core$String* p_fullName);
org$frostlanguage$frostc$ClassDecl* org$frostlanguage$frostc$Compiler$specialize$org$frostlanguage$frostc$ClassDecl$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$ClassDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl, org$frostlanguage$frostc$Type* p_rawType);
org$frostlanguage$frostc$ClassDecl* org$frostlanguage$frostc$Compiler$getClass$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$ClassDecl$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type);
frost$collections$HashSet* org$frostlanguage$frostc$Compiler$allInterfaces$org$frostlanguage$frostc$Type$R$frost$collections$HashSet$LTorg$frostlanguage$frostc$Type$GT(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_t);
frost$core$Bit org$frostlanguage$frostc$Compiler$signatureMatch$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$Type$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_t1, org$frostlanguage$frostc$Type* p_t2);
org$frostlanguage$frostc$MethodDecl* org$frostlanguage$frostc$Compiler$findMethod$org$frostlanguage$frostc$Type$frost$core$String$org$frostlanguage$frostc$Type$frost$core$Bit$R$org$frostlanguage$frostc$MethodDecl$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_owner, frost$core$String* p_name, org$frostlanguage$frostc$Type* p_methodType, frost$core$Bit p_checkInterfaces);
org$frostlanguage$frostc$MethodDecl* org$frostlanguage$frostc$Compiler$getOverriddenMethod$org$frostlanguage$frostc$MethodDecl$R$org$frostlanguage$frostc$MethodDecl$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$interfaceMethods$org$frostlanguage$frostc$ClassDecl$org$frostlanguage$frostc$Type$R$frost$collections$ListView$LTorg$frostlanguage$frostc$MethodDecl$GT(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl, org$frostlanguage$frostc$Type* p_intf);
void org$frostlanguage$frostc$Compiler$checkInterfaceMethods(org$frostlanguage$frostc$Compiler* self);
org$frostlanguage$frostc$SymbolTable* org$frostlanguage$frostc$Compiler$getSymbolTable$org$frostlanguage$frostc$ClassDecl$R$org$frostlanguage$frostc$SymbolTable(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$getVTable$org$frostlanguage$frostc$ClassDecl$R$frost$collections$ListView$LTorg$frostlanguage$frostc$MethodDecl$GT(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$remapType$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_context, org$frostlanguage$frostc$Type* p_raw);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$preferredType$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$preferredType$org$frostlanguage$frostc$ASTNode$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_expr);
frost$core$Int64$nullable org$frostlanguage$frostc$Compiler$coercionCostUnresolvedParameters$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$Type$R$frost$core$Int64$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_a, org$frostlanguage$frostc$Type* p_b);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$coercionCost$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$coercionCost$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type, org$frostlanguage$frostc$Compiler$TypeContext* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$coercionCost$frost$collections$CollectionView$LTorg$frostlanguage$frostc$Type$GT$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, frost$collections$CollectionView* p_types, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$possibleMatches$frost$collections$CollectionView$LTorg$frostlanguage$frostc$Type$GT$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$Pair$LTfrost$collections$CollectionView$LTorg$frostlanguage$frostc$Type$GT$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, frost$collections$CollectionView* p_methodTypes, frost$collections$ListView* p_args, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$callCost$frost$collections$CollectionView$LTorg$frostlanguage$frostc$Type$GT$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, frost$collections$CollectionView* p_methodTypes, frost$collections$ListView* p_args, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
frost$core$Bit org$frostlanguage$frostc$Compiler$isClassContext$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$symbolType$org$frostlanguage$frostc$Type$Q$org$frostlanguage$frostc$Symbol$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_target, org$frostlanguage$frostc$Symbol* p_s);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$symbolType$org$frostlanguage$frostc$Type$Q$org$frostlanguage$frostc$Symbol$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$Q$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_target, org$frostlanguage$frostc$Symbol* p_s, frost$collections$ListView* p_genericArguments);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$dotTypes$org$frostlanguage$frostc$Type$frost$core$String$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_base, frost$core$String* p_name);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$dotTypes$org$frostlanguage$frostc$Type$frost$core$String$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$Q$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_base, frost$core$String* p_name, frost$collections$ListView* p_genericArguments);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$identifierType$frost$core$String$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, frost$core$String* p_name);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$identifierType$frost$core$String$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$Q$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, frost$core$String* p_name, frost$collections$ListView* p_genericArguments);
frost$core$String* org$frostlanguage$frostc$Compiler$getText$org$frostlanguage$frostc$ASTNode$R$frost$core$String$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_value);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$tryResolveType$org$frostlanguage$frostc$ASTNode$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_value);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$tryResolveType$org$frostlanguage$frostc$ASTNode$frost$core$Bit$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_value, frost$core$Bit p_checkGenericArguments);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$rangePreferredType$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$ASTNode$Q$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_start, org$frostlanguage$frostc$ASTNode* p_end, org$frostlanguage$frostc$ASTNode* p_step);
frost$core$Int64 org$frostlanguage$frostc$Compiler$smallestCharSize$frost$core$Char32$R$frost$core$Int64(org$frostlanguage$frostc$Compiler* self, frost$core$Char32 p_char);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$computeBinaryType$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$parser$Token$Kind$org$frostlanguage$frostc$ASTNode$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_left, org$frostlanguage$frostc$parser$Token$Kind p_op, org$frostlanguage$frostc$ASTNode* p_right);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$binaryType$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$parser$Token$Kind$org$frostlanguage$frostc$ASTNode$R$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$ASTNode* p_left, org$frostlanguage$frostc$parser$Token$Kind p_op, org$frostlanguage$frostc$ASTNode* p_right);
frost$collections$CollectionView* org$frostlanguage$frostc$Compiler$possibleTypes$org$frostlanguage$frostc$ASTNode$R$frost$collections$CollectionView$LTorg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_value);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$binaryCost$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$parser$Token$Kind$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_left, org$frostlanguage$frostc$parser$Token$Kind p_op, org$frostlanguage$frostc$ASTNode* p_right, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$rangeCoercionCost$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_start, org$frostlanguage$frostc$ASTNode* p_end, org$frostlanguage$frostc$ASTNode* p_step, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$typedLambdaCoercionCost$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, frost$collections$ListView* p_parameters, org$frostlanguage$frostc$ASTNode* p_body, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$untypedLambdaCoercionCost$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, frost$collections$ListView* p_parameters, org$frostlanguage$frostc$ASTNode* p_body, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$arrayCoercionCost$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$FixedArray$LTorg$frostlanguage$frostc$ASTNode$GT$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$FixedArray* p_elements, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$computeCoercionCost$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_expr, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$coercionCost$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Cfrost$core$Int64$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_expr, org$frostlanguage$frostc$Type* p_target);
frost$core$Int64 org$frostlanguage$frostc$Compiler$requiredSize$frost$core$Int64$R$frost$core$Int64(org$frostlanguage$frostc$Compiler* self, frost$core$Int64 p_value);
frost$core$Int64 org$frostlanguage$frostc$Compiler$requiredSize$frost$core$UInt64$R$frost$core$Int64(org$frostlanguage$frostc$Compiler* self, frost$core$UInt64 p_value);
frost$core$Bit org$frostlanguage$frostc$Compiler$canCast$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$Type$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type, org$frostlanguage$frostc$Type* p_target);
frost$core$Bit org$frostlanguage$frostc$Compiler$equal$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$frost$collections$ListView$LTorg$frostlanguage$frostc$Type$GT$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, frost$collections$ListView* p_a, frost$collections$ListView* p_b);
void org$frostlanguage$frostc$Compiler$createChoiceCaseInit$org$frostlanguage$frostc$ChoiceCase(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ChoiceCase* p_entry);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$declaredType$org$frostlanguage$frostc$MethodDecl$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$declaredTypeWithSelf$org$frostlanguage$frostc$MethodDecl$org$frostlanguage$frostc$Type$frost$core$Bit$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m, org$frostlanguage$frostc$Type* p_selfType, frost$core$Bit p_forceImmutable);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$inheritedType$org$frostlanguage$frostc$MethodDecl$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$inheritedTypeWithSelf$org$frostlanguage$frostc$MethodDecl$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$inheritedTypeWithSelf$org$frostlanguage$frostc$MethodDecl$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m, org$frostlanguage$frostc$Type* p_selfType);
frost$core$String* org$frostlanguage$frostc$Compiler$operatorName$org$frostlanguage$frostc$parser$Token$Kind$R$frost$core$String(org$frostlanguage$frostc$parser$Token$Kind p_op);
frost$core$Bit org$frostlanguage$frostc$Compiler$isAssignment$org$frostlanguage$frostc$parser$Token$Kind$R$frost$core$Bit(org$frostlanguage$frostc$parser$Token$Kind p_op);
org$frostlanguage$frostc$parser$Token$Kind org$frostlanguage$frostc$Compiler$removeAssignment$org$frostlanguage$frostc$parser$Token$Kind$R$org$frostlanguage$frostc$parser$Token$Kind(org$frostlanguage$frostc$parser$Token$Kind p_op);
void org$frostlanguage$frostc$Compiler$createChoiceCleanup$org$frostlanguage$frostc$MethodDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
void org$frostlanguage$frostc$Compiler$checkAccessModifierCount$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$Annotations(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$Annotations* p_a);
void org$frostlanguage$frostc$Compiler$$anonymous3$org$frostlanguage$frostc$Compiler$org$frostlanguage$frostc$MethodDecl$frost$core$Int64$frost$core$String(org$frostlanguage$frostc$Compiler* p_compiler, org$frostlanguage$frostc$MethodDecl* p_m, frost$core$Int64 p_flag, frost$core$String* p_name);
void org$frostlanguage$frostc$Compiler$checkAnnotations$org$frostlanguage$frostc$MethodDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
frost$core$Int64 org$frostlanguage$frostc$Compiler$getIndex$org$frostlanguage$frostc$FieldDecl$R$frost$core$Int64(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$FieldDecl* p_f);
void org$frostlanguage$frostc$Compiler$capture$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$Variable(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$Variable* p_v);
void org$frostlanguage$frostc$Compiler$capture$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$FieldDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$FieldDecl* p_f);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$symbolRef$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$Q$org$frostlanguage$frostc$Symbol$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_target, org$frostlanguage$frostc$Symbol* p_s);
frost$core$Bit org$frostlanguage$frostc$Compiler$isValueInit$org$frostlanguage$frostc$MethodDecl$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$implicitInit$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$org$frostlanguage$frostc$MethodDecl$R$org$frostlanguage$frostc$IR$Value(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_value, org$frostlanguage$frostc$MethodDecl* p_m);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$createMethodObject$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$Q$org$frostlanguage$frostc$MethodDecl$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_target, org$frostlanguage$frostc$MethodDecl* p_m);
frost$core$String* org$frostlanguage$frostc$Compiler$explainCoerceFailure$org$frostlanguage$frostc$MethodRef$org$frostlanguage$frostc$Type$R$frost$core$String(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodRef* p_m, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$methodCast$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_value, org$frostlanguage$frostc$Type* p_target);
frost$core$Bit org$frostlanguage$frostc$Compiler$$anonymous4$org$frostlanguage$frostc$MethodDecl$R$frost$core$Bit(org$frostlanguage$frostc$MethodDecl* p_m);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$coerce$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$Q$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_value, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$coerce$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$Q$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_value, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$cast$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$Q$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_value, org$frostlanguage$frostc$Type* p_target);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$convert$org$frostlanguage$frostc$IR$Value$Q$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$IR$Value* p_value, org$frostlanguage$frostc$Type* p_target);
frost$core$Int64 org$frostlanguage$frostc$Compiler$getVTableIndex$org$frostlanguage$frostc$MethodDecl$R$frost$core$Int64(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
void org$frostlanguage$frostc$Compiler$compileRef$org$frostlanguage$frostc$IR$Value(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$IR$Value* p_v);
void org$frostlanguage$frostc$Compiler$compileUnref$org$frostlanguage$frostc$IR$Value(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$IR$Value* p_v);
frost$core$Bit org$frostlanguage$frostc$Compiler$$anonymous5$org$frostlanguage$frostc$FieldDecl$R$frost$core$Bit(org$frostlanguage$frostc$FieldDecl* p_f);
frost$core$Int64 org$frostlanguage$frostc$Compiler$numberSize$org$frostlanguage$frostc$Type$R$frost$core$Int64(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_type);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$binaryType$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$Type$frost$core$Bit$frost$core$Bit$R$org$frostlanguage$frostc$Type(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_leftType, org$frostlanguage$frostc$Type* p_rightType, frost$core$Bit p_signMatters, frost$core$Bit p_promote32);
void org$frostlanguage$frostc$Compiler$reportAmbiguousMatch$org$frostlanguage$frostc$Position$frost$collections$ListView$LTorg$frostlanguage$frostc$MethodRef$GT$frost$collections$ListView$LTorg$frostlanguage$frostc$ASTNode$GT$org$frostlanguage$frostc$Compiler$TypeContext(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, frost$collections$ListView* p_methods, frost$collections$ListView* p_args, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$findType$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$ClassDecl$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_start, org$frostlanguage$frostc$ClassDecl* p_target);
org$frostlanguage$frostc$Type* org$frostlanguage$frostc$Compiler$findType$frost$collections$CollectionView$LTorg$frostlanguage$frostc$Type$GT$org$frostlanguage$frostc$ClassDecl$R$org$frostlanguage$frostc$Type$Q(org$frostlanguage$frostc$Compiler* self, frost$collections$CollectionView* p_start, org$frostlanguage$frostc$ClassDecl* p_target);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$getListType$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$Pair$LTfrost$core$Bit$Corg$frostlanguage$frostc$Type$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Type* p_t);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileChoiceCaseReference$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$Type$org$frostlanguage$frostc$ChoiceCase$org$frostlanguage$frostc$FixedArray$LTorg$frostlanguage$frostc$ASTNode$GT$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$Type* p_owner, org$frostlanguage$frostc$ChoiceCase* p_cc, org$frostlanguage$frostc$FixedArray* p_args, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$getChoiceCase$org$frostlanguage$frostc$ASTNode$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Type$Corg$frostlanguage$frostc$ChoiceCase$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_node);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileCast$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Type$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$ASTNode* p_value, org$frostlanguage$frostc$Type* p_rawTarget);
frost$core$Bit org$frostlanguage$frostc$Compiler$isNull$org$frostlanguage$frostc$IR$Value$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$IR$Value* p_v);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileIdentityComparison$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$parser$Token$Kind$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$ASTNode* p_left, org$frostlanguage$frostc$parser$Token$Kind p_op, org$frostlanguage$frostc$ASTNode* p_right, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileNull$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compilePrefix$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$parser$Token$Kind$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$parser$Token$Kind p_op, org$frostlanguage$frostc$ASTNode* p_operand, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileRange$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$ASTNode$Q$frost$core$Bit$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$ASTNode* p_start, frost$core$Bit p_inclusive, org$frostlanguage$frostc$ASTNode* p_end, org$frostlanguage$frostc$ASTNode* p_step, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileReal$org$frostlanguage$frostc$Position$frost$core$Real64$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, frost$core$Real64 p_value, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileRegex$org$frostlanguage$frostc$Position$frost$core$String$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, frost$core$String* p_text);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileSelf$org$frostlanguage$frostc$Position$frost$core$Bit$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, frost$core$Bit p_explicit);
frost$core$Bit org$frostlanguage$frostc$Compiler$typeMatch$org$frostlanguage$frostc$IR$Value$Q$org$frostlanguage$frostc$Compiler$TypeContext$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$IR$Value* p_value, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$genericMethodRef$org$frostlanguage$frostc$IR$Value$org$frostlanguage$frostc$FixedArray$LTorg$frostlanguage$frostc$ASTNode$GT$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$IR$Value* p_raw, org$frostlanguage$frostc$FixedArray* p_rawTypes);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileMethodExpression$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_expr, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileExpression$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Compiler$TypeContext$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_expr, org$frostlanguage$frostc$Compiler$TypeContext* p_type);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileExpression$org$frostlanguage$frostc$ASTNode$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_expr);
org$frostlanguage$frostc$Compiler$EnclosingContext* org$frostlanguage$frostc$Compiler$findAndLeaveToLoopScope$org$frostlanguage$frostc$Position$frost$core$String$Q$R$org$frostlanguage$frostc$Compiler$EnclosingContext$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, frost$core$String* p_label);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$extractBuiltinBit$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$R$org$frostlanguage$frostc$IR$Value(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_bit);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$extractBuiltinInt$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$IR$Value$R$org$frostlanguage$frostc$IR$Value(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$IR$Value* p_int);
org$frostlanguage$frostc$Pair* org$frostlanguage$frostc$Compiler$compileTarget$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Variable$Kind$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$Type$Q$R$org$frostlanguage$frostc$Pair$LTorg$frostlanguage$frostc$Variable$Corg$frostlanguage$frostc$IR$Value$Q$GT$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_t, org$frostlanguage$frostc$Variable$Kind p_kind, org$frostlanguage$frostc$ASTNode* p_rawValue, org$frostlanguage$frostc$Type* p_valueType);
void org$frostlanguage$frostc$Compiler$compileDeclaration$org$frostlanguage$frostc$Position$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$ASTNode$Q$org$frostlanguage$frostc$Variable$Kind(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, org$frostlanguage$frostc$ASTNode* p_target, org$frostlanguage$frostc$ASTNode* p_value, org$frostlanguage$frostc$Variable$Kind p_varKind);
void org$frostlanguage$frostc$Compiler$leaveScope$org$frostlanguage$frostc$Compiler$EnclosingContext(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Compiler$EnclosingContext* p_c);
void org$frostlanguage$frostc$Compiler$leaveAllScopes(org$frostlanguage$frostc$Compiler* self);
void org$frostlanguage$frostc$Compiler$compileStatement$org$frostlanguage$frostc$ASTNode(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_s);
frost$core$Bit org$frostlanguage$frostc$Compiler$hasSelfParam$org$frostlanguage$frostc$MethodDecl$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
frost$core$Bit org$frostlanguage$frostc$Compiler$callsSelfInit$org$frostlanguage$frostc$FixedArray$LTorg$frostlanguage$frostc$ASTNode$GT$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$FixedArray* p_body);
frost$core$Bit org$frostlanguage$frostc$Compiler$callsSuperInit$org$frostlanguage$frostc$FixedArray$LTorg$frostlanguage$frostc$ASTNode$GT$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$FixedArray* p_body);
org$frostlanguage$frostc$IR$Value* org$frostlanguage$frostc$Compiler$compileExpressionInContext$org$frostlanguage$frostc$ASTNode$org$frostlanguage$frostc$Compiler$TypeContext$org$frostlanguage$frostc$MethodDecl$org$frostlanguage$frostc$MethodDecl$R$org$frostlanguage$frostc$IR$Value$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ASTNode* p_expr, org$frostlanguage$frostc$Compiler$TypeContext* p_type, org$frostlanguage$frostc$MethodDecl* p_owner, org$frostlanguage$frostc$MethodDecl* p_context);
void org$frostlanguage$frostc$Compiler$compilePreconditions(org$frostlanguage$frostc$Compiler* self);
void org$frostlanguage$frostc$Compiler$compilePostconditions(org$frostlanguage$frostc$Compiler* self);
frost$core$Bit org$frostlanguage$frostc$Compiler$hasTrivialInit$org$frostlanguage$frostc$ClassDecl$Q$R$frost$core$Bit(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
void org$frostlanguage$frostc$Compiler$compile$org$frostlanguage$frostc$MethodDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m);
void org$frostlanguage$frostc$Compiler$compile$org$frostlanguage$frostc$MethodDecl$org$frostlanguage$frostc$SymbolTable$Q(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$MethodDecl* p_m, org$frostlanguage$frostc$SymbolTable* p_enclosingContext);
void org$frostlanguage$frostc$Compiler$markNonExternal$org$frostlanguage$frostc$ClassDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
void org$frostlanguage$frostc$Compiler$checkImmutable$org$frostlanguage$frostc$ClassDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
void org$frostlanguage$frostc$Compiler$checkValue$org$frostlanguage$frostc$ClassDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
void org$frostlanguage$frostc$Compiler$$anonymous6$org$frostlanguage$frostc$Compiler$org$frostlanguage$frostc$ClassDecl$frost$core$Int64$frost$core$String(org$frostlanguage$frostc$Compiler* p_compiler, org$frostlanguage$frostc$ClassDecl* p_cl, frost$core$Int64 p_flag, frost$core$String* p_name);
void org$frostlanguage$frostc$Compiler$checkAnnotations$org$frostlanguage$frostc$ClassDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
void org$frostlanguage$frostc$Compiler$$anonymous7$org$frostlanguage$frostc$Compiler$org$frostlanguage$frostc$FieldDecl$frost$core$Int64$frost$core$String(org$frostlanguage$frostc$Compiler* p_compiler, org$frostlanguage$frostc$FieldDecl* p_f, frost$core$Int64 p_flag, frost$core$String* p_name);
void org$frostlanguage$frostc$Compiler$checkAnnotations$org$frostlanguage$frostc$FieldDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$FieldDecl* p_f);
void org$frostlanguage$frostc$Compiler$compile$org$frostlanguage$frostc$ClassDecl(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$ClassDecl* p_cl);
frost$collections$ListView* org$frostlanguage$frostc$Compiler$scan$frost$io$File$R$frost$collections$ListView$LTorg$frostlanguage$frostc$ClassDecl$GT(org$frostlanguage$frostc$Compiler* self, frost$io$File* p_raw);
void org$frostlanguage$frostc$Compiler$compile$frost$io$File(org$frostlanguage$frostc$Compiler* self, frost$io$File* p_file);
void org$frostlanguage$frostc$Compiler$error$org$frostlanguage$frostc$Position$frost$core$String(org$frostlanguage$frostc$Compiler* self, org$frostlanguage$frostc$Position p_position, frost$core$String* p_msg);
void org$frostlanguage$frostc$Compiler$error$frost$io$File$org$frostlanguage$frostc$Position$frost$core$String(org$frostlanguage$frostc$Compiler* self, frost$io$File* p_file, org$frostlanguage$frostc$Position p_pos, frost$core$String* p_msg);
void org$frostlanguage$frostc$Compiler$finish(org$frostlanguage$frostc$Compiler* self);
void org$frostlanguage$frostc$Compiler$cleanup(org$frostlanguage$frostc$Compiler* self);

