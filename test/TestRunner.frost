class TestRunner : Immutable {
    constant THREADS := 16

    choice Result {
        SUCCESS(String)
        ERROR(String, String)
    }

    def frostHome:File
    def buildDir:File
    def frostc:File
    def cCompiler:File
    def testDir:File
    def cLibs:ImmutableArray<String>
    def workQueue := MessageQueue<String?>()
    def resultQueue := MessageQueue<Result>()

    init(frostHome:File, buildDir:File, cCompiler:File, cLibs:ListView<String>) {
        self.frostHome := frostHome
        self.buildDir := buildDir
        self.cCompiler := cCompiler
        self.cLibs := ImmutableArray<String>(cLibs)
    }

    method deleteTree(file:File):Error? {
        try {
            if file.isDirectory() {
                def list := file.list()
                for f in list {
                    deleteTree(f)
                }
            }
            file.delete()
            return null
        }
        fail(error) {
            return error
        }
    }

    method runTest(frostc:File, cLibs:ListView<String>, workingDir:File, test:String) {
        try {
            def expected := workingDir.resolve(test + ".expected").readFully()
            def exe := System.temporaryDirectory().resolve(test + ".out")
            if exe.exists() {
                exe.delete()
            }
            def args := Array<String>() -- FIXME literal
            args.add(workingDir.resolve(test + ".frost").path)
            args.add("-o")
            args.add(exe.path)
            args.add("-i")
            args.add(workingDir.parent!.asString)
            def compiler := System.exec(frostc.path, args)
            def compileResult := compiler.standardOutput().readFully() -- FIXME use error stream instead
            compiler.waitFor()
            if compileResult != "" {
                if compileResult != expected {
                    resultQueue.post(Result.ERROR(test,
                            "expected:\n\{expected}\nbut received:\n\{compileResult}"))
                    return
                }
                resultQueue.post(Result.SUCCESS(test))
                return
            }
            def child := System.exec(exe.path, Array<String>())
            def input := workingDir.resolve(test + ".in")
            if input.exists() {
                child.standardInput().print(input.readFully())
                child.standardInput().close()
            }
            def childResult1 := child.standardOutput().readFully()
            def childResult2 := child.standardError().readFully()
            child.waitFor()
            def childResult := childResult1 + childResult2
            if childResult != expected {
                resultQueue.post(Result.ERROR(test,
                        "expected:\n\{expected}\nbut received:\n\{childResult}"))
            }
            else {
                resultQueue.post(Result.SUCCESS(test))
            }
        }
        fail(error) {
            Console.printLine(error)
            System.exit(1)
        }
    }

    method workThread() {
        loop {
            def name := workQueue.getMessage()
            if name == null {
                break
            }
            runTest(frostc, cLibs, testDir, name)
        }
    }

    method recursiveList(file:File):Maybe<Array<File>> {
        try {
            if file.isDirectory() {
                def result := Array<File>()
                for f in file.list() {
                    if f.isDirectory() {
                        result.addAll(recursiveList(f))
                    }
                    else {
                        result.add(f)
                    }
                }
                return Maybe<Array<File>>.SUCCESS(result)
            }
            return Maybe<Array<File>>.ERROR(Error("not a directory"))
        }
        fail(error) {
            return Maybe<Array<File>>.ERROR(error)
        }
    }

    method run() {
        try {
            frostc := buildDir.resolve("frostc")
            testDir := frostHome.resolve("test/tests")
            def files := recursiveList(testDir)
            files.sortInPlace((a, b) => a.name > b.name)
            var success := 0
            def tests := files.filter(f => f.path.endsWith(".frost")).map(
                    f => f.withExtension("").path[self.testDir.path.length + 1..])
            tests.apply(workQueue.post)
            for i in 0 .. THREADS {
                Thread.start(self.workThread)
                workQueue.post(null)
            }
            def errors := Array<Result>()
            for i in 0 .. tests.count {
                def result := resultQueue.getMessage()
                match result {
                    when Result.SUCCESS {
                        Console.print(".")
                        success += 1
                    }
                    when Result.ERROR {
                        Console.print("!")
                        errors.add(result)
                    }
                }
                Console.outputStream().flush()
            }
            Console.printLine()
            for e in errors {
                match e {
                    when Result.ERROR(name, error) {
                        Console.printLine("----------------------------------------")
                        Console.printLine("\{name} \{error}")
                    }
                }
            }
            Console.printLine("----------------------------------------")
            Console.printLine()
            Console.printLine("Summary")
            Console.printLine("-------")
            if errors.count > 0 {
                Console.print("Failures: ")
                -- FIXME inference failure
                Console.printLine(errors.map(function(r:Result):String {
                    match r {
                        when Result.ERROR(name, _) {
                            return name
                        }
                    }
                    unreachable
                }).sort(String.>).join(", "))
            }
            Console.printLine("Passed \{success} / \{tests.count} tests.")
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    @class
    method main(args:ListView<String>) {
        if args.count < 5 {
            Console.printLine("usage: testrunner <frost home> <build path> <c compiler> <c libs...>")
            System.exit(1)
        }
        def frostHome := File(args[1])
        def buildDir := File(args[2])
        def cCompiler := File(args[3])
        def cLibs := args[4...]
        TestRunner(frostHome, buildDir, cCompiler, cLibs).run()
    }
}