class TestRunner {
    choice Mode {
        O0
        O3
        C

        @override
        function convert():String {
            match self {
                when O0 {
                    return "-O0"
                }
                when O3 {
                    return "-O3"
                }
                when C {
                    return "C"
                }
            }
        }
    }

    def frostHome:File
    def buildDir:File
    def cCompiler:File
    def cLibs:ListView<String>

    init(frostHome:File, buildDir:File, cCompiler:File, cLibs:ListView<String>) {
        self.frostHome := frostHome
        self.buildDir := buildDir
        self.cCompiler := cCompiler
        self.cLibs := cLibs
    }

    method deleteTree(file:File):Error? {
        try {
            if file.isDirectory() {
                def list := file.list()
                for f in list {
                    deleteTree(f)
                }
            }
            file.delete()
            return null
        }
        fail(error) {
            return error
        }
    }

    method findCFiles(path:File, result:Array<File>):Error? {
        try {
            if path.path.endsWith(".c") {
                result.add(path)
            }
            else if path.isDirectory() {
                def list := path.list()
                for f in list {
                    findCFiles(f, result)
                }
            }
        }
        fail(error) {
            return error
        }
    }

    method compileCFiles(cLibs:ListView<String>, outPath:File, exe:File):Bit {
        try {
            def files := Array<File>()
            findCFiles(outPath, files)
            def args := Array<String>()
            args.add("-L\{buildDir}")
            args.add("-lc_frost")
            args.add("-lm")
            args.add("-I../bootstrap/include")
            args.add("-I\{outPath}")
            args.add("-I\{frostHome}/src/c")
            for lib in cLibs {
                def libFile := File(lib)
                args.add("-L" + libFile.parent)
                var simpleName := libFile.simpleName
                assert simpleName.startsWith("lib")
                simpleName := simpleName[3..]
                args.add("-l" + simpleName)
            }
            for f in files {
                args.add(f.path)
            }
            args.add("-o")
            args.add(exe.path)
            var compiler := System.exec(cCompiler.path, args)
            var compileResult := compiler.openStandardError().readFully()
            Console.print(compileResult)
            if compiler.waitFor() != 0 {
                Console.printErrorLine("C compiler error")
                return false
            }
            return true
        }
        fail(error) {
            Console.printErrorLine(error)
            return false
        }
    }

    method runTestC(frostc:File, cLibs:ListView<String>, workingDir:File, test:String):Bit {
        try {
            def expected := workingDir.resolve(test + ".expected").readFully()
            def exe := File("/tmp/test.out")
            if exe.exists() {
                exe.delete()
            }
            def outPath := File("/tmp/test.cout")
            if outPath.exists() {
                deleteTree(outPath)
            }
            def args := Array<String>() -- FIXME literal
            args.add(workingDir.resolve(test + ".frost").path)
            args.add("-o")
            args.add(outPath.path)
            args.add("-f")
            args.add("h")
            var compiler := System.exec(frostc.path, args)
            var compileResult := compiler.openStandardOutput().readFully() -- FIXME use error stream instead
            compiler.waitFor()
            if compileResult != "" {
                if compileResult != expected {
                    Console.printLine("error, expected:\n\{expected}\nbut received:")
                    Console.printLine(compileResult)
                    return false
                }
                Console.printLine("success")
                return true
            }
            args.clear()
            args.add(workingDir.resolve(test + ".frost").path)
            args.add("-o")
            args.add(outPath.path)
            args.add("-f")
            args.add("c")
            compiler := System.exec(frostc.path, args)
            compileResult := compiler.openStandardOutput().readFully() -- FIXME use error stream instead
            compiler.waitFor()
            if !compileCFiles(cLibs, outPath, exe) {
                return false
            }
            if compileResult != "" {
                if compileResult != expected {
                    Console.printLine("error, expected:\n\{expected}\nbut received:")
                    Console.printLine(compileResult)
                    return false
                }
                Console.printLine("success")
                return true
            }
            def child := System.exec(exe.path, Array<String>())
            def input := workingDir.resolve(test + ".in")
            if input.exists() {
                child.openStandardInput().print(input.readFully())
                --child.closeStandardInput();
            }
            def childResult1 := child.openStandardOutput().readFully()
            def childResult2 := child.openStandardError().readFully()
            child.waitFor()
            def childResult := childResult1 + childResult2
            if childResult != expected {
                Console.printLine("error, expected:\n\{expected}\nbut received:\n\{childResult}")
                return false
            }
            Console.printLine("success")
            return true
        }
        fail(error) {
            Console.printLine(error)
            System.exit(1)
        }
    }

    method runTest(frostc:File, cLibs:ListView<String>, workingDir:File, test:String,
            mode:Mode):Bit {
        try {
            Console.print("Testing \{test} (\{mode})...")
            match mode {
                when Mode.C {
                    return runTestC(frostc, cLibs, workingDir, test)
                }
            }
            def expected := workingDir.resolve(test + ".expected").readFully()
            def exe := File("/tmp/test.out")
            if exe.exists() {
                exe.delete()
            }
            def args := Array<String>() -- FIXME literal
            args.add(workingDir.resolve(test + ".frost").path)
            args.add("-o")
            args.add(exe.path)
            args.add("-i")
            args.add(workingDir.parent.convert())
            match mode {
                when Mode.O0 {
                    args.add("-O")
                    args.add("0")
                }
                when Mode.O3 {
                    args.add("-O")
                    args.add("3")
                }
            }
            def compiler := System.exec(frostc.path, args)
            def compileResult := compiler.openStandardOutput().readFully() -- FIXME use error stream instead
            compiler.waitFor()
            if compileResult != "" {
                if compileResult != expected {
                    Console.printLine("error, expected:\n\{expected}\nbut received:")
                    Console.printLine(compileResult)
                    return false
                }
                Console.printLine("success")
                return true
            }
            def child := System.exec(exe.path, Array<String>())
            def input := workingDir.resolve(test + ".in")
            if input.exists() {
                child.openStandardInput().print(input.readFully())
                --child.closeStandardInput()
            }
            def childResult1 := child.openStandardOutput().readFully()
            def childResult2 := child.openStandardError().readFully()
            child.waitFor()
            def childResult := childResult1 + childResult2
            if childResult != expected {
                Console.printLine("error, expected:\n\{expected}\nbut received:\n\{childResult}")
                return false
            }
            Console.printLine("success")
            return true
        }
        fail(error) {
            Console.printLine(error)
            System.exit(1)
        }
    }

    @private
    @class
    method swap(a:List<File>, i1:Int, i2:Int) {
        def tmp := a[i1]
        a[i1] := a[i2]
        a[i2] := tmp
    }

    @private
    @class
    function greaterThan(a:String, b:String):Bit {
        -- FIXME add API to String to handle proper Unicode sorting
        for i in 0 .. a.length.min(b.length) {
            if a[i] > b[i] {
                return true
            }
            if a[i] < b[i] {
                return false
            }
        }
        return a.length > b.length
    }

    method run() {
        try {
            def frostc := buildDir.resolve("frostc")
            def tests := frostHome.resolve("test/tests")
            def files := Array<File>(tests.list())
            files.sortInPlace((a, b) => greaterThan(a.name, b.name))
            var total := 0
            var success := 0
            for file in files {
                if file.path.endsWith(".frost") {
                    def name := file.withExtension("").name
                    total += 1
                    if runTest(frostc, cLibs, tests, name, Mode.O0) {
                        success += 1
                    }
    -*                total += 1
                    if runTest(frostc, cLibs, tests, name, Mode.O3) {
                        success += 1
                    }
                    total += 1
                    if runTest(frostc, cLibs, tests, name, Mode.C) {
                        success += 1
                    }*-
                    Console.printLine("Passed \{success} / \{total} tests.")
                }
            }
            Console.printLine("Passed \{success} / \{total} tests.")
        }
        fail(error) {
            Console.printError(error)
            System.exit(1)
        }
    }

    @class
    method main(args:ListView<String>) {
        if args.count < 5 {
            Console.printLine("usage: testrunner <frost home> <build path> <c compiler> <c libs...>")
            System.exit(1)
        }
        def frostHome := File(args[1])
        def buildDir := File(args[2])
        def cCompiler := File(args[3])
        def cLibs := args[4...]
        TestRunner(frostHome, buildDir, cCompiler, cLibs).run()
    }
}