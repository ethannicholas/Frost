class TestRunner {
    choice Mode {
        O0
        O3
        C

        @override
        function convert():String {
            match self {
                when O0 {
                    return "-O0"
                }
                when O3 {
                    return "-O3"
                }
                when C {
                    return "C"
                }
            }
        }
    }

    def pandaHome:File
    def buildDir:File
    def cCompiler:File
    def cLibs:ListView<String>

    init(pandaHome:File, buildDir:File, cCompiler:File, cLibs:ListView<String>) {
        self.pandaHome := pandaHome
        self.buildDir := buildDir
        self.cCompiler := cCompiler
        self.cLibs := cLibs
    }

    method deleteTree(file:File) {
        if file.isDirectory() {
            def list := file.list()
            for f in list {
                deleteTree(f)
            }
        }
        file.delete()
    }

    method findCFiles(path:File, result:Array<File>) {
        if path.path.endsWith(".c") {
            result.add(path)
        }
        else if path.isDirectory() {
            def list := path.list()
            for f in list {
                findCFiles(f, result)
            }
        }
    }

    method compileCFiles(cLibs:ListView<String>, outPath:File, exe:File):Bit {
        def files := Array<File>()
        findCFiles(outPath, files)
        def args := Array<String>()
        args.add("-L\{buildDir}")
        args.add("-lc_panda")
        args.add("-lm")
        args.add("-I../bootstrap/include")
        args.add("-I\{outPath}")
        args.add("-I\{pandaHome}/src/c")
        for lib in cLibs {
            def libFile := File(lib)
            args.add("-L" + libFile.parent())
            var simpleName := libFile.simpleName()
            assert simpleName.startsWith("lib")
            simpleName := simpleName[3..]
            args.add("-l" + simpleName)
        }
        for f in files {
            args.add(f.path)
        }
        args.add("-o")
        args.add(exe.path)
        var compiler := System.exec(cCompiler, args)
        var compileResult := compiler.error.readFully()
        Console.print(compileResult)
        if compiler.waitFor() != 0 {
            Console.printLine("C compiler error")
            System.exit(1)
            return false
        }
        return true
    }

    method runTestC(pandac:File, cLibs:ListView<String>, workingDir:File, test:String):Bit {
        def expected := workingDir.resolve(test + ".expected").readFully()
        def exe := File("/tmp/test.out")
        if exe.exists() {
            exe.delete()
        }
        def outPath := File("/tmp/test.cout")
        if outPath.exists() {
            deleteTree(outPath)
        }
        def args := Array<String>() -- FIXME literal
        args.add(workingDir.resolve(test + ".panda").path)
        args.add("-o")
        args.add(outPath.path)
        args.add("-f")
        args.add("h")
        var compiler := System.exec(pandac, args)
        var compileResult := compiler.output.readFully() -- FIXME use error stream instead
        compiler.waitFor()
        if compileResult != "" {
            if compileResult != expected {
                Console.printLine("error, expected:\n\{expected}\nbut received:\n\{compileResult}")
                return false
            }
            Console.printLine("success")
            return true
        }
        args.clear()
        args.add(workingDir.resolve(test + ".panda").path)
        args.add("-o")
        args.add(outPath.path)
        args.add("-f")
        args.add("c")
        compiler := System.exec(pandac, args)
        compileResult := compiler.output.readFully() -- FIXME use error stream instead
        compiler.waitFor()
        if !compileCFiles(cLibs, outPath, exe) {
            return false
        }
        if compileResult != "" {
            if compileResult != expected {
                Console.printLine("error, expected:\n\{expected}\nbut received:\n\{compileResult}")
                return false
            }
            Console.printLine("success")
            return true
        }
        def child := System.exec(exe, Array<String>())
        def input := workingDir.resolve(test + ".in")
        if input.exists() {
            child.input.print(input.readFully())
            child.input.cleanup() -- FIXME add close and use that
        }
        def childResult1 := child.output.readFully()
        def childResult2 := child.error.readFully()
        child.waitFor()
        def childResult := childResult1 + childResult2
        if childResult != expected {
            Console.printLine("error, expected:\n\{expected}\nbut received:\n\{childResult}")
            return false
        }
        Console.printLine("success")
        return true        
    }

    method runTest(pandac:File, cLibs:ListView<String>, workingDir:File, test:String,
            mode:Mode):Bit {
        Console.print("Testing \{test} (\{mode})...")
        match mode {
            when Mode.C {
                return runTestC(pandac, cLibs, workingDir, test)
            }
        }
        def expected := workingDir.resolve(test + ".expected").readFully()
        def exe := File("/tmp/test.out")
        if exe.exists() {
            exe.delete()
        }
        def args := Array<String>() -- FIXME literal
        args.add(workingDir.resolve(test + ".panda").path)
        args.add("-o")
        args.add(exe.path)
        args.add("-i")
        args.add(workingDir.parent().convert())
        match mode {
            when Mode.O0 {
                args.add("-O")
                args.add("0")
            }
            when Mode.O3 {
                args.add("-O")
                args.add("3")
            }
        }
        def compiler := System.exec(pandac, args)
        def compileResult := compiler.output.readFully() -- FIXME use error stream instead
        compiler.waitFor()
        if compileResult != "" {
            if compileResult != expected {
                Console.printLine("error, expected:\n\{expected}\nbut received:\n\{compileResult}")
                return false
            }
            Console.printLine("success")
            return true
        }
        def child := System.exec(exe, Array<String>())
        def input := workingDir.resolve(test + ".in")
        if input.exists() {
            child.input.print(input.readFully())
            child.input.cleanup() -- FIXME add close and use that
        }
        def childResult1 := child.output.readFully()
        def childResult2 := child.error.readFully()
        child.waitFor()
        def childResult := childResult1 + childResult2
        if childResult != expected {
            Console.printLine("error, expected:\n\{expected}\nbut received:\n\{childResult}")
            return false
        }
        Console.printLine("success")
        return true
    }

    @private
    @class
    method swap(a:List<File>, i1:Int, i2:Int) {
        def tmp := a[i1]
        a[i1] := a[i2]
        a[i2] := tmp
    }

    @private
    @class
    function lessThan(a:String, b:String):Bit {
        for i in 0 .. a.length.min(b.length) {
            if a[i] < b[i] {
                return true
            }
            if a[i] > b[i] {
                return false
            }
        }
        return a.length < b.length
    }

    @private
    @class
    method sort(a:List<File>, left:Int, right:Int) {
        if left >= right {
            return
        }
        def pivotIndex := left + (right - left) // 2
        def pivot := a[pivotIndex]
        swap(a, right, pivotIndex)
        var storeIndex := left
        for i in left ... right - 1 {
            if lessThan(a[i].name(), pivot.name()) {
                swap(a, i, storeIndex)
                storeIndex += 1
            }
        }
        swap(a, storeIndex, right)
        sort(a, left, storeIndex - 1)
        sort(a, storeIndex + 1, right)
    }

    ================================================================================================
    Quick and dirty naive quicksort, until generics are done and ListView can be 
    sorted natively. FIXME kill this.
    ================================================================================================
    @class
    method sort(a:List<File>) {
        sort(a, 0, a.count - 1)
    }

    method run() {
        def pandac := buildDir.resolve("pandac")
        def tests := pandaHome.resolve("test/tests")
        def files := Array<File>(tests.list())
        sort(files)
        var total := 0
        var success := 0
        for file in files {
            if file.path.endsWith(".panda") {
                def name := file.changeExtension("").name()
                total += 1
                if runTest(pandac, cLibs, tests, name, Mode.O0) {
                    success += 1
                }
-*                total += 1
                if runTest(pandac, cLibs, tests, name, Mode.O3) {
                    success += 1
                }
                total += 1
                if runTest(pandac, cLibs, tests, name, Mode.C) {
                    success += 1
                }*-
                Console.printLine("Passed \{success} / \{total} tests.")
            }
        }
        Console.printLine("Passed \{success} / \{total} tests.")
    }

    @class
    method main(args:ListView<String>) {
        if args.count < 5 {
            Console.printLine("usage: testrunner <panda home> <build path> <c compiler> <c libs...>")
            System.exit(1)
        }
        def pandaHome := File(args[1])
        def buildDir := File(args[2])
        def cCompiler := File(args[3])
        def cLibs := args[4...]
        TestRunner(pandaHome, buildDir, cCompiler, cLibs).run()
    }
}