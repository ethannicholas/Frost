choice Expression {
    NUMBER(Int)
    ADD(Expression, Expression)
    SUB(Expression, Expression)
    MUL(Expression, Expression)
    DIV(Expression, Expression)
    NEGATE(Expression)

    @override
    function convert():String {
        match self {
            when NUMBER(v): return v.convert()
            when ADD(a, b): return "(\{a} + \{b})"
            when SUB(a, b): return "(\{a} - \{b})"
            when MUL(a, b): return "(\{a} * \{b})"
            when DIV(a, b): return "(\{a} / \{b})"
            when NEGATE(v): return "-\{v}"
        }
    }

    function evaluate():Int {
        match self {
            when NUMBER(v): return v
            when ADD(a, b): return a + b
            when SUB(a, b): return a - b
            when MUL(a, b): return a * b
            when DIV(a, b): return a // b
            when NEGATE(v): return -v
        }        
    }

    @class
    method main() {
        def five := Expression.NUMBER(5)
        def twelve := Expression.NUMBER(12)
        Console.print(Expression.ADD(five, twelve) + " = ")
        Console.printLine(Expression.ADD(five, twelve).evaluate())
    }
}
