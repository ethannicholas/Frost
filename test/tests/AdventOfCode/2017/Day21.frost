-*

--- Day 21: Fractal Art ---

You find a program trying to generate some art. It uses a strange process that involves repeatedly
enhancing the detail of an image through a set of rules.

The image consists of a two-dimensional square grid of pixels that are either on (#) or off (.). The
program always begins with this pattern:

.#.
..#
###

Because the pattern is both 3 pixels wide and 3 pixels tall, it is said to have a size of 3.

Then, the program repeats the following process:

If the size is evenly divisible by 2, break the pixels up into 2x2 squares, and convert each 2x2
square into a 3x3 square by following the corresponding enhancement rule.

Otherwise, the size is evenly divisible by 3; break the pixels up into 3x3 squares, and convert each
3x3 square into a 4x4 square by following the corresponding enhancement rule.

Because each square of pixels is replaced by a larger one, the image gains pixels and so its size
increases.

The artist's book of enhancement rules is nearby (your puzzle input); however, it seems to be
missing rules. The artist explains that sometimes, one must rotate or flip the input pattern to find
a match. (Never rotate or flip the output pattern, though.) Each pattern is written concisely: rows
are listed as single units, ordered top-down, and separated by slashes. For example, the following
rules correspond to the adjacent patterns:

../.#  =  ..
          .#

                .#.
.#./..#/###  =  ..#
                ###

                        #..#
#..#/..../#..#/.##.  =  ....
                        #..#
                        .##.

When searching for a rule to use, rotate and flip the pattern as necessary. For example, all of the
following patterns match the same rule:

.#.   .#.   #..   ###
..#   #..   #.#   ..#
###   ###   ##.   .#.

Suppose the book contained the following two rules:

../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#

As before, the program begins with this pattern:

.#.
..#
###

The size of the grid (3) is not divisible by 2, but it is divisible by 3. It divides evenly into a
single square; the square matches the second rule, which produces:

#..#
....
....
#..#

The size of this enhanced grid (4) is evenly divisible by 2, so that rule is used. It divides evenly
into four squares:

#.|.#
..|..
--+--
..|..
#.|.#

Each of these squares matches the same rule (../.# => ##./#../...), three of which require some
flipping and rotation to line up with the rule. The output for the rule is the same in all four cases:

##.|##.
#..|#..
...|...
---+---
##.|##.
#..|#..
...|...

Finally, the squares are joined into a new grid:

##.##.
#..#..
......
##.##.
#..#..
......

Thus, after 2 iterations, the grid contains 12 pixels that are on.

How many pixels stay on after 5 iterations?

--- Part Two ---

How many pixels stay on after 18 iterations?

*-

class Picture {
    def data:List<Char8>

    def size:Int

    init(data:String) {
        match data.length {
            when  4 { size := 2 }
            when  9 { size := 3 }
            when 16 { size := 4 }
            otherwise { unreachable }
        }
        self.data := MutableString(data).utf8
    }

    @pre(data.byteLength = size * size)
    init(size:Int, data:String) {
        self.size := size
        self.data := MutableString(data).utf8
    }

    init(size:Int) {
        self.size := size
        self.data := MutableString("." * size * size).utf8
    }

    function get(x:Int, y:Int):Bit {
        return data[y * size + x] = "#"
    }

    method set(x:Int, y:Int, value:Bit) {
        data.[]:=(y * size + x, value.choose("#", "."))
    }

    function rotate():Picture {
        def result := Picture(size)
        for x in 0 .. size {
            for y in 0 .. size {
                result.set(x, size - 1 - y, get(y, x))
            }
        }
        return result
    }

    function flipX():Picture {
        def result := Picture(size)
        for x in 0 .. size {
            for y in 0 .. size {
                result.set(x, y, get(size - x - 1, y))
            }
        }
        return result
    }

    function flipY():Picture {
        def result := Picture(size)
        for x in 0 .. size {
            for y in 0 .. size {
                result.set(x, y, get(x, size - y - 1))
            }
        }
        return result
    }

    method insert(src:Picture, x:Int, y:Int) {
        for i in 0 .. src.size {
            for j in 0 .. src.size {
                set(x + i, y + j, src.get(i, j))
            }
        }
    }

    function extract(x:Int, y:Int, size:Int):Picture {
        def result := Picture(size)
        for i in 0 .. size {
            for j in 0 .. size {
                result.set(i, j, get(x + i, y + j))
            }
        }
        return result
    }

    function process(patterns:MapView<String, Picture>):Picture {
        if size % 2 = 0 {
            def result := Picture(size // 2 * 3)
            for i in 0 .. size by 2 {
                for j in 0 .. size by 2 {
                    def cell := extract(i, j, 2)
                    result.insert(patterns[cell.toString]!, i // 2 * 3, j // 2 * 3)
                }
            }
            return result
        }
        def result := Picture(size // 3 * 4)
        for i in 0 .. size by 3 {
            for j in 0 .. size by 3 {
                def cell := extract(i, j, 3)
                result.insert(patterns[cell.toString]!, i // 3 * 4, j // 3 * 4)
            }
        }
        return result
    }

    @override
    function get_toString():String {
        def result := MutableString()
        for i in 0 .. size {
            if i > 0 {
                result.append("/")
            }
            result.append(String(data[i * size .. i * size + size]))
        }
        return result.finish()
    }
}

method main() {
    def rawPatterns := Console.inputStream().lines().map(
            line => line.replace("/", "").split(" => ").map(s => Picture(s))).all()
    def patterns := HashMap<String, Picture>()
    method addPatterns() {
        for p in rawPatterns {
            patterns[p[0].toString] := p[1]
        }
    }
    addPatterns()
    for i in 0 .. 4 {
        rawPatterns.mapInPlace(p => [p[0].flipX(), p[1]])
        addPatterns()
        rawPatterns.mapInPlace(p => [p[0].flipY(), p[1]])
        addPatterns()
        rawPatterns.mapInPlace(p => [p[0].flipX(), p[1]])
        addPatterns()
        rawPatterns.mapInPlace(p => [p[0].flipY(), p[1]])
        addPatterns()
        rawPatterns.mapInPlace(p => [p[0].rotate(), p[1]])
        addPatterns()
    }
    var picture := Picture(".#...####")
    for i in 0 .. 18 {
        picture := picture.process(patterns)
        if i = 4 | i = 17 {
            Console.printLine(picture.data.filter(c => c = "#").count)
        }
    }
}