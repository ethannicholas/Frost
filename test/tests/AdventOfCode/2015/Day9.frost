-*

--- Day 9: All in a Single Night ---

Every year, Santa manages to deliver all of his presents in a single night.

This year, however, he has some new locations to visit; his elves have provided him the distances
between every pair of locations. He can start and end at any two (different) locations he wants, but
he must visit each location exactly once. What is the shortest distance he can travel to achieve
this?

For example, given the following distances:

London to Dublin = 464
London to Belfast = 518
Dublin to Belfast = 141

The possible routes are therefore:

Dublin -> London -> Belfast = 982
London -> Dublin -> Belfast = 605
London -> Belfast -> Dublin = 659
Dublin -> Belfast -> London = 659
Belfast -> Dublin -> London = 605
Belfast -> London -> Dublin = 982

The shortest of these is London -> Dublin -> Belfast = 605, and so the answer is 605 in this
example.

What is the distance of the shortest route?

--- Part Two ---

The next year, just to show off, Santa decides to take the route with the longest distance instead.

He can still start and end at any two (different) locations he wants, and he still must visit each
location exactly once.

For example, given the distances above, the longest route would be 982 via (for example) Dublin ->
London -> Belfast.

What is the distance of the longest route?

*-

method main() {
    def regex := /(\w+) to (\w+) = (\d+)/
    def edges := HashMap<(String, String), Int>()
    def vertices := HashSet<String>()
    for line in Console.inputStream().lines() {
        def parsed := line.parse(regex)
        if parsed[0] < parsed[1] {
            edges[(parsed[0], parsed[1])] := parsed[2].asInt
        }
        else {
            edges[(parsed[1], parsed[0])] := parsed[2].asInt
        }
        vertices.add(parsed[0])
        vertices.add(parsed[1])
    }

    function length(path:Array<String>, edges:HashMap<(String, String), Int>):Int {
        var result := 0
        var start := path[0]
        for i in 1 .. path.count {
            if start < path[i] {
                result += edges[(start, path[i])]
            }
            else {
                result += edges[(path[i], start)]
            }
            start := path[i]
        }
        return result
    }

    def indices := Array<Int>(vertices.count, 0)
    def lengths := Array<Int>()
    outer: loop {
        def remaining := Array<String>()
        for s in vertices {
            remaining.add(s)
        }
        def path := Array<String>()
        for i in indices {
            path.add(remaining[i])
            remaining.removeIndex(i)
        }
        lengths.add(length(path, edges))
        var bump := 0
        while indices[bump] + 1 = vertices.count - bump {
            indices[bump] := 0
            bump += 1
            if bump = indices.count {
                break outer
            }
        }
        indices[bump] += 1
    }
    Console.printLine(lengths.fold(Int.min))
    Console.printLine(lengths.fold(Int.max))
}
