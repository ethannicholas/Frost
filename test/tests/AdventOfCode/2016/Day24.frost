-*

--- Day 24: Air Duct Spelunking ---

You've finally met your match; the doors that provide access to the roof are locked tight, and all
of the controls and related electronics are inaccessible. You simply can't reach them.

The robot that cleans the air ducts, however, can.

It's not a very fast little robot, but you reconfigure it to be able to interface with some of the
exposed wires that have been routed through the HVAC system. If you can direct it to each of those
locations, you should be able to bypass the security controls.

You extract the duct layout for this area from some blueprints you acquired and create a map with
the relevant locations marked (your puzzle input). 0 is your current location, from which the
cleaning robot embarks; the other numbers are (in no particular order) the locations the robot needs
to visit at least once each. Walls are marked as #, and open passages are marked as '.'. Numbers
behave like open passages.

For example, suppose you have a map like the following:

###########
#0.1.....2#
#.#######.#
#4.......3#
###########

To reach all of the points of interest as quickly as possible, you would have the robot take the
following path:

0 to 4 (2 steps)
4 to 1 (4 steps; it can't move diagonally)
1 to 2 (6 steps)
2 to 3 (2 steps)

Since the robot isn't very fast, you need to find it the shortest route. This path is the fewest
steps (in the above example, a total of 14) required to start at 0 and then visit every other
location at least once.

Given your actual map, and starting from location 0, what is the fewest number of steps required to
visit every non-0 number marked on the map at least once?

--- Part Two ---

Of course, if you leave the cleaning robot somewhere weird, someone is bound to notice.

What is the fewest number of steps required to start at 0, visit every non-0 number marked on the
map at least once, and then return to 0?

*-

uses extras.Algorithms

method main() {
    def targets := Array<(Int, Int)>()
    def map := Array<Array<Bit>>()
    for line in Console.inputStream().lines() {
        def row := Array<Bit>()
        for i in 0 .. line.length {
            if line[i].isDigit {
                def index := line[i].asInt - "0"->Char8.asInt
                while targets.count <= index {
                    targets.add((-1, -1))
                }
                targets[index] := ((map.count, i))
            }
            row.add(line[i] != "#")
        }
        map.add(row)
    }
    function neighbors(n:(Int, Int)):Array<(Int, Int)> {
        def result := Array<(Int, Int)>()
        if map[n[0] - 1][n[1]] {
            result.add((n[0] - 1, n[1]))
        }
        if map[n[0] + 1][n[1]] {
            result.add((n[0] + 1, n[1]))
        }
        if map[n[0]][n[1] - 1] {
            result.add((n[0], n[1] - 1))
        }
        if map[n[0]][n[1] + 1] {
            result.add((n[0], n[1] + 1))
        }
        return result
    }
    function estimatedDistanceToGoal(goal:(Int, Int)):((Int, Int))=>(Int) {
        return x => (x[0] - goal[0]).abs + (x[1] - goal[1]).abs
    }
    def cache := HashMap<((Int, Int), (Int, Int)), Int>()
    method distance(p:ListView<(Int, Int)>):Int {
        var total := 0
        for i in 1 .. p.count {
            var dist := cache[(p[i - 1], p[i])]
            if dist == null {
                dist := Algorithms.aStar(p[i - 1], p[i], neighbors, (a, b) => 1,
                        estimatedDistanceToGoal(p[i]))
                cache[(p[i - 1], p[i])] := dist
                cache[(p[i], p[i - 1])] := dist
            }
            total += dist
        }
        return total
    }
    var min := Int.MAX
    for p in targets.permutations {
        min := min.min(distance(p))
    }
    Console.printLine(min)
    min := Int.MAX
    for p in targets[1..].permutations {
        def combined := Array<(Int, Int)>()
        combined.add(targets[0])
        combined.addAll(p)
        combined.add(targets[0])
        min := min.min(distance(combined))
    }
    Console.printLine(min)
}
