class Room {
    var label:Int
    var exits := Array<Int>()
    var bats:Bit
    var pit:Bit
    var wumpus:Bit
    
    init(label:Int) {
        self.label := label
    }
    
    function hasExitTo(r:Room):Bit {
        for i in 0 .. exits.count {
            if exits[i] = r.label {
                return true
            }
        }
        return false
    }
    
    @override
    function convert():String {
        return label.convert()
    }
}

class HuntTheWumpus {
    constant ROOMS  := 20
    constant BATS   := 3
    constant PITS   := 3
    constant EXITS  := 3
    constant ARROWS := 5

    def random:Random := XorShift128Plus(1)
    var rooms:Array<Room>
    var currentRoom:Room
    var arrows := ARROWS
    var done:Bit
    
    init() {
        createRooms(ROOMS)

        do {
            currentRoom := rooms[random.int(rooms.count - 1)]
        }
        while currentRoom.wumpus | currentRoom.bats | currentRoom.pit
    }
    
    method shuffle(a:Array<Int>) {
        for i in 0 .. a.count {
            def index := random.int(a.count)
            def tmp := a[i]
            a[i] := a[index]
            a[index] := tmp
        }
    }
    
    method canConnect(fromRoom:Room, toRoom:Room):Bit {
        return fromRoom.label != toRoom.label & toRoom.exits.count < EXITS &
                !fromRoom.hasExitTo(toRoom)
    }
    
    method getShuffledArray(count:Int):Array<Int> {
        def result := Array<Int>()
        for i in 0 .. count {
            result.add(i)
        }
        shuffle(result)
        return result
    }
    
    method createRooms(count:Int) {
        rooms := Array<Room>()
        -- make a random walk which hits each room exactly once. this will guarantee that each room
        -- is reachable.
        for i in 1 ... count {
            rooms.add(Room(i))
        }
        def firstPath := getShuffledArray(count)
        shuffle(firstPath)

        for i in 0 .. count - 1 {
            def room1 := rooms[firstPath[i]]
            def room2 := rooms[firstPath[i + 1]]
            room1.exits.add(room2.label)
            room2.exits.add(room1.label)
        }
        
        -- fill in the remaining exits randomly
        for i in 0 .. rooms.count {
            def fromRoom := rooms[i]
            while fromRoom.exits.count < EXITS {
                def searchOrder := getShuffledArray(count)
                var found := false
                for j in 0 .. searchOrder.count {
                    def toRoom := rooms[searchOrder[j]]
                    if canConnect(fromRoom, toRoom) {
                        fromRoom.exits.add(toRoom.label)
                        toRoom.exits.add(fromRoom.label)
                        found := true
                        break
                    }
                }
                if !found {
                    createRooms(count)
                    break
                }
            }
        }
        
        -- place features
        for i in 1 ... BATS {
            loop {
                def room := rooms[random.int(rooms.count)]
                if !room.bats {
                    room.bats := true
                    break
                }
            }
        }

        for i in 1 ... PITS {
            loop {
                def room := rooms[random.int(rooms.count)]
                if !room.bats & !room.pit {
                    room.pit := true
                    break
                }
            }
        }

        loop {
            def room := rooms[random.int(rooms.count)]
            if !room.bats & !room.pit & !room.wumpus {
                room.wumpus := true
                break
            }
        }
    }
    
    function getRoom(i:Int):Room {
        return rooms[i - 1]
    }
    
    method showIntro() {
        Console.printLine("You're in a cave with \{rooms.count} rooms and " +
                "\{EXITS} tunnels leading from each room.")
        Console.printLine("There are \{BATS} bats and \{PITS} pits scattered " +
                "throughout the cave, and your")
        Console.printLine("quiver holds \{ARROWS} custom super anti-evil " +
                "Wumpus arrows. Good luck.")
        Console.printLine()
    }
    
    method writePercepts() {
        var bats := false
        var pit := false
        var wumpus := false
        for i in 0 .. currentRoom.exits.count {
            def room := getRoom(currentRoom.exits[i])
            bats |= room.bats
            pit |= room.pit
            wumpus |= room.wumpus
            for i in 0 .. room.exits.count {
                wumpus |= getRoom(room.exits[i]).wumpus
            }
        }
        if bats {
            Console.printLine("*rustle* *rustle* (must be bats nearby)")
        }
        if pit {
            Console.printLine("*whoosh* (I feel a draft from some pits).")
        }
        if wumpus {
            Console.printLine("*sniff* (I can smell the evil Wumpus nearby!)")
        }
    }
    
    method printRoomInfo() {
        Console.printLine("You are in room \{currentRoom.label} of the cave, and have \{arrows} " +
                "arrows left.")
        writePercepts()
        Console.print("There are tunnels to rooms ")
        for i in 0 .. currentRoom.exits.count {
            if i > 0 {
                Console.print(", ")
            }
            if i = currentRoom.exits.count - 1 {
                Console.print("and ")
            }
            Console.print(currentRoom.exits[i])
        }
        Console.printLine(".")
    }
    
    method enterRoom(room:Room) {
        enterRoom(room, false)
    }

    method enterRoom(room:Room, alreadyMoved:Bit) {
        currentRoom := room
        if currentRoom.wumpus {
            Console.printLine("*ROAR* *chomp* *snurfle* *chomp*!")
            Console.printLine("Much to the delight of the Wumpus, you walked right into his mouth,")
            Console.printLine("making you one of the easiest dinners he's ever had!  For you, however,")
            Console.printLine("it's a rather unpleasant death. The only good thing is that it's been")
            Console.printLine("so long since the evil Wumpus cleaned his teeth that you immediately")
            Console.printLine("passed out from the stench!")
            done := true
        }
        else if currentRoom.bats {
            Console.print("*flap*  *flap*  *flap*  (humongous bats pick you up and move you")
            if alreadyMoved {
                Console.print(" again")
            }
            Console.printLine("!)")
            enterRoom(rooms[random.int(rooms.count)], true)
        }
        else if currentRoom.pit {
            if random.int(12) < 2 {
                Console.printLine("Without conscious thought you grab for the side of the cave and manage")
                Console.printLine("to grasp onto a rocky outcrop. Beneath your feet stretches the limitless")
                Console.printLine("depths of a bottomless pit!  Rock crumbles beneath your feet!")
            }
            else {
                Console.printLine("*AAAUUUUGGGGGHHHHHhhhhhhhhhh...*")
                Console.printLine("The whistling sound and updraft as you walked into this room of the")
                Console.printLine("cave apparently wasn't enough to clue you in to the presence of the")
                Console.printLine("bottomless pit. You have a lot of time to reflect on this error as")
                Console.printLine("you fall many miles to the core of the earth. Look on the bright side;")
                Console.printLine("you can at least find out if Jules Verne was right...")
                done := true
            }
        }
    }
    
    method shoot(targets:Array<Int>) {
        var arrowRoom := currentRoom
        for i in 0 .. targets.count {
            def targetLabel := targets[i]
            def target := getRoom(targetLabel)
            if arrowRoom.label = target.label {
                Console.printLine("The arrow falls to the floor.")
                break
            }
            var ricochet := false
            if !arrowRoom.hasExitTo(target) {
                def newTarget := getRoom(arrowRoom.exits[random.int(arrowRoom.exits.count)])
                Console.printLine("*thunk*  The arrow can't find a way from \{arrowRoom} to " +
                        "\{target} and flies randomly ")
                Console.printLine("into room \{newTarget}!")
                target := newTarget
                ricochet := true
            }
            arrowRoom := target
            if arrowRoom.label = currentRoom.label {
                Console.printLine("*Thwack!*  A sudden piercing feeling informs you that the ricochet")
                Console.printLine("of your wild arrow has resulted in it wedging in your side, causing")
                Console.printLine("extreme agony. The evil Wumpus, with its psychic powers, realizes this")
                Console.printLine("and immediately rushes to your side, not to help, alas, but to EAT YOU!")
                Console.printLine("(*CHOMP*)")
                done := true
                break
            }
            else if arrowRoom.wumpus {
                Console.printLine("*thwock!* *groan* *crash*")
                Console.printLine("A horrible roar fills the cave, and you realize, with a smile, that you")
                Console.printLine("have slain the evil Wumpus and won the game!  You don't want to tarry for")
                Console.printLine("long, however, because the stench of a dead Wumpus is also quite well")
                Console.printLine("known, a stench powerful enough to slay the mightiest adventurer with")
                Console.printLine("a single whiff!!")
                done := true
                break
            }
            
            if ricochet {
                break
            }

            def luck := random.int(10)
            if i = 2 & luck < 2 {
                Console.printLine("Your bowstring breaks!  *twaaaaaang*")
                Console.printLine("The arrow is weakly shot and can go no further!")
                break
            }
            else if i = 3 & luck < 6 | i = 4 & rooms.count > 5 {
                Console.printLine("The arrow wavers in its flight and and can go no further!")
                break
            }
        }
        
        arrows := arrows - 1
        if arrows = 0 & !done {
            Console.printLine("You turn and look at your quiver, and realize with a sinking feeling")
            Console.printLine("that you've just shot your last arrow (figuratively, too). Sensing this")
            Console.printLine("with its psychic powers, the evil Wumpus rampages through the cave, finds")
            Console.printLine("you, and with a mighty *ROAR* eats you alive!")
            done := true
        }
        if !done {
            if random.int(10) < (ARROWS - arrows) * 2 {
                Console.printLine("The noise of your shot has awoken the Wumpus!")
                moveWumpus()
            }
        }
    }
    
    method moveWumpus() {
        for i in 0 .. rooms.count {
            def room := rooms[i]
            if room.wumpus {
                room.wumpus := false
                def target := getRoom(room.exits[random.int(room.exits.count)])
                target.wumpus := true
                if target.label = currentRoom.label {
                    Console.printLine("You hear a horrible slithering sound, and look up just in time")
                    Console.printLine("to see the Wumpus crawling into the room!  Faster than you can")
                    Console.printLine("react, it catches you in its dripping jaws and devours you whole!")
                    done := true
                }
                break
            }
        }
    }
    
    method play() {
        showIntro()
        
        main: while !done {
            printRoomInfo()
            Console.print("m<room#> to move, s<room#s> to shoot: ")
            var command := Console.readLine()
            if command = null {
                break
            }
            Console.printLine()
            if command.startsWith("m") {
                def roomString := command[command.next(command.start())..]
                def label := roomString.convert()->Int?
                if label != null & label >= 1 & label <= rooms.count {
                    var room := getRoom(label)
                    if currentRoom.hasExitTo(room) {
                        enterRoom(room)
                    }
                    else {
                        Console.printLine("\n*Oof!* (You hit the wall)")
                        if random.int(6) = 0 {
                            Console.printLine("Your colorful comments awaken the Wumpus!")
                            moveWumpus()
                        }
                    }
                }
                else {
                    Console.printLine("'\{roomString}' is not a valid room number")
                }
            }
            else if command.startsWith("s") {
                def roomStrings := command[command.next(command.start())..].split(",")
                def roomNumbers := Array<Int>()
                for i in 0 .. roomStrings.count {
                    def label := roomStrings[i]
                    def room := label.convert()->Int?
                    if room = null | room < 1 | room > ROOMS {
                        Console.printLine("'\{label}' is not a valid room number")
                        continue main
                    }
                    roomNumbers.add(room)
                }
                shoot(roomNumbers)
            }
            else if command.startsWith("q") {
                done := true
            }
            else {
                Console.printLine("I don't understand!")
            }
        }
    }
    
    @class
    method main() {
        loop {
            def hunt := HuntTheWumpus()
            hunt.play()
            Console.print("Care to play another game? (y/n) ")
            def read := Console.readLine()
            if read != null {
                if !read.startsWith("y") {
                    break
                }
                Console.printLine()
            }
            else {
                break
            }
        }
    }
}